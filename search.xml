<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>剑指Offer归类总结</title>
      <link href="/2023/03/23/Leetcode/"/>
      <url>/2023/03/23/Leetcode/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LeetCode学习计划里的剑指offer为期一个月，刷完又会重置，后面的题点又点不进去，只能等到对应天数才解锁，还要我一个一个搜，故做了这篇博客用于复习。</p></blockquote><h1 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h1><h2 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h2><p><a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">题目链接</a><br>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p><p>示例：</p><blockquote><p>输入: [“CQueue”,”appendTail”,”deleteHead”,”deleteHead”,”deleteHead”]<br>[[],[3],[],[],[]]<br>输出：[null,null,3,-1,-1]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span> &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; A;</span><br><span class="line">    LinkedList&lt;Integer&gt; B;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        A = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        B = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendTail</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        A.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(B.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(A.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!A.isEmpty())&#123;</span><br><span class="line">                B.push(A.pop());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> B.pop();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> B.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h2><p><a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">题目链接</a><br>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p><p>示例:</p><blockquote><p>MinStack minStack &#x3D; new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.min();   –&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      –&gt; 返回 0.<br>minStack.min();   –&gt; 返回 -2.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; A;</span><br><span class="line">    LinkedList&lt;Integer&gt; B;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        A = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        B = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        A.push(x);</span><br><span class="line">        <span class="keyword">if</span>(B.isEmpty() || B.peek() &gt;= A.peek())&#123;</span><br><span class="line">            B.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(A.pop().equals(B.peek()))&#123;</span><br><span class="line">            B.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> A.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> B.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a>滑动窗口的最大值</h2><p><a href="https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">题目链接</a><br>给定一个数组 <code>nums</code> 和滑动窗口的大小 <code>k</code>，请找出所有滑动窗口里的最大值。</p><p>示例:</p><blockquote><p>输入: nums &#x3D; [1,3,-1,-3,5,3,6,7], 和 k &#x3D; 3<br>输出: [3,3,5,5,6,7]<br>解释:<br>  滑动窗口的位置                最大值<br>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length - k + <span class="number">1</span>];</span><br><span class="line">        Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!queue.isEmpty() &amp;&amp; i - queue.peek() &gt;= k) &#123;</span><br><span class="line">                queue.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty() &amp;&amp; nums[i] &gt; nums[queue.peekLast()]) &#123;</span><br><span class="line">                queue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            queue.offer(i);</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">                res[j++] = nums[queue.peek()];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列的最大值"><a href="#队列的最大值" class="headerlink" title="队列的最大值"></a>队列的最大值</h2><p><a href="https://leetcode.cn/problems/dui-lie-de-zui-da-zhi-lcof/">题目链接</a><br>请定义一个队列并实现函数 <code>max_value</code> 得到队列里的最大值，要求函数<code>max_value</code>、<code>push_back</code> 和 <code>pop_front</code> 的均摊时间复杂度都是O(1)。</p><p>若队列为空，<code>pop_front</code> 和 <code>max_value</code> 需要返回 -1</p><p>示例：</p><blockquote><p>输入:<br>[“MaxQueue”,”push_back”,”push_back”,”max_value”,”pop_front”,”max_value”]<br>[[],[1],[2],[],[],[]]<br>输出: [null,null,null,2,1,2]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaxQueue</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line">    Deque&lt;Integer&gt; deque;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MaxQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max_value</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> deque.isEmpty() ? -<span class="number">1</span> : deque.peekFirst();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push_back</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        queue.offer(value);</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty() &amp;&amp; deque.peekLast() &lt; value)&#123;</span><br><span class="line">            deque.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        deque.offerLast(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop_front</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(queue.isEmpty()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(queue.peek().equals(deque.peekFirst()))&#123;</span><br><span class="line">            deque.pollFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h2><p><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">题目链接</a><br>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p>示例：</p><blockquote><p>输入：head &#x3D; [1,3,2]<br>输出：[2,3,1]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        dfs(head);</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[tmp.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++)&#123;</span><br><span class="line">            res[i] = tmp.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(head.next);</span><br><span class="line">        tmp.add(head.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p><a href="https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/">题目链接</a><br>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><p>示例：</p><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h2><p><a href="https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/">题目链接</a><br>请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 <code>next</code> 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p><p>示例：<br><img src="https://www.zer02.fun/img/blogpng/leetcode_01.webp" alt="示例"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//复制链表</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">curNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(cur.val);</span><br><span class="line">            curNode.next = cur.next;</span><br><span class="line">            cur.next = curNode;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//链接random</span></span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.random != <span class="literal">null</span>)&#123;</span><br><span class="line">                cur.next.random = cur.random.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分离</span></span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">curHead</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">curCopy</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//分离原链表</span></span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">if</span>(curCopy.next != <span class="literal">null</span>)&#123;</span><br><span class="line">                curCopy.next = curCopy.next.next;</span><br><span class="line">                curCopy = curCopy.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curHead;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h2><p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">题目链接</a><br>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><p>示例：</p><blockquote><p>输入：s &#x3D; “We are happy.”<br>输出：”We%20are%20happy.”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="literal">null</span> || s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="左旋转字符串"><a href="#左旋转字符串" class="headerlink" title="左旋转字符串"></a>左旋转字符串</h2><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">题目链接</a><br>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><p>示例：</p><blockquote><p>输入: s &#x3D; “abcdefg”, k &#x3D; 2<br>输出: “cdefgab”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.substring(n) + s.substring(<span class="number">0</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表示数值的字符串"><a href="#表示数值的字符串" class="headerlink" title="表示数值的字符串"></a>表示数值的字符串</h2><p><a href="https://leetcode.cn/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/">题目链接</a><br>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。<br><strong>数值</strong>（按顺序）可以分成以下几个部分：<br>    1.若干空格<br>    2.一个 小数 或者 整数<br>    3.（可选）一个 ‘e’ 或 ‘E’ ，后面跟着一个 整数<br>    4.若干空格<br><strong>小数</strong>（按顺序）可以分成以下几个部分：<br>    （可选）一个符号字符（’+’ 或 ‘-‘）<br>    下述格式之一：<br>        1.至少一位数字，后面跟着一个点 ‘.’<br>        2.至少一位数字，后面跟着一个点 ‘.’ ，后面再跟着至少一位数字<br>        3.一个点 ‘.’ ，后面跟着至少一位数字<br><strong>整数</strong>（按顺序）可以分成以下几个部分：<br>    （可选）一个符号字符（’+’ 或 ‘-‘）<br>    至少一位数字<br>部分数值列举如下：</p><ul><li><code>[&quot;+100&quot;, &quot;5e2&quot;, &quot;-123&quot;, &quot;3.1416&quot;, &quot;-1E-16&quot;, &quot;0123&quot;]</code><br>部分非数值列举如下：</li><li><code>[&quot;12e&quot;, &quot;1a3.14&quot;, &quot;1.2.3&quot;, &quot;+-5&quot;, &quot;12e+5.4&quot;]</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNumber</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="literal">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        s = s.trim();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">numFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">dotFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">eFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s.charAt(i) &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                numFlag = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">&#x27;.&#x27;</span> &amp;&amp; !dotFlag &amp;&amp; !eFlag)&#123;</span><br><span class="line">                dotFlag = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>((s.charAt(i) == <span class="string">&#x27;e&#x27;</span> || s.charAt(i) == <span class="string">&#x27;E&#x27;</span>) &amp;&amp; !eFlag &amp;&amp; numFlag)&#123;</span><br><span class="line">                eFlag = <span class="literal">true</span>;</span><br><span class="line">                numFlag = <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>((s.charAt(i) == <span class="string">&#x27;+&#x27;</span> || s.charAt(i) == <span class="string">&#x27;-&#x27;</span>) &amp;&amp; (i == <span class="number">0</span> || s.charAt(i - <span class="number">1</span>) == <span class="string">&#x27;e&#x27;</span> || s.charAt(i -  <span class="number">1</span>) == <span class="string">&#x27;E&#x27;</span>))&#123;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numFlag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="把字符串转换成整数"><a href="#把字符串转换成整数" class="headerlink" title="把字符串转换成整数"></a>把字符串转换成整数</h2><p><a href="https://leetcode.cn/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/">题目链接</a><br>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p><p> </p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p><p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p><p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p><p>说明：</p><p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strToInt</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] c = str.trim().toCharArray();</span><br><span class="line">        <span class="keyword">if</span>(c.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, bndry = Integer.MAX_VALUE / <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, sign = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(c[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) sign = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c[<span class="number">0</span>] != <span class="string">&#x27;+&#x27;</span>) i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; c.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c[j] &lt; <span class="string">&#x27;0&#x27;</span> || c[j] &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(res &gt; bndry || res == bndry &amp;&amp; c[j] &gt; <span class="string">&#x27;7&#x27;</span>) <span class="keyword">return</span> sign == <span class="number">1</span> ? Integer.MAX_VALUE : Integer.MIN_VALUE;</span><br><span class="line">            res = res * <span class="number">10</span> + (c[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sign * res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h2><p><a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">题目链接</a><br>找出数组中重复的数字。<br>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例：</p><blockquote><p>输入：[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRepeatNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == i)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[nums[i]] == nums[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            nums[i] = nums[tmp];</span><br><span class="line">            nums[tmp] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在排序数组中查找数字-I"><a href="#在排序数组中查找数字-I" class="headerlink" title="在排序数组中查找数字 I"></a>在排序数组中查找数字 I</h2><p><a href="https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">题目链接</a><br>统计一个数字在排序数组中出现的次数。</p><p>示例：</p><blockquote><p>输入: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8<br>输出: 2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(nums, target) - helper(nums, target - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + ((j - i) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[m] &lt;= target)&#123;</span><br><span class="line">                i = m + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0～n-1中缺失的数字"><a href="#0～n-1中缺失的数字" class="headerlink" title="0～n-1中缺失的数字"></a>0～n-1中缺失的数字</h2><p><a href="https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/">题目链接</a><br>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p><p>示例：</p><blockquote><p>输入: [0,1,3]<br>输出: 2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">missingNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + ((j - i ) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[m] == m)&#123;</span><br><span class="line">                i = m + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h2><p><a href="https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/">题目链接</a><br>在一个 n * m 的二维数组中，每一行都按照从左到右 非递减 的顺序排序，每一列都按照从上到下 非递减 的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>示例：<br>现有矩阵 matrix 如下：</p><blockquote><p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findNumberIn2DArray</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>, col = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(row &lt; m &amp;&amp; col &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[row][col] &gt; target)&#123;</span><br><span class="line">                col--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(matrix[row][col] &lt; target)&#123;</span><br><span class="line">                row++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h2><p><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">题目链接</a><br>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p><p>给你一个可能存在 重复 元素值的数组 <code>numbers</code> ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一次旋转，该数组的最小值为 1。  </p><p>注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</p><p>示例：</p><blockquote><p>输入：numbers &#x3D; [3,4,5,1,2]<br>输出：1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minArray</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(numbers[m] &lt; numbers[r])&#123;</span><br><span class="line">                r = m;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[m] &gt; numbers[r])&#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers[l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第一个只出现一次的字符"><a href="#第一个只出现一次的字符" class="headerlink" title="第一个只出现一次的字符"></a>第一个只出现一次的字符</h2><p><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">题目链接</a><br>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。</p><p>示例：</p><blockquote><p>输入：s &#x3D; “abaccdeff”<br>输出：’b’</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">firstUniqChar</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ch = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">char</span>[] str = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : str)&#123;</span><br><span class="line">            ch[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ch[str[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> str[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="搜索与回溯"><a href="#搜索与回溯" class="headerlink" title="搜索与回溯"></a>搜索与回溯</h1><h2 id="从上到下打印二叉树"><a href="#从上到下打印二叉树" class="headerlink" title="从上到下打印二叉树"></a>从上到下打印二叉树</h2><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">题目链接</a><br>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            tmp.add(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[tmp.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++)&#123;</span><br><span class="line">            res[i] = tmp.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从上到下打印二叉树-II"><a href="#从上到下打印二叉树-II" class="headerlink" title="从上到下打印二叉树 II"></a>从上到下打印二叉树 II</h2><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/">题目链接</a><br>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> queue.size(); i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                tmp.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从上到下打印二叉树-III"><a href="#从上到下打印二叉树-III" class="headerlink" title="从上到下打印二叉树 III"></a>从上到下打印二叉树 III</h2><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">题目链接</a><br>请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            flag = !flag;</span><br><span class="line">            LinkedList&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> queue.size(); i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    tmp.addLast(node.val);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tmp.addFirst(node.val);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a>树的子结构</h2><p><a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/">题目链接</a><br>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p><p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubStructure</span><span class="params">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(A == <span class="literal">null</span> || B == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">helper</span><span class="params">(TreeNode A, TreeNode B)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(B == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(A == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> A.val == B.val &amp;&amp; helper(A.left, B.left) &amp;&amp; helper(A.right, B.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a>二叉树的镜像</h2><p><a href="https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof/">题目链接</a><br>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">mirrorTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> mirrorTree(root.left);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> mirrorTree(root.right);</span><br><span class="line">        root.left = right;</span><br><span class="line">        root.right = left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对称的二叉树"><a href="#对称的二叉树" class="headerlink" title="对称的二叉树"></a>对称的二叉树</h2><p><a href="https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/">题目链接</a><br>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">helper</span><span class="params">(TreeNode p, TreeNode q)</span>&#123;</span><br><span class="line">        <span class="comment">//先且再或</span></span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">null</span> || q == <span class="literal">null</span> || p.val != q.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(p.left, q.right) &amp;&amp; helper(p.right, q.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h2><p><a href="https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/">题目链接</a><br>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p>例如，在下面的 3×4 的矩阵中包含单词 “ABCCED”（单词中的字母已标出）。<br><img src="https://www.zer02.fun/img/blogpng/leetcode_02.webp" alt="示例"></p><p>示例：</p><blockquote><p>输入：board &#x3D; [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word &#x3D; “ABCCED”<br>输出：true</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] words = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(backtrack(board, words, i, j, <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">char</span>[] words, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= board.length || i &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || j &lt; <span class="number">0</span> || board[i][j] != words[start]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(start == words.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        board[i][j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> backtrack(board, words, i + <span class="number">1</span>, j, start + <span class="number">1</span>) || backtrack(board, words, i - <span class="number">1</span>, j, start + <span class="number">1</span>) || </span><br><span class="line">                      backtrack(board, words, i, j + <span class="number">1</span>, start + <span class="number">1</span>) || backtrack(board, words, i, j - <span class="number">1</span>, start + <span class="number">1</span>);</span><br><span class="line">        board[i][j] = words[start];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="机器人的运动范围"><a href="#机器人的运动范围" class="headerlink" title="机器人的运动范围"></a>机器人的运动范围</h2><p><a href="https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/">题目链接</a><br>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7&#x3D;18。但它不能进入方格 [35, 38]，因为3+5+3+8&#x3D;19。请问该机器人能够到达多少个格子？</p><p>示例：</p><blockquote><p>输入：m &#x3D; 2, n &#x3D; 3, k &#x3D; 1<br>输出：3</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[][] visit;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">movingCount</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        visit = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">return</span> dfs(m, n, k, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= m || j &gt;= n || visit[i][j] || tmpSum(i) + tmpSum(j) &gt; k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        visit[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + dfs(m, n, k, i + <span class="number">1</span>, j) + dfs(m, n, k, i, j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">tmpSum</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num != <span class="number">0</span>)&#123;</span><br><span class="line">            sum += num % <span class="number">10</span>;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树中和为某一值的路径"><a href="#二叉树中和为某一值的路径" class="headerlink" title="二叉树中和为某一值的路径"></a>二叉树中和为某一值的路径</h2><p><a href="https://leetcode.cn/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">题目链接</a><br>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。</p><p>叶子节点 是指没有子节点的节点。</p><p>示例:<br><img src="https://www.zer02.fun/img/blogpng/leetcode_03.webp" alt="示例"></p><blockquote><p>输入：root &#x3D; [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum &#x3D; 22<br>输出：[[5,4,11,2],[5,8,4,5]]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        backtrack(root, target);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        tmp.add(root.val);</span><br><span class="line">        target -= root.val;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> &amp;&amp; root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack(root.left, target);</span><br><span class="line">        backtrack(root.right, target);</span><br><span class="line">        tmp.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h2><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/">题目链接</a><br>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p><p>为了让您更好地理解问题，以下面的二叉搜索树为例：<br><img src="https://www.zer02.fun/img/blogpng/leetcode_04.webp" alt="示例"><br>我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p><p>下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。<br><img src="https://www.zer02.fun/img/blogpng/leetcode_05.webp" alt="示例"><br>特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">treeToDoublyList</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        infixOrder(root, queue);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            pre.right = cur;</span><br><span class="line">            cur.left = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.right = head;</span><br><span class="line">        head.left = pre;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">(Node root, Queue queue)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            infixOrder(root.left, queue);</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            infixOrder(root.right, queue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树的第k大节点"><a href="#二叉搜索树的第k大节点" class="headerlink" title="二叉搜索树的第k大节点"></a>二叉搜索树的第k大节点</h2><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/">题目链接</a><br>给定一棵二叉搜索树，请找出其中第 <code>k</code> 大的节点的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthLargest</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        dfs(root, k);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            dfs(root.right, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(++count == k)&#123;</span><br><span class="line">            res = root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            dfs(root.left, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记之动态规划(三)</title>
      <link href="/2023/03/23/dynamicProgramming-iii/"/>
      <url>/2023/03/23/dynamicProgramming-iii/</url>
      
        <content type="html"><![CDATA[<h2 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h2><h3 id="LeetCode-198-打家劫舍"><a href="#LeetCode-198-打家劫舍" class="headerlink" title="LeetCode 198. 打家劫舍"></a>LeetCode 198. 打家劫舍</h3><p><a href="https://leetcode.cn/problems/house-robber/">LeetCode题目链接</a><br>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[i]: 考虑下标i（包括i）以内的房屋，最多可以偷窃的金额为dp[i]</p></li><li><p>确定递推公式<br>分为两种情况：<br>不偷i房间：dp[i] &#x3D; dp[i - 1]，即保持上一次的状态。<br>偷i房间： dp[i] &#x3D; dp[i - 2] + nums[i]。<br><em>那不偷i房间就一定会偷i - 1房间吗？</em><br>这里我们对dp数组的定义就很关键，<strong>考虑下标i（包括i）以内的房屋</strong>,并不是一定会偷i房间，到底偷不偷由递推公式推导得出。<br>所以状态转移方程为：<br><code>dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);</code></p></li><li><p>dp数组初始化<br>因为递推公式中有dp[i - 1]和dp[i - 2]，所以应当初始化dp[0]和dp[1]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = nums[<span class="number">0</span>];<span class="comment">//考虑0号房间，最多可以偷窃的金额为nums[0]</span></span><br><span class="line">dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);<span class="comment">//考虑1号（包括1号）以内的房屋，最多可以偷窃的金额选最大</span></span><br></pre></td></tr></table></figure></li><li><p>确定遍历顺序<br>由递推公式可知，dp[i]由dp[i - 1]和dp[i - 2]推导而来，应该从前往后遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;nums.length; i++)&#123;</span><br><span class="line">    dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br>输入：[2,7,9,3,1],结果为：<br><code>2 7 11 11 12</code></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br><span class="line">            System.out.println(dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-213-打家劫舍-II"><a href="#LeetCode-213-打家劫舍-II" class="headerlink" title="LeetCode 213. 打家劫舍 II"></a>LeetCode 213. 打家劫舍 II</h3><p><a href="https://leetcode.cn/problems/house-robber-ii/">LeetCode题目链接</a><br>本题与<a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a>唯一不同的点是<strong>数组首尾相接，形成一个环</strong>，这意味着我们要在首尾之间进行取舍。<br>我们只需要分情况讨论即可。</p><ul><li>情况一：考虑首尾都不偷<br><img src="https://www.zer02.fun/img/blogpng/dp_12.webp" alt="分类情况"></li><li>情况二：考虑包含首元素，不包含尾元素<br><img src="https://www.zer02.fun/img/blogpng/dp_13.webp" alt="分类情况"></li><li>情况三：考虑包含尾元素，不包含首元素<br><img src="https://www.zer02.fun/img/blogpng/dp_14.webp" alt="分类情况"><br>这里的关键点是<strong>考虑</strong>，并不是我把首&#x2F;尾元素考虑进去，我就一定会偷！并且情况二和情况三都包含情况一，所以只实现情况二和情况三即可。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(myRob(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>), myRob(nums, <span class="number">1</span>, nums.length));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">myRob</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;<span class="comment">//解耦</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = <span class="number">0</span>, z = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">            y = z;</span><br><span class="line">            z = Math.max(y, x + nums[i]);</span><br><span class="line">            x = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-337-打家劫舍-III"><a href="#LeetCode-337-打家劫舍-III" class="headerlink" title="LeetCode 337. 打家劫舍 III"></a>LeetCode 337. 打家劫舍 III</h3><p><a href="https://leetcode.cn/problems/house-robber-iii/">LeetCode题目链接</a><br>本题与前面的dp题目都不同的点是这是一道<strong>树形dp</strong>，但本质上都是在考虑<strong>当前结点可不可取</strong>。<br>首先我们需要明确dp数组的定义：<br>dp[2]：记录当前结点<strong>偷与不偷</strong>两个状态得到的金钱，dp[0]代表不偷，dp[1]代表偷</p><p>我们以如图所示的二叉树举例：<br><img src="https://www.zer02.fun/img/blogpng/dp_15.webp" alt="分类情况"><br>如果不偷根节点，那就要考虑左右孩子要不要偷，即：<br><code>root[0] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);</code><br>如果偷根节点，那么左右孩子都不能偷，即：<br><code>root[1] = root.val + left[0] + right[0]</code>;<br>从这里可以看出，无论偷不偷根节点，我们都要对其左右孩子结点操作，也就是说<strong>我们需要对二叉树进行后序遍历！</strong><br>将其推广，则其递推公式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不偷当前结点，左右孩子在偷不偷之间做选择</span></span><br><span class="line">dp[<span class="number">0</span>] = Math.max(left[<span class="number">0</span>], left[<span class="number">1</span>]) + Math.max(right[<span class="number">0</span>], right[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//偷当前结点，左右孩子不偷</span></span><br><span class="line">dp[<span class="number">1</span>] = root.val + left[<span class="number">0</span>] + right[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>由于是涉及递归，需要对终止条件和单层递归逻辑进行处理，我这里直接贴上代码，思路也比较简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = myRob(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[<span class="number">0</span>], dp[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] myRob(TreeNode root) &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后序遍历先取其左右孩子</span></span><br><span class="line">        <span class="type">int</span>[] left = myRob(root.left);</span><br><span class="line">        <span class="type">int</span>[] right = myRob(root.right);</span><br><span class="line">        <span class="comment">//不偷当前结点，左右孩子在偷不偷之间做选择</span></span><br><span class="line">        dp[<span class="number">0</span>] = Math.max(left[<span class="number">0</span>], left[<span class="number">1</span>]) + Math.max(right[<span class="number">0</span>], right[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//偷当前结点，左右孩子不偷</span></span><br><span class="line">        dp[<span class="number">1</span>] = root.val + left[<span class="number">0</span>] + right[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="买卖股票"><a href="#买卖股票" class="headerlink" title="买卖股票"></a>买卖股票</h2><p><strong>这类题目我只会对二维数组版本进行总结，二维数组思路比较清晰，方便理解与总结，我会在完整代码部分附上空间优化版本。</strong></p><h3 id="LeetCode-121-买卖股票的最佳时机"><a href="#LeetCode-121-买卖股票的最佳时机" class="headerlink" title="LeetCode 121. 买卖股票的最佳时机"></a>LeetCode 121. 买卖股票的最佳时机</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">LeetCode题目链接</a><br>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>本题有两个状态，一个第i天持有股票的价值，另一个记录第i天买入还是卖出，所以需要定义一个二维数组<br>dp[i][0]: 第i天持有股票的最大价值<br>dp[i][1]: 第i天不持有股票的最大价值<br>这里的<strong>持有</strong>很关键，并不是说我第i天一定买入或卖出了股票得到了最大价值，它仅仅表示的是一种状态，我也可能第i - 1天已经卖出了。</p></li><li><p>确定递推公式<br>如果第i天持有股票即dp[i][0]，可以由两个状态推导而来</p></li></ul><ol><li>第i - 1天已经持有股票，那就维持原状，即dp[i - 1][0]</li><li>第i天买入股票，即-prices[0]<br>如果第i天不持有股票即dp[i][1]，可以由两个状态推导而来:</li><li>第i - 1天也不持有股票，维持原状，即dp[i - 1][1]</li><li>第i天卖出股票，那第i - 天就持有股票，将持有股票的价值和第i天卖出的价值相加，即dp[i - 1][0] + prices[i]<br>综上：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], -prices[i]);</span><br><span class="line">dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>dp数组初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];<span class="comment">//第0天持有股票</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//第0天不持有股票</span></span><br></pre></td></tr></table></figure></li><li><p>确定遍历顺序<br>由状态转移方程可知dp[i]由dp[i - 1]推导而来，所以从前往后遍历。</p></li><li><p>打印dp数组<br><img src="https://www.zer02.fun/img/blogpng/dp_16.webp" alt="分类情况"></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组版</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], -prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[len - <span class="number">1</span>][<span class="number">0</span>], dp[len - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空间优化版</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> prices[<span class="number">0</span>], max = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 第一种情况：最大收益不在最后一天产出，那么就在前i-1天中的某一天</span></span><br><span class="line">        <span class="comment">// 第二种情况：最大收益在组后一天产出，记录前i-1天买入最小值求差值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            max = Math.max(max, prices[i] - min);<span class="comment">//max:前i天的最大收益 prices[i] - min：第i天的收益减去前i-1天买入的最小值</span></span><br><span class="line">            min = Math.min(min, prices[i]);<span class="comment">//实时更新买入最小值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-122-买卖股票的最佳时机-II"><a href="#LeetCode-122-买卖股票的最佳时机-II" class="headerlink" title="LeetCode 122. 买卖股票的最佳时机 II"></a>LeetCode 122. 买卖股票的最佳时机 II</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">LeetCode题目链接</a><br><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a>只能购买一支股票，且不能在同一天卖出。<br>而本题可以买卖多支股票，且可以在同一天卖出，但在任何时候最多只能持有一支股票。<br>上一题持有股票状态下的递推公式为：<code>dp[i][0] = Math.max(dp[i - 1][0], -prices[i]);</code><br>而本题可以购买两次，所以需要对其做一个微小的改动：<code>dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] - prices[i]);</code><br><strong>dp[i - 1][1] - prices[i]： 如果在第i天买入，那第i - i天就没有持有。</strong><br>剩余部分照搬就好：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二位数组版本</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[len - <span class="number">1</span>][<span class="number">0</span>], dp[len - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在评论区看到的脑筋急转弯版本</span></span><br><span class="line"><span class="comment">//扫描一遍 只要后一天比前一天大 就把这两天的差值加一下</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= prices.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &gt; prices[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                ans += prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LeetCode-123-买卖股票的最佳时机-III"><a href="#LeetCode-123-买卖股票的最佳时机-III" class="headerlink" title="LeetCode 123. 买卖股票的最佳时机 III"></a>LeetCode 123. 买卖股票的最佳时机 III</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/">LeetCode题目链接</a><br>本题较之前的限制有最多可以完成<strong>两笔</strong>交易，且必须在再次购买前出售掉之前的股票。<br>我们之前定义了两种状态来表示买卖一次的状态，那现在可以买卖两次，我们只需要在原来的情况上再叠加一次就好：<br><code>dp[i][0] = dp[i - 1][0]</code>: 什么都没做，维持原来状态<br><code>dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i])</code>: 第一次持有<br><code>dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1] + prices[i])</code>: 第一次卖出<br><code>dp[i][3] = Math.max(dp[i - 1][3], dp[i - 1][2] - prices[i])</code>: 第二次持有<br><code>dp[i][4] = Math.max(dp[i - 1][4], dp[i - 1][3] + prices[i])</code>: 第二次卖出<br>同时我们也要初始化四个值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">5</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//不操作</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];<span class="comment">//第一次持有</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;<span class="comment">//第一次卖出</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">3</span>] = -prices[<span class="number">0</span>];<span class="comment">//第二次持有</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">4</span>] = <span class="number">0</span>;<span class="comment">//第二次卖出</span></span><br></pre></td></tr></table></figure><ul><li>完整代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组版本</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">5</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//不操作</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];<span class="comment">//第一次持有</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;<span class="comment">//第一次卖出</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">3</span>] = -prices[<span class="number">0</span>];<span class="comment">//第二次持有</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">4</span>] = <span class="number">0</span>;<span class="comment">//第二次卖出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">2</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">3</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">3</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">4</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">4</span>], dp[i - <span class="number">1</span>][<span class="number">3</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//空间优化版本</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="comment">// 存储两次交易的状态就行了</span></span><br><span class="line">        <span class="comment">// dp[0]代表第一次交易的买入</span></span><br><span class="line">        dp[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// dp[1]代表第一次交易的卖出</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// dp[2]代表第二次交易的买入</span></span><br><span class="line">        dp[<span class="number">2</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// dp[3]代表第二次交易的卖出</span></span><br><span class="line">        dp[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= prices.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 要么保持不变，要么没有就买，有了就卖</span></span><br><span class="line">            dp[<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>], -prices[i - <span class="number">1</span>]);</span><br><span class="line">            dp[<span class="number">1</span>] = Math.max(dp[<span class="number">1</span>], dp[<span class="number">0</span>] + prices[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 这已经是第二次交易了，所以得加上前一次交易卖出去的收获</span></span><br><span class="line">            dp[<span class="number">2</span>] = Math.max(dp[<span class="number">2</span>], dp[<span class="number">1</span>] - prices[i - <span class="number">1</span>]);</span><br><span class="line">            dp[<span class="number">3</span>] = Math.max(dp[<span class="number">3</span>], dp[<span class="number">2</span>] + prices[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-188-买卖股票的最佳时机-IV"><a href="#LeetCode-188-买卖股票的最佳时机-IV" class="headerlink" title="LeetCode 188. 买卖股票的最佳时机 IV"></a>LeetCode 188. 买卖股票的最佳时机 IV</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/">LeetCode题目链接</a><br>与上一题唯一不同的点是<strong>股票可以买卖k次</strong><br>我们知道，一次交易需要记录两种状态(持有&#x2F;不持有)，那么交易k次就要记录2k种状态，同时我们发现，<strong>在初始化时只有dp[i][#] #为基数是才初始为-prices[i]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组版</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span> || prices.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">2</span> * k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">2</span> * k; i += <span class="number">2</span>) &#123;<span class="comment">//初始化奇数下标的值</span></span><br><span class="line">            dp[<span class="number">0</span>][i] = -prices[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span> * k; j += <span class="number">2</span>) &#123;</span><br><span class="line">                dp[i][j + <span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][j + <span class="number">1</span>], dp[i - <span class="number">1</span>][j] - prices[i]);<span class="comment">//持有</span></span><br><span class="line">                dp[i][j + <span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][j + <span class="number">2</span>], dp[i - <span class="number">1</span>][j + <span class="number">1</span>] + prices[i]);<span class="comment">//卖出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">2</span> * k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//空间优化版</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其实就是123题的扩展，123题只用记录2次交易的状态</span></span><br><span class="line">        <span class="comment">// 这里记录k次交易的状态就行了</span></span><br><span class="line">        <span class="comment">// 每次交易都有买入，卖出两个状态，所以要乘 2</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span> * k];</span><br><span class="line">        <span class="comment">// 按123题解题格式那样，做一个初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length / <span class="number">2</span>; i++)&#123;</span><br><span class="line">            dp[i * <span class="number">2</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= prices.length; i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>], -prices[i - <span class="number">1</span>]);</span><br><span class="line">            dp[<span class="number">1</span>] = Math.max(dp[<span class="number">1</span>], dp[<span class="number">0</span>] + prices[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 还是与123题一样，与123题对照来看</span></span><br><span class="line">            <span class="comment">// 就很容易啦</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt; dp.length; j += <span class="number">2</span>)&#123;</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - <span class="number">1</span>] - prices[i-<span class="number">1</span>]);</span><br><span class="line">                dp[j + <span class="number">1</span>] = Math.max(dp[j + <span class="number">1</span>], dp[j] + prices[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回最后一次交易卖出状态的结果就行了</span></span><br><span class="line">        <span class="keyword">return</span> dp[dp.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记之动态规划(二)</title>
      <link href="/2023/03/20/dynamicProgramming-ii/"/>
      <url>/2023/03/20/dynamicProgramming-ii/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://www.zer02.fun/2023/03/19/dynamicProgramming/">动态规划(一)</a>中我已经列出了动态规划五部曲，这里不再赘述，本篇博客主要总结动态规划中的背包问腿。</p><h2 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h2><h3 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h3><p>有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。<strong>每件物品只能用一次</strong>，求解将哪些物品装入背包里物品价值总和最大。<br>举个简单的例子：<br>背包的最大重量为4。<br>物品为：</p><table><thead><tr><th align="center">物品</th><th align="center">重量</th><th align="center">价值</th></tr></thead><tbody><tr><td align="center">物品0</td><td align="center">1</td><td align="center">15</td></tr><tr><td align="center">物品1</td><td align="center">3</td><td align="center">20</td></tr><tr><td align="center">物品2</td><td align="center">4</td><td align="center">30</td></tr></tbody></table><p>问背包能背的物品最大价值是多少？</p><h3 id="二维dp数组01背包"><a href="#二维dp数组01背包" class="headerlink" title="二维dp数组01背包"></a>二维dp数组01背包</h3><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>do[i][j]: 从下标为[0-i]的物品中任取，放进容量为j的背包，价值总和为dp[i][j]</p></li><li><p>确定递推公式<br>两种情况：<br>1.<strong>不放物品i</strong>：<code>dp[i][j] = dp[i - 1][j];</code><br>由上式推出，背包容量为j，不放物品i的价值就是dp[i - 1][j]<br>2.<strong>放入物品i</strong>： <code>dp[i][j] = dp[i - 1][j - weight[i]] + value[i];</code><br>与不放物品i不同的是，此时背包容量已经减去了物品i的重量，即<code>j - weight[i]</code>，那当然要把物品i的价值<code>value[i]</code>加上，别忘了dp[i][j]的含义始终是<strong>价值</strong>。<br>所以递推公式：<br><code>dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</code></p></li><li><p>dp数组初始化<br>从对dp[i][j]的定义出发，如果背包容量j为0，即dp[i][0]，无论取多少物品，背包价值一定为0，如图：<br><img src="https://www.zer02.fun/img/blogpng/dp_04.webp" alt="dp数组结果"></p></li></ul><p>由状态转移方程可知，i由i - 1推导而来，所以i &#x3D; 0的时候一要初始化。<br>当只放入物品0，即dp[0][j]：<br>如果j &lt; weight[i]，即背包容量小于物品0重量时，dp[0][j] &#x3D; 0;<br>如果j &gt;&#x3D; weight[i]，那么dp[0][j] &#x3D; value[0],如图：<br><img src="https://www.zer02.fun/img/blogpng/dp_05.webp" alt="dp数组结果"><br>初始化代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> weight[<span class="number">0</span>]; j &lt;= bagweight; j++) &#123;</span><br><span class="line">    dp[<span class="number">0</span>][j] = value[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>那其他位置需要初始化吗？</em><br>其实不用，从状态转移方程可以看出:dp[i][j]是由其左上方数值推导而来，就算初始化了也会被覆盖，为了方便初始化为0即可。</p><ul><li><p>确定遍历顺序<br>显然背包问题有两个维度，物品和背包重量。那么该先遍历物品还是先遍历背包呢？<br>如果采用二维数组，先遍历物品还是先遍历背包都是可行的。因为dp[i][j]都是由其左上方(包括正上方)得来，就算颠倒顺序，也不会印象dp数组的推导。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先遍历物品</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; weight.length; i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= bagweight; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        <span class="keyword">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先遍历背包</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= bagweight; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; weight.length; i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">        <span class="keyword">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br><img src="https://www.zer02.fun/img/blogpng/dp_06.webp" alt="dp数组结果"><br>要求的结果为**dp[2][4]**。</p></li></ul><h3 id="一维dp数组01背包"><a href="#一维dp数组01背包" class="headerlink" title="一维dp数组01背包"></a>一维dp数组01背包</h3><p>在使用二维数组时，递推公式为：<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</code><br>如果把dp[i - 1]拷贝到dp[i]上，上式可变为：<code>dp[i][j] = Math.max(dp[i][j], dp[i][j - weight[i]] + value[i]);</code><br>既然dp[i]可以原封不动的拷贝下来，那不如直接舍弃dp[i]，用个一维数数组:<br><code>dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</code></p><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[j]: 容量为j的背包，所装的最大价值为dp[j]</p></li><li><p>确定递推公式<br>两种情况：<br>1.<strong>不放物品i</strong>：<code>dp[j] = dp[j];</code><br>即二维数组中的<code>dp[i][j] = dp[i - 1][j];</code><br>2.<strong>放入物品i</strong>：<code>dp[j] = dp[j - weight[i]] + value[i];</code><br>即二维数组中的：<code>dp[i][j] = [i - 1][j - weight[i]] + value[i];</code><br>所以递推公式：<br><code>dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</code></p></li><li><p>dp数组初始化<br>首先是dp[0],容量为0的背包能装下物品的最大价值当然是0。那么非0下标如何初始化呢？<br>从递推公式可以看出，dp[j]每次都要在dp[j]与dp[j - weight[i]] + value[i]取最大值，如果给非0下标定义一个比较大的值，就有可能覆盖掉正确的值，那索性就初始化为0即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>确定遍历顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; weight.size(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> bagWeight; j &gt;= weight[i]; j--) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们发现遍历背包时是倒序遍历，这样做是<strong>为了保证物品i只被放入一次</strong>。</p><table><thead><tr><th align="center">物品</th><th align="center">重量</th><th align="center">价值</th></tr></thead><tbody><tr><td align="center">物品0</td><td align="center">1</td><td align="center">15</td></tr><tr><td align="center">物品1</td><td align="center">3</td><td align="center">20</td></tr><tr><td align="center">物品2</td><td align="center">4</td><td align="center">30</td></tr></tbody></table></li></ul><p>举个例子，如果正序遍历：<br>dp[1] &#x3D; dp[1 - weight[0]] + value[0] &#x3D; 15;<br>dp[2] &#x3D; dp[2 - weight[1]] + value[1] &#x3D; 30;<br>dp[2] &#x3D; 30意味着物品0被放入了两次。<br>再来看看倒序遍历:<br>dp[2] &#x3D; dp[2 - weight[1]] + value[1] &#x3D; 20;<br>dp[1] &#x3D; dp[1 - weight[0]] + value[0] &#x3D; 15;</p><p><em>那能不能像二维数组那样随意颠倒背包和物品的遍历顺序呢？</em><br>不能！如果先遍历背包，再遍历物品，每个背包就只会放入一个物品。</p><ul><li>打印dp数组<br><img src="https://www.zer02.fun/img/blogpng/dp_07.webp" alt="dp数组结果"><br>要求的结果为**dp[4]**。</li></ul><p><strong>理论说完了，下面进入实战环节！</strong></p><h3 id="LeetCode-416-分割等和子集"><a href="#LeetCode-416-分割等和子集" class="headerlink" title="LeetCode 416. 分割等和子集"></a>LeetCode 416. 分割等和子集</h3><p><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">LeetCode题目链接</a><br>在做题之前有几个需要注意的点：</p><ul><li>背包的体积为 sum &#x2F; 2</li><li>背包要放入的商品（集合里的元素）重量为元素的数值，价值也为元素的数值</li><li>背包如果装满就说明找到了和为 sum &#x2F; 2 的子集</li><li>背包中每一个元素不可重复放入</li></ul><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[j]: 容量为j的背包，能放入元素的和的最大值为dp[j]</p></li><li><p>确定递推公式<br>因为本题物品的价值和重量皆为nums[i],即：<br><code>dp[j] = Math.max(dp[j], dp[j - nums[j]] + nums[j]);</code></p></li><li><p>dp数组初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//容量为0的背包，能放入元素的和的最大值为0</span></span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>至于dp[1]为什么等于1，我在前面的<strong>一维数组01背包</strong>里已经详细解释过。</p></li><li><p>确定遍历顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++)&#123;<span class="comment">//物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= nums[i]; j--)&#123;<span class="comment">//背包</span></span><br><span class="line">        dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br>nums &#x3D; [1,5,11,5]，结果为：<br><code>0 1 1 1 1 5 6 6 6 6 10 11</code></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//总和为奇数，不能平分</span></span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;<span class="comment">//物品</span></span><br><span class="line">            <span class="comment">//当j &lt; nums[i]，即背包容量小于物品重量时就不需要再遍历了</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= nums[i]; j--) &#123;<span class="comment">//背包</span></span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target] == target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-1049-最后一块石头的重量-II"><a href="#LeetCode-1049-最后一块石头的重量-II" class="headerlink" title="LeetCode 1049. 最后一块石头的重量 II"></a>LeetCode 1049. 最后一块石头的重量 II</h3><p><a href="https://leetcode.cn/problems/last-stone-weight-ii/">LeetCode题目链接</a><br>在<a href="https://leetcode.cn/problems/partition-equal-subset-sum/">416. 分割等和子集</a>中，只有将集合内元素<strong>完全平分</strong>才返回true,而本题是要将两堆石头尽可能平分，使其<strong>重量和最小</strong>，这就可以转化为一个01背包问题。</p><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[j]: 容量为j的背包，可以背的最大重量为dp[j]</p></li><li><p>确定递推公式<br>石头的重量和价值都可以表示为stones[i],即：<br><code>dp[j] = Math.max(dp[j], dp[j - stones[i]] + stones[i]);</code></p></li><li><p>dp数组初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//容量为0的背包，可以背的最大重量为0</span></span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>确定遍历顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stones.length; i++)&#123;</span><br><span class="line">    <span class="comment">//当j &lt; stones[i]，即背包容量小于物品重量时就不需要再遍历了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= stones[i]; j--)&#123;</span><br><span class="line">        dp[j] = Math.max(dp[j], dp[j - stones[i]] + stones[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br><img src="https://www.zer02.fun/img/blogpng/dp_08.webp" alt="dp数组结果"><br>dp[3]就是dp[target]，即一堆石头的重量，而就是另一堆sum - dp[target]，由于<strong>sum &#x2F; 2是向下取整的</strong>，则有sum - dp[target] &gt;&#x3D; dp[target]，要求得两堆石头的重量差，用sum - dp[target] - dp[target]即可。</p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : stones) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注意这里可能向下取整</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stones.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= stones[i]; j--) &#123;</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - stones[i]] + stones[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//dp[target]为一堆石头的最大重量，另一堆是sum - dp[target]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> (sum - dp[target]) - dp[target];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-494-目标和"><a href="#LeetCode-494-目标和" class="headerlink" title="LeetCode 494. 目标和"></a>LeetCode 494. 目标和</h3><p><a href="https://leetcode.cn/problems/target-sum/">LeetCode题目链接</a></p><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[j]: 装满容量为j的背包，有dp[j]种方法</p></li><li><p>确定递推公式<br>如果把正数记为集合P，负数记为集合Q，有：<br>sum(P) - sum(Q) &#x3D; target<br>sum(P) + sum(Q) &#x3D; sum(SUM)<br>sum(P) &#x3D; (sum + target) &#x2F; 2;<br>也就是说，我们只需要找到有多少种方法可以从数组中选出若干个元素使得它们的和等于(target + sum(nums)) &#x2F; 2即可。这就变成了一个经典的01背包问题。<br>则状态转移方程为：<code>dp[j] += dp[j - nums[i]];</code><br><em>为什么是dp[j] + dp[j - nums[i]]而不是取最大值？</em><br>依然分两种情况：</p></li><li><p>不放物品i： 原来已经有多少种方案数就不变</p></li><li><p>放入物品i： 剩下要组成和为j - nums[i] 的方案数就等于dp[j - nums[i]]<br>两种情况相加才是总的方案数。</p></li><li><p>dp数组初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>如果让dp[0] &#x3D; 0，那么后面的结果都是0！</strong></p></li><li><p>确定遍历顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> pNum; j &gt;= nums[i]; j--)&#123;</span><br><span class="line">        dp[j] += dp[j - nums[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br><img src="https://www.zer02.fun/img/blogpng/dp_09.webp" alt="dp数组结果"></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        正数记为P,负数记为Q，有：</span></span><br><span class="line"><span class="comment">        sum(P) - sum(Q) = target</span></span><br><span class="line"><span class="comment">        sum(P) + sum(Q) = sum(SUM)</span></span><br><span class="line"><span class="comment">        sum(P) = (sum + target) / 2;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果target过大 sum将无法满足</span></span><br><span class="line">        <span class="keyword">if</span> (target &lt;= <span class="number">0</span> &amp;&amp; sum &lt; -target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果target + sum不是偶数，也无法满足</span></span><br><span class="line">        <span class="keyword">if</span> ((target + sum) % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//正数P</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pNum</span> <span class="operator">=</span> (sum + target) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[pNum + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> pNum; j &gt;= nums[i]; j--) &#123;</span><br><span class="line">                dp[j] += dp[j - nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[pNum];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-474-一和零"><a href="#LeetCode-474-一和零" class="headerlink" title="LeetCode 474. 一和零"></a>LeetCode 474. 一和零</h3><p><a href="https://leetcode.cn/problems/ones-and-zeroes/">LeetCode题目链接</a></p><p>这道题的种strs数组里的元素就是物品，每个物品只有一个，而m和n为背包，所以应该定义一个<strong>二维数组</strong>用来对应m和n两个维度。</p><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[i][j]: 最多有i个0和j个1的strs的最大子集为dp[i][j]</p></li><li><p>确定递推公式<br>对应01背包的递推公式：<code>dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);</code><br>我们定义字符串中为0的字符为zeroNum,为1的定义为oneNum,则递推公式为：<br><code>dp[i][j] = Math.max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);</code><br>式中zeroNum和oneNum为物品的重量，而字符本身的个数为物品的价值。</p></li><li><p>dp数组初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>确定遍历顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &gt;= zeroNum; i--)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n; j &gt;= oneNum; j--)&#123;</span><br><span class="line">        dp[i][j] = Math.max(dp[i][j], dp[i - zeroNum][j - oneNum] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了得到zeroNum和oneNum的数量，我们还需要在每次循环前进行统计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String str : strs)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">zeroNum</span> <span class="operator">=</span> <span class="number">0</span>, oneNum = <span class="number">0</span>;<span class="comment">//统计一个字符串中0和1的数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; str.length(); k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(k) == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            zeroNum++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            oneNum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &gt;= zeroNum; i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n; j &gt;= oneNum; j--)&#123;</span><br><span class="line">            dp[i][j] = Math.max(dp[i][j], dp[i - zeroNum][j - oneNum] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br><img src="https://www.zer02.fun/img/blogpng/dp_10.webp" alt="dp数组结果"></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxForm</span><span class="params">(String[] strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">zeroNum</span> <span class="operator">=</span> <span class="number">0</span>, oneNum = <span class="number">0</span>;<span class="comment">//统计一个字符串中0和1的数量</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; str.length(); k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str.charAt(k) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                    zeroNum++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    oneNum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &gt;= zeroNum; i--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n; j &gt;= oneNum; j--) &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[i - zeroNum][j - oneNum] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>完全背包与0-1背包的唯一区别就是：<strong>每个物品可以取无限次。</strong><br>在前面的一维数组0-1背包理论中我强调遍历顺序为<strong>先遍历物品再遍历背包，且遍历背包为倒序</strong>，这样做是<strong>为了保证物品i只被放入一次</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```java</span><br><span class="line">    <span class="title function_">for</span><span class="params">(<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.size()</span>; i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> bagWeight; j &gt;= weight[i]; j--) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在完全背包中，物品和背包的遍历顺序是可以调换的，且要把背包遍历变为正序，<strong>保证一个物品可以取无限次，直到背包装满</strong>。<br>但在有些题目中，先遍历物品再遍历背包是求组合数，先遍历背包再遍历物品是求排列数。这个我会在具体题目中详细分析。</p><h3 id="LeetCode-518-零钱兑换-II"><a href="#LeetCode-518-零钱兑换-II" class="headerlink" title="LeetCode 518. 零钱兑换 II"></a>LeetCode 518. 零钱兑换 II</h3><p><a href="https://leetcode.cn/problems/coin-change-ii/">LeetCode题目链接</a></p><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[j]: 凑成总金额为j的硬币组合为dp[j]</p></li><li><p>确定递推公式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[j] += dp[j - coins[i]];</span><br></pre></td></tr></table></figure><p>与<a href="https://leetcode.cn/problems/target-sum/">494. 目标和</a>一样，求装满背包有几种方法，统一都为这个公式。</p></li><li><p>dp数组初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这里dp[0]一定要定义为1,如果定义为0，那么后面将全为0。<br>如果从我们对dp数组的定义考虑，凑成总金额为0的硬币组合为1，也可以说凑成总金额为0的硬币组合为0，但题目描述中coins[i] &gt;&#x3D; 1，也就是说不会有硬币为0的情况，这里不必过多纠结，dp[0] &#x3D; 1 仅仅是为了dp数组方便运算。</p></li><li><p>确定遍历顺序<br>对本题来说求的是组合数而不是排列数，以示例 1举例：<br>amount &#x3D; 5, coins &#x3D; [1, 2, 5]<br>[1,2,2]和[2,2,1]是相同的组合数，论排列数来说它们是不同的。<br>先来看先遍历物品，再遍历背包的情况:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; coins.size(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> coins[i]; j &lt;= amount; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        dp[j] += dp[j - coins[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>coins[0] &#x3D; 1, coins[1] &#x3D; 2;那么组合中只有[1,2],而不会出现[2,1]。<br>再来看先遍历背包，再遍历物品：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= amount; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; coins.size(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">        <span class="keyword">if</span> (j - coins[i] &gt;= <span class="number">0</span>) dp[j] += dp[j - coins[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>背包会依次装进coins[0]和coins[1]，即会出现[1,2]和[2,1]两种情况！<strong>这里的dp[j]算出来的就是排列数。</strong></p></li></ul><p>再说的通俗一点，先遍历物品，再遍历背包相当于把物品0全部遍历完后，不会再得到含有物品0的结果，因为此时已经开始遍历物品2。<br>而先遍历背包，再遍历物品相当于每当背包容量变大一次，就会把所有小于等于背包容量的物品再放入背包。</p><ul><li><p>打印dp数组<br><img src="https://www.zer02.fun/img/blogpng/dp_11.webp" alt="dp数组结果"></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> amount, <span class="type">int</span>[] coins)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (coins.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (amount % <span class="number">2</span> != <span class="number">0</span> &amp;&amp; coins[<span class="number">0</span>] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//求组合数先遍历物品再遍历背包</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; coins.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> coins[i]; j &lt;= amount; j++) &#123;</span><br><span class="line">                dp[j] += dp[j - coins[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-377-组合总和-Ⅳ"><a href="#LeetCode-377-组合总和-Ⅳ" class="headerlink" title="LeetCode 377. 组合总和 Ⅳ"></a>LeetCode 377. 组合总和 Ⅳ</h3><p><a href="https://leetcode.cn/problems/combination-sum-iv/">LeetCode题目链接</a><br>本题与<a href="https://leetcode.cn/problems/coin-change-ii/">518. 零钱兑换 II</a>唯一的不同是求排列数，除了遍历顺序颠倒其他代码原封不动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//先物品再背包-组合数</span></span><br><span class="line">    <span class="comment">//先背包再物品-排列数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">combinationSum4</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[<span class="number">0</span>] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= target; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= nums[i]) &#123;<span class="comment">//背包容量大于物品重量才加</span></span><br><span class="line">                    dp[j] += dp[j - nums[i]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LeetCode-322-零钱兑换"><a href="#LeetCode-322-零钱兑换" class="headerlink" title="LeetCode 322. 零钱兑换"></a>LeetCode 322. 零钱兑换</h3><p><a href="https://leetcode.cn/problems/coin-change/">LeetCode题目链接</a><br><a href="https://leetcode.cn/problems/coin-change-ii/">518. 零钱兑换 II</a>是求有多少种方法能凑成价值为amount的货币，而本题求的是凑成价值amount最少需要多少个硬币。<br>coins &#x3D; [1, 2, 5], amount &#x3D; 11<br>[1,1,5]和[5,1,1]都可以凑成11，但我们求的不是排列或组合，而是数量！所以本题为<strong>纯背包问题</strong>，即物品和背包的遍历先后顺序可以调换。</p><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[j]: 凑成价值为j最少硬币数量为dp[j]</p></li><li><p>确定递推公式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[j] = Math.min(dp[j], dp[j - coins[i]] + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>两种情况：<br>不放物品i:  数量就是dp[j]<br>放入物品i： 背包容量要先减去它的重量j - coins[i],再加1记为放入了一个硬币，即dp[j - coins[i]] + 1</p></li><li><p>dp数组初始化<br>首先dp[0] &#x3D; 0(凑成价值为0最少硬币数量为0),非0下标如何初始化呢？<br>从递推公式可以看出，我们要求最小值，为了不让我们初始化的值覆盖真实值，将它们全部初始化成最大值即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++)&#123;<span class="comment">//非0下标全初始化为最大值</span></span><br><span class="line">    dp[i] = max;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>确定遍历顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先遍历背包还是物品无所谓</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; coins.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> coins[i]; j &lt;= amount; j++)&#123;</span><br><span class="line">        <span class="comment">//只有dp[j-coins[i]]不是初始最大值时，该位才有选择的必要</span></span><br><span class="line">        <span class="keyword">if</span>(dp[j - coins[i]] != max)&#123;</span><br><span class="line">            dp[j] = Math.min(dp[j], dp[j - coins[i]] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br>coins &#x3D; [1, 2, 5], amount &#x3D; 11,结果为：<br><code>0 1 1 2 2 1</code></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            dp[i] = max;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; coins.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> coins[i]; j &lt;= amount; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[j - coins[i]] != max) &#123;</span><br><span class="line">                    dp[j] = Math.min(dp[j], dp[j - coins[i]] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount] == max ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-279-完全平方数"><a href="#LeetCode-279-完全平方数" class="headerlink" title="LeetCode 279. 完全平方数"></a>LeetCode 279. 完全平方数</h3><p><a href="https://leetcode.cn/problems/perfect-squares/">LeetCode题目链接</a><br>与<a href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换</a>一样是求<strong>最少数量</strong>，做题步骤也大致相同，直接上代码！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSquares</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            dp[i] = max;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//i * i 代表平方数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i * i; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[j - i * i] != max) &#123;</span><br><span class="line">                    dp[j] = Math.min(dp[j], dp[j - i * i] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LeetCode-139-单词拆分"><a href="#LeetCode-139-单词拆分" class="headerlink" title="LeetCode 139. 单词拆分"></a>LeetCode 139. 单词拆分</h3><p><a href="https://leetcode.cn/problems/word-break/">LeetCode题目链接</a><br>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[i]: 能否在字典中找到组成长度为i的单词</p></li><li><p>确定递推公式<br>如果dp[j]为true,且在[j,i]这个区间里的字串出现在字典中，那么dp[i]就为true.(j &lt; i)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(set.contains(s.substring(j, i)) &amp;&amp; dp[j])&#123;</span><br><span class="line">    dp[i] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dp数组初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>提示中有<strong>1 &lt;&#x3D; s.length &lt;&#x3D; 300</strong>，所以本来dp[0]就无意义，这里只是为了后续计算。</p></li><li><p>确定遍历顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先遍历背包还是物品无所谓</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s.length(); i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i &amp;&amp; !dp[i]; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(s.substring(j, i)) &amp;&amp; dp[j])&#123;</span><br><span class="line">            dp[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br>s &#x3D; “leetcode”, wordDict &#x3D; [“leet”, “code”],结果为：<br><code>1 0 0 0 1 0 0 0 1</code></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>(wordDict);</span><br><span class="line">        <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i &amp;&amp; !dp[i]; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (set.contains(s.substring(j, i)) &amp;&amp; dp[j]) &#123;</span><br><span class="line">                    dp[i] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记之动态规划(一)</title>
      <link href="/2023/03/19/dynamicProgramming/"/>
      <url>/2023/03/19/dynamicProgramming/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划五部曲"><a href="#动态规划五部曲" class="headerlink" title="动态规划五部曲"></a>动态规划五部曲</h2><ul><li>以<strong>LeetCode 509. 斐波那契数</strong>为例：</li></ul><h3 id="确定dp数组以及下标的含义"><a href="#确定dp数组以及下标的含义" class="headerlink" title="确定dp数组以及下标的含义"></a>确定dp数组以及下标的含义</h3><p>dp[i]: 第i个数的斐波那契数是dp[i]</p><h3 id="确定递推公式"><a href="#确定递推公式" class="headerlink" title="确定递推公式"></a>确定递推公式</h3><p>斐波那契数列的特点就是后一个数的值等于前两个数相加,所以不难推出：<br><code>dp[i] = dp[i - 1] + dp[i - 2];</code></p><h3 id="dp数组初始化"><a href="#dp数组初始化" class="headerlink" title="dp数组初始化"></a>dp数组初始化</h3><p>这一步和<strong>确定dp数组以及下标的含义</strong>，翻译即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//第0个数的斐波那契数是0</span></span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//第1个数的斐波那契数是1</span></span><br></pre></td></tr></table></figure><h3 id="确定遍历顺序"><a href="#确定遍历顺序" class="headerlink" title="确定遍历顺序"></a>确定遍历顺序</h3><p>由于斐波那契数的后一个数是由前两个数相加而来，故应该从前往后遍历<br>而且由状态转移式 <code>dp[i] = dp[i - 1] + dp[i - 2];</code> 可以看出，dp[i]依赖 dp[i - 1] 和 dp[i - 2]</p><h3 id="打印dp数组"><a href="#打印dp数组" class="headerlink" title="打印dp数组"></a>打印dp数组</h3><p>当i &#x3D; 10 时，dp数组的结果应该是：<br><code>0 1 1 2 3 5 8 13 21 34 55</code><br>如果出现结果不符合预期的情况，就要检查<strong>递推公式</strong>或<strong>遍历顺序</strong>是否符合逻辑。</p><ul><li>完整代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//因为只需要记录最终结果，可以把dp数组优化成一个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp = f1 + f2;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = dp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><h3 id="LeetCode-509-斐波那契数"><a href="#LeetCode-509-斐波那契数" class="headerlink" title="LeetCode 509. 斐波那契数"></a>LeetCode 509. 斐波那契数</h3><p><a href="https://leetcode.cn/problems/fibonacci-number/">LeetCode题目链接</a></p><h3 id="LeetCode-70-爬楼梯"><a href="#LeetCode-70-爬楼梯" class="headerlink" title="LeetCode 70. 爬楼梯"></a>LeetCode 70. 爬楼梯</h3><p><a href="https://leetcode.cn/problems/climbing-stairs/">LeetCode题目链接</a><br>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[i]: 爬到第 i 层有 dp[i] 种方法</p></li><li><p>确定递推公式<br>以 i &#x3D; 3 为例，有三种情况：<br>1.一次只爬一层，爬三次上来；<br>2.先爬一层，再爬两层上来；<br>3.先爬两层，再爬一层上来；<br>第二种和第三种情况没有本质上的区别，只是先后顺序不同。不难推出：<br><code>dp[i] = dp[i - 1] + dp[i - 2]</code></p></li><li><p>dp数组初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//爬到第 1 层有 1 种方法</span></span><br><span class="line">dp[<span class="number">2</span>] = <span class="number">2</span>;<span class="comment">//爬到第 2 层有 2 种方法</span></span><br></pre></td></tr></table></figure><p><em>为什么不初始化dp[0]?</em><br>1.题目提示 1 &lt;&#x3D; n &lt;&#x3D; 45 ，定义dp[0]本就没有意义。<br>2.有歧义，我直接站着不动到达顶层也可以算一种方法，但按照我给dp数组的定义又是0种方法。</p></li><li><p>确定遍历顺序<br>显然我不能倒着爬，这不符合常理，且由递推公式可知，本题是从前往后遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br>当i &#x3D; 10 时，dp数组的结果应该是：<br><code>0 1 1 2 3 5 8 13 21 34 55</code><br>其实这就是斐波那契数列。</p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-746-使用最小花费爬楼梯"><a href="#LeetCode-746-使用最小花费爬楼梯" class="headerlink" title="LeetCode 746. 使用最小花费爬楼梯"></a>LeetCode 746. 使用最小花费爬楼梯</h3><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">LeetCode题目链接</a></p><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[i] : 爬到第 i 层 的最小花费为 dp[i]</p></li><li><p>确定递推公式<br>要到达第 i 层，要么爬 i - 1层往上爬，要么从i - 2层往上爬，其实本题与<a href="https://leetcode.cn/problems/fibonacci-number/">509. 斐波那契数</a>和<a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a>很像，唯一的区别在于它多了**每向上爬一层或两层的花费cost[i]**，而我们对dp数组的定义又是爬到第 i 层 的最小花费为 dp[i]，所以不要忘了把每次向上爬的cost[i]加上再从中取最小值：<br><code>dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);</code></p></li><li><p>dp数组初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：站在第0或第1层并不花费，只有向上爬的操作才更新费用</span></span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//爬到第 0 层 的最小花费为 0;</span></span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//爬到第 1 层 的最小花费为 0;</span></span><br></pre></td></tr></table></figure></li><li><p>确定遍历顺序<br>因为是模拟台阶，而且递推公式dp[i]是由dp[i - 1]和dp[i - 2]推出，所以是从前往后遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= cost.length; i++)&#123;</span><br><span class="line">    dp[i] = Math.min(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br><code>cost = [1,100,1,1,1,100,1,1,100,1]</code>,结果为：<br><code>1 2 2 3 3 4 4 5 6</code></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//dp[i]:走到i的位置花费的米</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[cost.length + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//到达0和1的位置不花费</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= cost.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.min(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]);</span><br><span class="line">            System.out.println(dp[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[cost.length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-62-不同路径"><a href="#LeetCode-62-不同路径" class="headerlink" title="LeetCode 62. 不同路径"></a>LeetCode 62. 不同路径</h3><p><a href="https://leetcode.cn/problems/unique-paths/">LeetCode题目链接</a></p><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[i][j]: 走到坐标为 (i, j) 的位置共有dp[i][j]种路径</p></li><li><p>确定递推公式<br>要走到 (i, j)，要么从(i - 1, j)向右走一步，要么从(i, j - 1)向下走一步，即：<br><code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1];</code></p></li><li><p>dp数组初始化<br>因为从起点一直向右走和一直向下走的路径都只有一条，所以把第一行和第一列都初始化为1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>确定遍历顺序<br>由递推公式易得，dp[i][j]都是从其上方和左方得来，所以应该从左至右、从上至下遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;n; j++)&#123;</span><br><span class="line">        dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br><img src="https://www.zer02.fun/img/blogpng/dp_01.webp" alt="dp数组结果"></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-63-不同路径-II"><a href="#LeetCode-63-不同路径-II" class="headerlink" title="LeetCode 63. 不同路径 II"></a>LeetCode 63. 不同路径 II</h3><p><a href="https://leetcode.cn/problems/unique-paths-ii/">LeetCode题目链接</a><br>本题与<a href="https://leetcode.cn/problems/unique-paths/">62. 不同路径</a>唯一的区别是增加了障碍物，假设走到了(i, j)的位置遇到了障碍，那此处就有 0 种路径可走，写成代码就是<code>dp[i][j] = 0</code>。我们只需要处理初始化时遇到障碍的情况即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化第一行和第一列的时候有障碍直接退出了，走不到</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class="number">0</span>] != <span class="number">1</span>; i++)&#123;</span><br><span class="line">    dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n &amp;&amp; obstacleGrid[<span class="number">0</span>][j] != <span class="number">1</span>; j++)&#123;</span><br><span class="line">    dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其余代码都与<a href="https://leetcode.cn/problems/unique-paths/">62. 不同路径</a>一样。</p><h3 id="LeetCode-343-整数拆分"><a href="#LeetCode-343-整数拆分" class="headerlink" title="LeetCode 343. 整数拆分"></a>LeetCode 343. 整数拆分</h3><p><a href="https://leetcode.cn/problems/integer-break/">LeetCode题目链接</a></p><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[i]: 将 i 个数拆分得到的最大乘积为 dp[i]</p></li><li><p>确定递推公式<br>假设将 i 拆分成两个数，最大乘积为 j * (i - j)，那把 i 拆成3个，4个等等该怎么得到乘积呢？<br>不妨利用我们对dp数组的定义，先拆出一个 j,剩余的 i - j，无论拆成几个数都可以写为dp[i - j]，最大乘积为 j * dp[i - j]；<br>将两式组合取最大值得到：<br><code>dp[i] = Math.max(dp[i], Math.max(j * (i - j), j * dp[i - j]));</code></p></li><li><p>初始化dp数组<br>题目要求至少将 n 拆成两个数，显然拆 0 和 1 无意义，且不符合我们对dp数组的定义，所以直接从dp[2]开始初始化：<br><code>dp[2] = 1;</code></p></li><li><p>确定遍历顺序<br>由递推公式可知，dp[i]依靠dp[i - j]，所以该从前向后遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i / <span class="number">2</span>; j++)&#123;<span class="comment">//二分，取近似的数</span></span><br><span class="line">        dp[i] = Math.max(dp[i], Math.max(j * (i - j), j * dp[i - j]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br>n &#x3D; 10,dp数组应为：<br><code>2 3 4 4 6 6 8 9</code></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//dp[n]:拆分数字n，求最大乘积为dp[n]</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i / <span class="number">2</span>; j++) &#123;<span class="comment">//二分，取近似的数</span></span><br><span class="line">                dp[i] = Math.max(dp[i], Math.max(j * (i - j), j * dp[i - j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-96-不同的二叉搜索树"><a href="#LeetCode-96-不同的二叉搜索树" class="headerlink" title="LeetCode 96. 不同的二叉搜索树"></a>LeetCode 96. 不同的二叉搜索树</h3><p><a href="https://leetcode.cn/problems/unique-binary-search-trees/">LeetCode题目链接</a></p><p>动态规划五部曲：</p><ul><li><p>确定dp数组以及下标的含义<br>dp[i]: 结点值从1到i互不相同的二叉搜索树有dp[i]种</p></li><li><p>确定递推公式<br>如图所示，先举出 n &#x3D; 1 或 n &#x3D; 2 的情况：<br><img src="https://www.zer02.fun/img/blogpng/dp_02.webp" alt="二叉树"><br>接下来时 n &#x3D; 3 的情况：<br><img src="https://www.zer02.fun/img/blogpng/dp_03.webp" alt="二叉树"></p></li><li><p>当1为头结点时，如果将其子节点视为一个整体，那么它和n &#x3D; 2时的情况一致；</p></li><li><p>当2为头结点时，它左右都只有一个结点，和n &#x3D; 1时的情况一致(n &#x3D; 1可以看成头结点左右有两个空结点);</p></li><li><p>当3为头结点时，它的左右布局又和n &#x3D; 2时的情况一直；<br>我们发现可以通过dp[1]和dp[2]推导得到dp[3]：<br>dp[3] &#x3D; 1为头结点搜索树的数量 + 2为头结点搜索树的数量 + 3为头结点搜索树的数量<br>1为头结点搜索树的数量 &#x3D; 左子树有0个元素的搜索树数量 * 右子树有2个元素的搜索树数量。<br>2为头结点搜索树的数量 &#x3D; 左子树有1个元素的搜索树数量 * 右子树有1个元素的搜索树数量。<br>3为头结点搜索树的数量 &#x3D; 左子树有2个元素的搜索树数量 * 右子树有0个元素的搜索树数量。<br>即：<code>dp[3] = dp[0] * dp[2] + dp[1] * dp[1] + dp[2] * dp[0]</code><br>当以 j 为头结点时，dp[i] &#x3D; dp[以j为头结点左子树节点数量] *dp[以j为头结点右子树节点数量],即：<br><code>dp[i] = dp[j - 1] * dp[i - j];</code><br><em>为什么左子树结点数量是 j - 1，右子树结点数量是 i - j?</em><br>因为在从1到i二叉搜索树中，比j小的一定在其左子树，比j大的一定在其右子树。<br><em>为什么是dp[j - 1] * dp[i - j]而不是相加？</em><br>假设以j为头结点其左子树有5种情况，右子树有10种情况，那么总的组合应该是5 * 10 而不是 5 + 10。</p></li><li><p>dp数组初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//空树也是二叉搜索树</span></span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>确定遍历顺序<br>从递推公式易得，结点数为为i的状态是由i之前的状态得来，所以应该遍历i里面每一个数作为头节点的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">        dp[i] += dp[j - <span class="number">1</span>] * dp[i - j]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印dp数组<br>n &#x3D; 5,结果为：<br><code>1 1 2 5 14 42</code></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numTrees</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//输入i，求dp[i]中不同二叉树</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                dp[i] += dp[j - <span class="number">1</span>] * dp[i - j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记之回溯（下）</title>
      <link href="/2023/03/16/backtracking-ii/"/>
      <url>/2023/03/16/backtracking-ii/</url>
      
        <content type="html"><![CDATA[<h2 id="子集问题"><a href="#子集问题" class="headerlink" title="子集问题"></a>子集问题</h2><h3 id="LeetCode-78-子集"><a href="#LeetCode-78-子集" class="headerlink" title="LeetCode 78. 子集"></a>LeetCode 78. 子集</h3><p><a href="https://leetcode.cn/problems/subsets/">LeetCode题目链接</a></p><ul><li>前面的<strong>组合问题</strong>和<strong>分割问题</strong>都是收集叶子节点，而<strong>子集问题</strong>是收集所有结点。</li><li>子集是无序的，在集合[1,2,3]中，[1,2]和[2,1]是一样的。</li><li>为了避免重复，for就要从start开始，而不是从0开始。</li><li>树状图<br><img src="https://www.zer02.fun/img/blogpng/backtrack_07.webp" alt="遍历过程"></li></ul><p>回溯三部曲：</p><ul><li><p>确定回溯函数参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start)</span></span><br></pre></td></tr></table></figure></li><li><p>确定终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当集合为空，即start已经大于数组长度就停止遍历</span></span><br><span class="line"><span class="keyword">if</span> (start &gt;= nums.length) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以直接 <code>res.add(new ArrayList(tmp))</code>，本题就是将所有结点加入结果集。</p></li><li><p>确定单层循环逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++)&#123;</span><br><span class="line">    tmp.add(nums[i]);</span><br><span class="line">    backtrack(nums, i + <span class="number">1</span>);</span><br><span class="line">    tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) &#123;</span><br><span class="line">            tmp.add(nums[i]);</span><br><span class="line">            backtrack(nums, i + <span class="number">1</span>);</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-90-子集-II"><a href="#LeetCode-90-子集-II" class="headerlink" title="LeetCode 90. 子集 II"></a>LeetCode 90. 子集 II</h3><p><a href="https://leetcode.cn/problems/subsets-ii/">LeetCode题目链接</a></p><p>在<a href="https://leetcode.cn/problems/subsets/">78. 子集</a>规定了数组中的元素 <strong>互不相同</strong>，倘若出现[1,2,2]这样的集合，那么结果集中就会有两个[1,2]，因为两个2虽然值相同，但它们在数组中所处的位置不同，要解决这个问题，就需要用到<a href="https://leetcode.cn/problems/combination-sum-ii/">40. 组合总和II</a>中去重的方法,为了使重复元素相邻，我们依然要对数组进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对原始数组排序使得重复元素集中在一起</span></span><br><span class="line">Arrays.sort(candidates);</span><br><span class="line"><span class="comment">//定义一个used数组记录此某元素是否被访问过</span></span><br><span class="line"> <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>回溯三部曲：</p><ul><li><p>确定回溯函数参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start)</span></span><br></pre></td></tr></table></figure></li><li><p>确定终止条件<br>与上题相同，只需要<code>res.add(new ArrayList(tmp));</code>即可。</p></li><li><p>确定单层循环逻辑<br>其实与<a href="https://leetcode.cn/problems/combination-sum-ii/">40. 组合总和 II</a>的代码大差不差。<br><img src="https://www.zer02.fun/img/blogpng/backtrack_08.webp" alt="遍历过程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i] &amp;&amp; !used[i - <span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.add(nums[i]);</span><br><span class="line">    used[i] = <span class="literal">true</span>;</span><br><span class="line">    backtrack(nums, i + <span class="number">1</span>);</span><br><span class="line">    tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">    used[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        Arrays.fill(used, <span class="literal">false</span>);</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtrack(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i] &amp;&amp; !used[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.add(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            backtrack(nums, i + <span class="number">1</span>);</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-491-递增子序列"><a href="#LeetCode-491-递增子序列" class="headerlink" title="LeetCode 491. 递增子序列"></a>LeetCode 491. 递增子序列</h3><p><a href="https://leetcode.cn/problems/non-decreasing-subsequences/">LeetCode题目链接</a><br>本题有几个细节需要注意：</p><ul><li><p>递增子序列中 <strong>至少有两个元素</strong>，即不止在叶子节点收集结果，只要有两个符合条件就可以加入结果集不止在叶子节点收集结果，可以抽象为<strong>子集问题</strong>。</p></li><li><p>两数相等也视为递增。</p></li><li><p><em>1 &lt;&#x3D; nums.length &lt;&#x3D; 15</em>，*-100 &lt;&#x3D; nums[i] &lt;&#x3D; 100*，数组长度不大且元素值也不大，可以开辟辅助数组 visited 帮助记录。</p></li><li><p>树状图如下：<br><img src="https://www.zer02.fun/img/blogpng/backtrack_09.webp" alt="遍历过程"><br>回溯三部曲：</p></li><li><p>确定回溯函数参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start)</span></span><br></pre></td></tr></table></figure></li><li><p>确定终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只要有两个符合条件就可以加入结果集</span></span><br><span class="line"><span class="keyword">if</span>(tmp.size() &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确定单层循环逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//局部变量，只记录本层递归有没有重复元素,下一层递归重新创建</span></span><br><span class="line"><span class="type">int</span>[] visited = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">201</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    !tmp.isEmpty():防止异常</span></span><br><span class="line"><span class="comment">    nums[i] &lt; tmp.get(tmp.size() - 1)：当前数是否小于临时集合中最后一个数</span></span><br><span class="line"><span class="comment">    visited[nums[i] + 100] == 1：是否访问过此数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>((!tmp.isEmpty() &amp;&amp; nums[i] &lt; tmp.get(tmp.size() - <span class="number">1</span>)) || visited[nums[i] + <span class="number">100</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.add(nums[i]);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    nums[i] = 10,visited[110] = 1,如果下次再遇到10就会直接continue</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    visited[nums[i] + <span class="number">100</span>] = <span class="number">1</span>;</span><br><span class="line">    backtrack(nums, i + <span class="number">1</span>);</span><br><span class="line">    tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// visited[nums[i] + 100] = 0;所以这里不用再对visit回溯</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用map去重：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!tmp.isEmpty() &amp;&amp; nums[i] &lt; tmp.get(tmp.size() - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用过了当前数字</span></span><br><span class="line">    <span class="keyword">if</span> (map.getOrDefault(nums[i], <span class="number">0</span>) &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每拿到一个数就放入map中</span></span><br><span class="line">    map.put(nums[i], map.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    tmp.add(nums[i]);</span><br><span class="line">    backtrack(nums, i + <span class="number">1</span>);</span><br><span class="line">    tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] visited = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">201</span>];<span class="comment">//局部变量，只记录本层递归有没有重复元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((!tmp.isEmpty() &amp;&amp; nums[i] &lt; tmp.get(tmp.size() - <span class="number">1</span>)) || visited[nums[i] + <span class="number">100</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.add(nums[i]);</span><br><span class="line">            visited[nums[i] + <span class="number">100</span>] = <span class="number">1</span>;</span><br><span class="line">            backtrack(nums, i + <span class="number">1</span>);</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// visited[nums[i] + 100] = 0;所以这里不用再对visit回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="排列问题"><a href="#排列问题" class="headerlink" title="排列问题"></a>排列问题</h2><h3 id="LeetCode-46-全排列"><a href="#LeetCode-46-全排列" class="headerlink" title="LeetCode 46. 全排列"></a>LeetCode 46. 全排列</h3><p><a href="https://leetcode.cn/problems/permutations/">LeetCode题目链接</a><br>树状图：<br><img src="https://www.zer02.fun/img/blogpng/backtrack_10.webp" alt="遍历过程"></p><p>回溯三部曲：</p><ul><li><p>确定回溯函数参数<br>排列问题主要的区别在于集合内元素是有序的，[1,2]和[2,1]是两个不同的集合，如果我先取了2，那就还要倒回去再取1，所以不需要使用start。<br>如果已经取到[2,1]，为了保证不重复取到2，就需要一个used数组来标记已经取过的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">boolean</span>[] used; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums)</span></span><br></pre></td></tr></table></figure></li><li><p>确定终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由树状图可以清晰的得到，当数组遍历到叶子节点，即tmp的长度等于数组长度时就加入结果集</span></span><br><span class="line"><span class="keyword">if</span>(tmp.size() == nums.length)&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确定单层循环逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">    <span class="comment">//如果当前元素已经取过，就跳过继续取下一个</span></span><br><span class="line">    <span class="keyword">if</span>(used[i])&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.add(nums[i]);</span><br><span class="line">    used[i] = <span class="literal">true</span>;</span><br><span class="line">    backtrack(nums);</span><br><span class="line">    tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">    used[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] used; </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        Arrays.fill(used, <span class="literal">false</span>);</span><br><span class="line">        backtrack(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    和组合问题不同，可以取前面的数字！</span></span><br><span class="line"><span class="comment">    i从0开始，之前从start开始为了防止取到前面的数，排列问题可以取前面的数，用used控制数是否取过</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp.size() == nums.length)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.add(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            backtrack(nums);</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-47-全排列-II"><a href="#LeetCode-47-全排列-II" class="headerlink" title="LeetCode 47. 全排列 II"></a>LeetCode 47. 全排列 II</h3><p><a href="https://leetcode.cn/problems/permutations-ii/">LeetCode题目链接</a><br>参考<a href="https://leetcode.cn/problems/combination-sum-ii/">40. 组合总和II</a>和<a href="https://leetcode.cn/problems/subsets-ii/">90. 子集II</a>一样的套路,不同点是<strong>本题需要做树枝去重</strong>。<br>为什么要做树枝去重？<br><strong>本质上还是为了防止一轮循环中拿到重复的元素，之前的去重都有 start 不断更新起点，used也是一样的，如果这个元素这轮访问过了，那么下一轮就不要在访问了。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i] &amp;&amp; !used[i - <span class="number">1</span>])&#123;<span class="comment">//树层去重</span></span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(used[i])&#123;<span class="comment">//树枝去重</span></span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的地方没什么区别，直接上完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        <span class="comment">//对原始数组排序，使得重复元素相邻便于去重</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtrack(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//去重！！！！！！！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp.size() == nums.length) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i] &amp;&amp; !used[i - <span class="number">1</span>]) &#123;<span class="comment">//树层去重</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (used[i]) &#123;<span class="comment">//树枝去重</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.add(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            backtrack(nums);</span><br><span class="line">            tmp.removeLast();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="上上强度"><a href="#上上强度" class="headerlink" title="上上强度"></a>上上强度</h2><h3 id="LeetCode-51-N-皇后"><a href="#LeetCode-51-N-皇后" class="headerlink" title="LeetCode 51. N 皇后"></a>LeetCode 51. N 皇后</h3><p><a href="https://leetcode.cn/problems/n-queens/">LeetCode题目链接</a><br>N皇后的约束条件：</p><ul><li><p>不能处在同一行</p></li><li><p>不能处在同一列</p></li><li><p>不能处在同一斜线<br>树状图如下：<br><img src="https://www.zer02.fun/img/blogpng/backtrack_11.webp" alt="遍历过程"><br>这三个条件不难写出一个判断皇后位置是否合法的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> n, <span class="type">char</span>[][] board)</span>&#123;</span><br><span class="line">    <span class="comment">//是否处在同一列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[i][col] == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是否处在45°斜线</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row - <span class="number">1</span>, j = col - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是否处在135°斜线</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row - <span class="number">1</span>, j = col + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt;= n - <span class="number">1</span>; i--, j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回溯三部曲：</p></li><li><p>确定回溯函数参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">n: 皇后个数</span></span><br><span class="line"><span class="comment">row: 遍历到了第几行</span></span><br><span class="line"><span class="comment">board: 棋盘</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> row, <span class="type">char</span>[][] board)</span></span><br></pre></td></tr></table></figure></li><li><p>确定终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只要搜索到叶子节点，代表最后一个皇后已经放下，将当前棋盘放入结果集</span></span><br><span class="line"><span class="keyword">if</span>(row == n)&#123;</span><br><span class="line">    res.add(charToString(board));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确定单层循环逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="comment">//检查当前位置是否合法</span></span><br><span class="line">    <span class="keyword">if</span>(isValid(row, i, n, board))&#123;</span><br><span class="line">        board[row][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        backtrack(n, row + <span class="number">1</span>, board);</span><br><span class="line">        board[row][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[][] board = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] c : board) &#123;</span><br><span class="line">            Arrays.fill(c, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        backtrack(n, <span class="number">0</span>, board);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> row, <span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            res.add(charToString(board));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isValid(row, i, n, board)) &#123;</span><br><span class="line">                board[row][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                backtrack(n, row + <span class="number">1</span>, board);</span><br><span class="line">                board[row][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List <span class="title function_">charToString</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] c : board) &#123;</span><br><span class="line">            list.add(String.copyValueOf(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> n, <span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row - <span class="number">1</span>, j = col - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row - <span class="number">1</span>, j = col + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt;= n - <span class="number">1</span>; i--, j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LeetCode-37-解数独"><a href="#LeetCode-37-解数独" class="headerlink" title="LeetCode 37. 解数独"></a>LeetCode 37. 解数独</h3><p><a href="https://leetcode.cn/problems/sudoku-solver/">LeetCode题目链接</a><br>数独的约束条件：</p><ul><li><p>1-9每行只能出现一次</p></li><li><p>1-9每列只能出现一次</p></li><li><p>1-9每个九宫格内只能出现一次<br>由这三个条件能写出一个判断当前位置是否合法的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">char</span> k, <span class="type">char</span>[][] board)</span>&#123;</span><br><span class="line">    <span class="comment">//是否在同一行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[row][i] == k)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是否在同一列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[i][col] == k)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    startRow和startCol用来计算每个九宫格的起始位置</span></span><br><span class="line"><span class="comment">    9个九宫格占3行，每行有3个，row / 3 * 3得到行标</span></span><br><span class="line"><span class="comment">    9个九宫格占3列，每列有3个，col / 3 * 3得到列标</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">startRow</span> <span class="operator">=</span> row / <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">startCol</span> <span class="operator">=</span> col / <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//是否在同一个九宫格内</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startRow; i &lt; startRow + <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> startCol; j &lt; startCol + <span class="number">3</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == k)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回溯三部曲：</p></li><li><p>确定回溯函数参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本题不需要返回值</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">char</span>[][] board)</span></span><br></pre></td></tr></table></figure></li><li><p>如果遇到无解数独会不会死循环？<br>答案是不会，最内层循环一轮走完只会出现两种结果，要么填了一个合法的数，要么发现9个数都不合法，当退出循环时就返回<code>false</code>了。</p></li><li><p>确定终止条件<br>本题递归不用终止条件，遍历整个树形结构寻找可能的叶子节点就立刻返回。</p></li><li><p>确定单层递归逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//搜索树层用void,搜索树枝用booealn</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">char</span>[][] board)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> <span class="variable">k</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>; k &lt;=<span class="string">&#x27;9&#x27;</span>; k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(isValid(i, j, k, board))&#123;</span><br><span class="line">                        board[i][j] = k;</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> backtrack(board);</span><br><span class="line">                        <span class="keyword">if</span>(res)&#123;<span class="comment">//找到结果立刻返回</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//9个数都不能填满,返回false,循环终止，所以不用担心死循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//搜了一路放满了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        backtrack(board);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//搜索树层用void,搜索树枝用booealn</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">k</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>; k &lt;= <span class="string">&#x27;9&#x27;</span>; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isValid(i, j, k, board)) &#123;</span><br><span class="line">                            board[i][j] = k;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> backtrack(board);</span><br><span class="line">                            <span class="keyword">if</span> (res) &#123;<span class="comment">//找到结果立刻返回</span></span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//9个数都不能填满，棋盘是演员</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//搜了一路放满了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">char</span> k, <span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == k) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][col] == k) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">startRow</span> <span class="operator">=</span> row / <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">startCol</span> <span class="operator">=</span> col / <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startRow; i &lt; startRow + <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> startCol; j &lt; startCol + <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == k) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis实战项目(三)</title>
      <link href="/2023/03/16/RedisProject-iii/"/>
      <url>/2023/03/16/RedisProject-iii/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博客总结了我在学习redis中做的实战项目，实现了网红探店、好友关注、附近商铺和用户签到功能，其中业务部分代码和注释都是我手敲的，前端代码和图片来自黑马程序员<br>虽然这个项目已经烂大街，但是对于学习项目开发和redis来说仍是一份不错的教材，感谢黑马程序员<br>课程链接：<a href="https://www.bilibili.com/video/BV1cr4y1671t?p=1&amp;vd_source=40ac0553f204ea9791dc385431e71f1c">https://www.bilibili.com/video/BV1cr4y1671t?p=1&amp;vd_source=40ac0553f204ea9791dc385431e71f1c</a></p></blockquote><h1 id="网红探店"><a href="#网红探店" class="headerlink" title="网红探店"></a>网红探店</h1><h2 id="查看探店笔记"><a href="#查看探店笔记" class="headerlink" title="查看探店笔记"></a>查看探店笔记</h2><ol><li><p>在<code>BlogController</code>中创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> blogService.queryBlogById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在service包下实现<code>queryBlogById</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询blog</span></span><br><span class="line">    <span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="keyword">if</span> (blog == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;笔记不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.查询blog有关用户</span></span><br><span class="line">    queryBlogUser(blog);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(blog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">queryBlogUser</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> blog.getUserId();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">    blog.setName(user.getNickName());</span><br><span class="line">    blog.setIcon(user.getIcon());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="点赞功能"><a href="#点赞功能" class="headerlink" title="点赞功能"></a>点赞功能</h2><p>需求：</p><ul><li>同一个用户只能点赞一次，再次点击则取消点赞</li><li>如果当前用户已经点赞，则点赞按钮高亮显示(前端判断isLike属性)</li></ul><p>实现步骤：</p><ol><li>给Blog类中添加一个isLike字段，标识是否被当前用户点赞</li><li>修改点赞功能，利用redis的set集合判断是否点赞过，未点赞则点赞数+1，反之-1</li><li>修改根据id查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段</li><li>修改分页查询Blog业务，判断当前用户是否点赞过，赋值给isLike字段</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li><p>在Blog类中添加isLike字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> <span class="doctag">@TableField</span>:当前属性是否属于这个类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> Boolean isLike;</span><br></pre></td></tr></table></figure></li><li><p>修改点赞功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BlogController</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/like/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> blogService.likeBlog(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IBlogService</span></span><br><span class="line">Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service.impl包</span></span><br><span class="line"><span class="comment"> * 点赞功能具体业务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取登录用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.判断当前用户是否已经点赞</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + id;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">isMember</span> <span class="operator">=</span> stringRedisTemplate.opsForSet().isMember(key, userId.toString());</span><br><span class="line">    <span class="keyword">if</span> (BooleanUtil.isFalse(isMember)) &#123;</span><br><span class="line">        <span class="comment">//3.未点赞，可点</span></span><br><span class="line">        <span class="comment">//3.1数据库点赞+1</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked + 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">        <span class="comment">//3.2保存用户到redis的set集合</span></span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            stringRedisTemplate.opsForSet().add(key, userId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//4.已经点过了，取消点赞</span></span><br><span class="line">        <span class="comment">//4.1数据库点赞-1</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked - 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">        <span class="comment">//4.2把用户从set集合里移除</span></span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            stringRedisTemplate.opsForSet().remove(key, userId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>在<code>queryBlogById</code>方法第二步下添加第三步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.查询blog是否被点赞</span></span><br><span class="line">isBlogLiked(blog);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在下面实现</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">isBlogLiked</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//用户未登录,无需查询点赞，避免空指针</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId();</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + blog.getId();</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">isMember</span> <span class="operator">=</span> stringRedisTemplate.opsForSet().isMember(key, userId.toString());</span><br><span class="line">    blog.setIsLike(BooleanUtil.isTrue(isMember));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="点赞排行榜"><a href="#点赞排行榜" class="headerlink" title="点赞排行榜"></a>点赞排行榜</h3><table><thead><tr><th align="center"></th><th align="center">List</th><th align="center">Set</th><th align="center">SortedSet</th></tr></thead><tbody><tr><td align="center">排序方式</td><td align="center">按添加顺序排序</td><td align="center">无序</td><td align="center">根据score值排序</td></tr><tr><td align="center">唯一性</td><td align="center">不唯一</td><td align="center">唯一</td><td align="center">唯一</td></tr><tr><td align="center">查找方式</td><td align="center">按索引查找或首尾查找</td><td align="center">按元素查找</td><td align="center">按元素查找</td></tr></tbody></table><ul><li>代码实现：<br>修改<code>likeBlog</code>方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取登录用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.判断当前用户是否已经点赞</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + id;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());</span><br><span class="line">    <span class="keyword">if</span> (score == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//3.未点赞，可点</span></span><br><span class="line">        <span class="comment">//3.1数据库点赞+1</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked + 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">        <span class="comment">//3.2保存用户到redis的SortedSet集合</span></span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            stringRedisTemplate.opsForZSet().add(key, userId.toString(), System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//4.已经点过了，取消点赞</span></span><br><span class="line">        <span class="comment">//4.1数据库点赞-1</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked - 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">        <span class="comment">//4.2把用户从set集合里移除</span></span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            stringRedisTemplate.opsForZSet().remove(key, userId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>修改<code>isBlogLiked</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">isBlogLiked</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + blog.getId();</span><br><span class="line">    <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());</span><br><span class="line">    blog.setIsLike(BooleanUtil.isTrue(score != <span class="literal">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现点赞列表查询"><a href="#实现点赞列表查询" class="headerlink" title="实现点赞列表查询"></a>实现点赞列表查询</h3><p>在<code>BlogController</code>中创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/likes/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> blogService.queryBlogLikes(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>IBlogService</code>中创建：<br><code>Result queryBlogLikes(Long id);</code></p><p>实现具体业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现按时间查询点赞TOP5的用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询top5的点赞用户 zrange key 0 4</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + id;</span><br><span class="line">    Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//1.2判断是否为空以确保ids不为空</span></span><br><span class="line">    <span class="keyword">if</span> (top5 == <span class="literal">null</span> || top5.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.解析其中的用户id</span></span><br><span class="line">    List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//3.根据id查询用户</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">    List&lt;UserDTO&gt; userDTOS = userService.query()</span><br><span class="line">            .in(<span class="string">&quot;id&quot;</span>, ids)</span><br><span class="line">            .last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list()</span><br><span class="line">            .stream()</span><br><span class="line">            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//4.返回</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(userDTOS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一点需要注意，一开始我这样查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDTO&gt; userDTOS = userService.listByIds(ids)</span><br><span class="line">            .stream()</span><br><span class="line">            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>这样会导致查出来的数据是倒序，原因是数据库调用的查询语句是<code>SELECT ... FROM ... WHERE id IN(5, 1);</code>，问题就出在<code>IN</code>,我们可以在后面跟上<code>ORDER BY FIELD(id, 5, 1)</code>来实现自定义排序。</p><h2 id="关注-x2F-取关功能"><a href="#关注-x2F-取关功能" class="headerlink" title="关注&#x2F;取关功能"></a>关注&#x2F;取关功能</h2><h3 id="实现关注-x2F-取关功能"><a href="#实现关注-x2F-取关功能" class="headerlink" title="实现关注&#x2F;取关功能"></a>实现关注&#x2F;取关功能</h3><p>在<code>FollowController</code>类中定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IFollowService iFollowService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关注/取关接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> followUserId 被关注的用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isFollow 是否关注</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/&#123;id&#125;/&#123;isFollow&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long followUserId, <span class="meta">@PathVariable(&quot;isFollow&quot;)</span> Boolean isFollow)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> iFollowService.follow(followUserId, isFollow);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否关注</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> followUserId 被关注的用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/or/not/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">isFollow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long followUserId)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> iFollowService.isFollow(followUserId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>IFollowService</code>类下创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Result <span class="title function_">follow</span><span class="params">(Long followUserId, Boolean isFollow)</span>;</span><br><span class="line"></span><br><span class="line">Result <span class="title function_">isFollow</span><span class="params">(Long followUserId)</span>;</span><br></pre></td></tr></table></figure><ul><li>代码实现：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(Long followUserId, Boolean isFollow)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取当前登入用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//redis key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;follow:&quot;</span> + userId;</span><br><span class="line">    <span class="comment">//2.判断是关注还是取关</span></span><br><span class="line">    <span class="keyword">if</span> (isFollow) &#123;</span><br><span class="line">        <span class="comment">//3.关注，数据库写入新增数据</span></span><br><span class="line">        <span class="type">Follow</span> <span class="variable">follow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Follow</span>();</span><br><span class="line">        follow.setUserId(userId);</span><br><span class="line">        follow.setFollowUserId(followUserId);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> save(follow);</span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            <span class="comment">//把关注的用户id放入Redis的set集合 sadd userId followUserId用于判断共同关注</span></span><br><span class="line">            stringRedisTemplate.opsForSet().add(key, followUserId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//4.取消关注,delete from tb_follow where user_id = ? and follow_user_id = ?</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> remove(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Follow&gt;()</span><br><span class="line">                .eq(<span class="string">&quot;user_id&quot;</span>, userId)</span><br><span class="line">                .eq(<span class="string">&quot;follow_user_id&quot;</span>, followUserId));</span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            <span class="comment">//把取消关注的用户id移除Redis的set集合 remove userId followUserId</span></span><br><span class="line">            stringRedisTemplate.opsForSet().remove(key, followUserId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">isFollow</span><span class="params">(Long followUserId)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取当前登入用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.查询是否关注select * from tb_follow where user_id = ? and follow_user_id = ?</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId)</span><br><span class="line">            .eq(<span class="string">&quot;follow_user_id&quot;</span>, followUserId).count();</span><br><span class="line">    <span class="keyword">return</span> Result.ok(count &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h3><p>在<code>UserController</code>中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询详情</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(userDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>BlogController</code>中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询blog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> current</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogByUserId</span><span class="params">(<span class="meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//根据用户查询</span></span><br><span class="line">    Page&lt;Blog&gt; page = blogService.query()</span><br><span class="line">            .eq(<span class="string">&quot;user_id&quot;</span>, id).page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));</span><br><span class="line">    <span class="comment">//获取当页数据</span></span><br><span class="line">    List&lt;Blog&gt; records = page.getRecords();</span><br><span class="line">    <span class="keyword">return</span> Result.ok(records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用redis中的<code>SINTER</code>实现求交集,把关注用户放入redis中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(Long followUserId, Boolean isFollow)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取当前登入用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//redis key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;follows:&quot;</span> + userId;</span><br><span class="line">    <span class="comment">//2.判断是关注还是取关</span></span><br><span class="line">    <span class="keyword">if</span> (isFollow) &#123;</span><br><span class="line">        <span class="comment">//3.关注，数据库写入新增数据</span></span><br><span class="line">        <span class="type">Follow</span> <span class="variable">follow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Follow</span>();</span><br><span class="line">        follow.setUserId(userId);</span><br><span class="line">        follow.setFollowUserId(followUserId);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> save(follow);</span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            <span class="comment">//把关注的用户id放入Redis的set集合 sadd userId followUserId用于判断共同关注</span></span><br><span class="line">            stringRedisTemplate.opsForSet().add(key, followUserId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//4.取消关注,delete from tb_follow where user_id = ? and follow_user_id = ?</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> remove(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Follow&gt;()</span><br><span class="line">                .eq(<span class="string">&quot;user_id&quot;</span>, userId)</span><br><span class="line">                .eq(<span class="string">&quot;follow_user_id&quot;</span>, followUserId));</span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            <span class="comment">//把取消关注的用户id移除Redis的set集合 remove userId followUserId</span></span><br><span class="line">            stringRedisTemplate.opsForSet().remove(key, followUserId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现共同关注接口,在<code>FollowController</code>中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/common/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">followCommons</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> iFollowService.followCommons(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>IFollowService</code>中添加:<br><code>Result followCommons(Long id);</code></p><p>在<code>FollowServiceImpl</code>中添加:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">followCommons</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取当前用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.当前用户redis key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key1</span> <span class="operator">=</span> <span class="string">&quot;follows:&quot;</span> + userId;</span><br><span class="line">    <span class="comment">//3.求交集</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key2</span> <span class="operator">=</span> <span class="string">&quot;follows:&quot;</span> + id;</span><br><span class="line">    Set&lt;String&gt; intersect = stringRedisTemplate.opsForSet().intersect(key1, key2);</span><br><span class="line">    <span class="keyword">if</span> (intersect == <span class="literal">null</span> || intersect.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//无交集</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.有交集，解析交集用户id</span></span><br><span class="line">    List&lt;Long&gt; ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//5.工具共同关注用户id查询用户</span></span><br><span class="line">    List&lt;UserDTO&gt; users = userService.listByIds(ids)</span><br><span class="line">            .stream()</span><br><span class="line">            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> Result.ok(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关注推送"><a href="#关注推送" class="headerlink" title="关注推送"></a>关注推送</h3><p>关注推送也叫做Feed流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。</p><p>Feed流产品有两种常见模式：</p><ul><li>**Timeline:**不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈<ul><li>优点：信息全面，不会有缺失。并且实现也相对简单</li><li>缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低</li></ul></li><li><strong>智能排序：</strong>利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户<ul><li>优点：投喂用户感兴趣的信息，用户粘性很高，容易沉迷</li><li>如果算法不精准，可能起到反作用</li></ul></li></ul><p>本例中的个人页面，是基于关注的好友来做Feed流，因此采用Timeline模式。该模式实现方案有三种：</p><ul><li>拉模式：也叫读扩散。只有用户在读的时候才会获取一个副本回来</li><li>推模式：也叫写扩散。消息直接推送到粉丝收件箱</li><li>推拉结合：也叫读写混合。普通粉丝用推模式，活跃粉丝用拉模式，既节省了内存，又照顾了活跃于用户的感受。</li></ul><table><thead><tr><th align="center"></th><th align="center">拉模式</th><th align="center">推模式</th><th align="center">推拉结合</th></tr></thead><tbody><tr><td align="center">写比例</td><td align="center">低</td><td align="center">高</td><td align="center">中</td></tr><tr><td align="center">读比例</td><td align="center">高</td><td align="center">低</td><td align="center">中</td></tr><tr><td align="center">用户读取延迟</td><td align="center">高</td><td align="center">低</td><td align="center">低</td></tr><tr><td align="center">实现难度</td><td align="center">复杂</td><td align="center">简单</td><td align="center">很复杂</td></tr><tr><td align="center">使用场景</td><td align="center">很少使用</td><td align="center">用户量少，没有大V</td><td align="center">过千万的用户量，有大V</td></tr></tbody></table><h4 id="基于推模式实现关注推送功能"><a href="#基于推模式实现关注推送功能" class="headerlink" title="基于推模式实现关注推送功能"></a>基于推模式实现关注推送功能</h4><p>需求：</p><ol><li>修改新增探店笔记的业务，在保存blog到数据库的同时，推送到粉丝的收件箱</li><li>收件箱满足可以根据时间戳排序，必须用Redis的数据结构实现</li><li>查询收件箱数据时，可以实现分页查询</li></ol><p>改造<code>BlogController</code>中的<code>saveBlog</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(<span class="meta">@RequestBody</span> Blog blog)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> blogService.saveBlog(blog);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加接口</span></span><br><span class="line">Result <span class="title function_">saveBlog</span><span class="params">(Blog blog)</span>;</span><br></pre></td></tr></table></figure><p>在<code>BlogServiceImpl</code>中实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取登录用户</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">    blog.setUserId(user.getId());</span><br><span class="line">    <span class="comment">// 2.保存探店博文</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> save(blog);</span><br><span class="line">    <span class="keyword">if</span> (!isSuccess) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;保存博文失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.查询笔记作者所有粉丝 select * from tb_follow where follow_user_id = ?</span></span><br><span class="line">    List&lt;Follow&gt; follows = followService.query().eq(<span class="string">&quot;follow_user_id&quot;</span>, user.getId()).list();</span><br><span class="line">    <span class="comment">//4.推送博文id给所有粉丝</span></span><br><span class="line">    <span class="keyword">for</span> (Follow follow : follows) &#123;</span><br><span class="line">        <span class="comment">//4.1获取粉丝id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> follow.getUserId();</span><br><span class="line">        <span class="comment">//4.2推送给粉丝</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> FEED_KEY + userId;</span><br><span class="line">        stringRedisTemplate.opsForZSet().add(key, blog.getId().toString(), System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.返回id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(blog.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="滚动分页查询"><a href="#滚动分页查询" class="headerlink" title="滚动分页查询"></a>滚动分页查询</h4><p>Feed流推送不能使用传统的分页查询，因为数据会实时更新，在redis中有两种数据结构支持分页查询，分别是<code>List</code>和<code>SortedSet</code>，这里使用<code>SortedSet</code>，因为list只能实现角标查询，如果数据更新，会出现重复读取，导致数据混乱。</p><p>滚动分页查询参数：<br>max: 当前时间戳 | 上一次查询的最小时间戳<br>min: 0<br>offset: 0 | 在上一次的结果中，与最小值一样的元素的个数<br>count: 跟前端约定好，固定值</p><p>在<code>DTO</code>中定义<code>ScrollResult</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScrollResult</span> &#123;</span><br><span class="line">    <span class="comment">//小于指定时间戳的笔记集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;?&gt; list;</span><br><span class="line">    <span class="comment">//本次查询的推送的最小时间戳</span></span><br><span class="line">    <span class="keyword">private</span> Long minTime;</span><br><span class="line">    <span class="comment">//偏移量</span></span><br><span class="line">    <span class="keyword">private</span> Integer offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>BlogController</code>中定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/of/follow&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryByBlogOfFollow</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;lastId&quot;)</span> Long max,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;offset&quot;, defaultValue = &quot;0&quot;)</span> Integer offset)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> blogService.queryBlogOfFollow(max, offset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建方法</span></span><br><span class="line">Result <span class="title function_">queryBlogOfFollow</span><span class="params">(Long max, Integer offset)</span>;</span><br></pre></td></tr></table></figure><p>在<code>BlogServiceImpl</code>中实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 滚动分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> max 最大时间戳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogOfFollow</span><span class="params">(Long max, Integer offset)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取当前用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.查询用户收件箱 zrevrangebyscore key max min limit offset count</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> FEED_KEY + userId;</span><br><span class="line">    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = stringRedisTemplate</span><br><span class="line">            .opsForZSet().reverseRangeByScoreWithScores(key, <span class="number">0</span>, max, offset, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//3.非空判断</span></span><br><span class="line">    <span class="keyword">if</span> (typedTuples == <span class="literal">null</span> || typedTuples.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.解析数据 blogId, minTime(时间戳), offset</span></span><br><span class="line">    ArrayList&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(typedTuples.size());</span><br><span class="line">    <span class="type">long</span> <span class="variable">minTime</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">os</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;String&gt; tuple : typedTuples) &#123;</span><br><span class="line">        <span class="comment">//4.1获取id</span></span><br><span class="line">        ids.add(Long.valueOf(tuple.getValue()));</span><br><span class="line">        <span class="comment">//4.2获取分数（时间戳）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> tuple.getScore().longValue();</span><br><span class="line">        <span class="keyword">if</span> (time == minTime) &#123;</span><br><span class="line">            os++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            minTime = time;</span><br><span class="line">            os = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.根据id查询blog</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">    List&lt;Blog&gt; blogs = query().in(<span class="string">&quot;id&quot;</span>, ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list();</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        <span class="comment">//5.1.查询blog有关用户</span></span><br><span class="line">        queryBlogUser(blog);</span><br><span class="line">        <span class="comment">//5.2.查询blog是否被点赞</span></span><br><span class="line">        isBlogLiked(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.封装并返回</span></span><br><span class="line">    <span class="type">ScrollResult</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScrollResult</span>();</span><br><span class="line">    r.setList(blogs);</span><br><span class="line">    r.setMinTime(minTime);</span><br><span class="line">    r.setOffset(os);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="附近商户"><a href="#附近商户" class="headerlink" title="附近商户"></a>附近商户</h1><h2 id="GEO数据结构"><a href="#GEO数据结构" class="headerlink" title="GEO数据结构"></a>GEO数据结构</h2><p>GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令者:<br><code>GEOADD</code>:添加一个地理空间信息，包含:经度（ longitude)、纬度（latitude).值( member)<br><code>GEODIST</code>:计算指定的两个点之间的距离并返回<br><code>GEOHASH</code>:将指定member的坐标转为hash字符串形式并返回<br><code>GEOPOS</code>:返回指定member的坐标<br><code>GEORADIUS</code>:指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.2以后已废弃<br><code>GEOSEARCH</code>:在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能<br><code>GEOSEARCHSTOR</code>:与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。6.2.新功能</p><h2 id="附近商户搜索"><a href="#附近商户搜索" class="headerlink" title="附近商户搜索"></a>附近商户搜索</h2><p>按照商户类型做分组，类型相同的商户作为一组，以<code>typeId</code>为key存入同一个GEO集合中即可。<br><img src="https://www.zer02.fun/img/blogpng/redis_39.webp" alt="业务流程"></p><p>用单元测试导入数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">loadShopData</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询店铺信息</span></span><br><span class="line">    List&lt;Shop&gt; list = shopService.list();</span><br><span class="line">    <span class="comment">//2.把店铺分组，按照typeId分组，typeId一致的放到一个集合</span></span><br><span class="line">    Map&lt;Long, List&lt;Shop&gt;&gt; map = list.stream().collect(Collectors.groupingBy((Shop::getTypeId)));</span><br><span class="line">    <span class="comment">//3.分批写入redis</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Long, List&lt;Shop&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">        <span class="comment">//3.1获取类型id</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">typeId</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> SHOP_GEO_KEY + typeId;</span><br><span class="line">        <span class="comment">//3.2获取相同类型店铺集合</span></span><br><span class="line">        List&lt;Shop&gt; value = entry.getValue();</span><br><span class="line">        List&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; locations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//3.3写入redis</span></span><br><span class="line">        <span class="keyword">for</span> (Shop shop : value) &#123;</span><br><span class="line">            locations.add(<span class="keyword">new</span> <span class="title class_">RedisGeoCommands</span>.GeoLocation&lt;&gt;(</span><br><span class="line">                    shop.getId().toString(),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Point</span>(shop.getX(), shop.getY())</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line">        stringRedisTemplate.opsForGeo().add(key, locations);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造<code>ShopController</code>中的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据商铺类型分页查询商铺信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> typeId 商铺类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> current 页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 商铺列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/type&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopByType</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;typeId&quot;)</span> Integer typeId,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;x&quot;,required = false)</span> Double x,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;y&quot;,required = false)</span> Double y</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> shopService.queryShopByType(typeId, current, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将主要的业务放在service去做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据坐标查询附近店铺</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> typeId  店铺id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> current 分页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopByType</span><span class="params">(Integer typeId, Integer current, Double x, Double y)</span> &#123;</span><br><span class="line">    <span class="comment">//1.判断是否需要根据坐标查询</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">null</span> || y == <span class="literal">null</span>) &#123;</span><br><span class="line">        Page&lt;Shop&gt; page = query()</span><br><span class="line">                .eq(<span class="string">&quot;type_id&quot;</span>, typeId)</span><br><span class="line">                .page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.DEFAULT_PAGE_SIZE));</span><br><span class="line">        <span class="comment">// 返回数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(page.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.计算分页参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> (current - <span class="number">1</span>) * SystemConstants.DEFAULT_PAGE_SIZE;</span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> current * SystemConstants.DEFAULT_PAGE_SIZE;</span><br><span class="line">    <span class="comment">//3.查询Redis</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> SHOP_GEO_KEY + typeId;</span><br><span class="line">    GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; results = stringRedisTemplate.opsForGeo()</span><br><span class="line">            .search(<span class="comment">// GEOSEARCH key BYLONLAT x y BYRADIUS 10 WITHDISTANCE</span></span><br><span class="line">                    key,</span><br><span class="line">                    GeoReference.fromCoordinate(x, y),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Distance</span>(<span class="number">5000</span>),</span><br><span class="line">                    RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end)</span><br><span class="line">            );</span><br><span class="line">    <span class="comment">//4.解析出id</span></span><br><span class="line">    <span class="keyword">if</span> (results == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;GeoResult&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt;&gt; list = results.getContent();</span><br><span class="line">    <span class="keyword">if</span> (list.size() &lt;= from) &#123;</span><br><span class="line">        <span class="comment">//没有下一页，返回空</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.1截取from-end 部分</span></span><br><span class="line">    ArrayList&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list.size());</span><br><span class="line">    HashMap&lt;String, Distance&gt; distanceMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(list.size());</span><br><span class="line">    list.stream().skip(from).forEach(result -&gt; &#123;</span><br><span class="line">        <span class="comment">//4.2获取店铺id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopIdStr</span> <span class="operator">=</span> result.getContent().getName();</span><br><span class="line">        ids.add(Long.valueOf(shopIdStr));</span><br><span class="line">        <span class="comment">//4.3获取距离</span></span><br><span class="line">        <span class="type">Distance</span> <span class="variable">distance</span> <span class="operator">=</span> result.getDistance();</span><br><span class="line">        distanceMap.put(shopIdStr, distance);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//5.根据id查询shop</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">    List&lt;Shop&gt; shops = query().in(<span class="string">&quot;id&quot;</span>, ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list();</span><br><span class="line">    <span class="keyword">for</span> (Shop shop : shops) &#123;</span><br><span class="line">        shop.setDistance(distanceMap.get(shop.getId().toString()).getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.返回</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shops);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户签到"><a href="#用户签到" class="headerlink" title="用户签到"></a>用户签到</h2><p>假设平台有1000万用户，每人每年签到10次，这么庞大的数据量如果用数据库存储显然是不现实的，这里我们按月统计用户签到信息，签到记录为1，未签到则记录为0，这样只需要使用31bit就可以保存一个用户当月的签到记录。<br>把每一个bit位对应当月的每一天，形成映射关系。用0和1表示业务状态，这种思路就称为位图(BitMap)。</p><h3 id="BitMap用法"><a href="#BitMap用法" class="headerlink" title="BitMap用法"></a>BitMap用法</h3><p>redis中是利用String类型数据结构实现BitMap，因此最大上限是512M，转化为bit则是2^32个bit位。<br>BitMap的操作命令有:<br><code>SETBIT</code>:向指定位置(offset)存入一个0或1<br><code>GETBIT</code>:获取指定位置(offset)的bit值<br><code>BITCOUNT</code>:统计BitMap中值为1的bit位的数量<br><code>BITFIELD</code>:操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值<br><code>BITFIELD_RO</code>:获取BitMap中bit数组，并以十进制形式返回<br><code>BITOP</code>:将多个BitMap的结果做位运算(与、或、异或)<br><code>BITOPS</code>:查找bit数组中指定范围内第一个0或1出现的位置</p><h3 id="实现签到功能"><a href="#实现签到功能" class="headerlink" title="实现签到功能"></a>实现签到功能</h3><p>在<code>UserController</code>中创建接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sign&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sign</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.sign();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>IUserService</code>中创建：<br><code>Result sign();</code></p><p>在实现类中写具体业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sign</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取当前用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.获取当前日期</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">    <span class="comment">//3.拼接key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">keySuffix</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;:yyyyMM&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> USER_SIGN_KEY + userId + keySuffix;</span><br><span class="line">    <span class="comment">//4.获取当前是这个月第几天</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> now.getDayOfMonth();</span><br><span class="line">    <span class="comment">//5.写入redis SETBIT key offset 1</span></span><br><span class="line">    stringRedisTemplate.opsForValue().setBit(key, dayOfMonth, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="签到统计"><a href="#签到统计" class="headerlink" title="签到统计"></a>签到统计</h3><p>问题1：什么叫做连续签到天数？<br>从最后一次签到开始向前统计，直到遇到第一次未签到为止，计算总的签到次数，就是连续签到天数。</p><p>问题2：如何得到本月到今天为止的所有签到数据？<br><code>BITFILED key GET u[dayOfMonth] 0</code></p><p>问题3：如何从后往前遍历每个bit位？<br>与1做与运算，就能得到最后一个bit位，随后右移1位，下一个bit位就成了最后一个bit位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserService</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/sign/count&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">signCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.signCount();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IUserService</span></span><br><span class="line">Result <span class="title function_">signCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">signCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取当前用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.获取当前日期</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">    <span class="comment">//3.拼接key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">keySuffix</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;:yyyyMM&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> USER_SIGN_KEY + userId + keySuffix;</span><br><span class="line">    <span class="comment">//4.获取当前是这个月第几天</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> now.getDayOfMonth();</span><br><span class="line">    <span class="comment">//5.获取本月截止今天为止所有的签到记录，返回十进制数字</span></span><br><span class="line">    List&lt;Long&gt; result = stringRedisTemplate.opsForValue().bitField(</span><br><span class="line">            key, BitFieldSubCommands.create()</span><br><span class="line">                    .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class="number">0</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span> || result.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//没有任何签到结果</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">num</span> <span class="operator">=</span> result.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="literal">null</span> || num == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.循环遍历</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//6.1让这个数字与1做与运算，得到数字最后一个bit位，判断这个bit位是否为0</span></span><br><span class="line">        <span class="keyword">if</span> ((num &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//为0，则未签到，结束</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不为0，已经签到，count+1</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把num右移一位，抛弃最后一个bit位，继续下一个bit位</span></span><br><span class="line">        num &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记之回溯（上）</title>
      <link href="/2023/03/15/backtracking/"/>
      <url>/2023/03/15/backtracking/</url>
      
        <content type="html"><![CDATA[<h2 id="回溯算法三部曲"><a href="#回溯算法三部曲" class="headerlink" title="回溯算法三部曲"></a>回溯算法三部曲</h2><ul><li>以<strong>LeetCode77.组合</strong>为例：</li></ul><h3 id="递归函数的返回值以及参数"><a href="#递归函数的返回值以及参数" class="headerlink" title="递归函数的返回值以及参数"></a>递归函数的返回值以及参数</h3><p>定义两个全局变量，一个用来存放符合条件的结果的集合，一个用来存放单一结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">// 存放符合条件结果的集合</span></span><br><span class="line">List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">// 用来存放符合条件结果</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> start)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="递归函数终止条件"><a href="#递归函数终止条件" class="headerlink" title="递归函数终止条件"></a>递归函数终止条件</h3><p>本题需要返回范围 <strong>[1, n]</strong> 中所有可能的 <strong>k</strong> 个数的组合，不难得出终止条件的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tmp.size() == k) &#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单层搜索的过程"><a href="#单层搜索的过程" class="headerlink" title="单层搜索的过程"></a>单层搜索的过程</h3><p>本题的重点是需要一个<code>int</code>型的变量<code>start</code>来记录本层递归中集合从哪里开始遍历。<br>遍历过程如图所示，<code>start</code>主要起剪枝作用。<br><img src="https://www.zer02.fun/img/blogpng/backtrack_01.webp" alt="遍历过程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= n; i++) &#123; <span class="comment">// 控制树的横向遍历</span></span><br><span class="line">    tmp.add(i); <span class="comment">// 处理节点</span></span><br><span class="line">    backtrack(n, k, i + <span class="number">1</span>); <span class="comment">// 递归：控制树的纵向遍历，注意下一层搜索要从i+1开始</span></span><br><span class="line">    tmp.remove(tmp.size()); <span class="comment">// 回溯，撤销处理的节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tmp.remove(tmp.size() - 1);</code>为回溯的操作，移除上一轮递归的结果，开始下一轮递归。</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        backtrack(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp.size() == k) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= n; i++) &#123;</span><br><span class="line">            tmp.add(i);</span><br><span class="line">            backtrack(n, k, i + <span class="number">1</span>);</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合问题"><a href="#组合问题" class="headerlink" title="组合问题"></a>组合问题</h2><h3 id="LeetCode-77-组合"><a href="#LeetCode-77-组合" class="headerlink" title="LeetCode 77. 组合"></a>LeetCode 77. 组合</h3><p><a href="https://leetcode.cn/problems/combinations/">LeetCode题目链接</a><br>在上面的回溯算法三部曲中已经详细解释了其过程，这里不再过多赘述。</p><h3 id="LeetCode-216-组合总和-III"><a href="#LeetCode-216-组合总和-III" class="headerlink" title="LeetCode 216. 组合总和 III"></a>LeetCode 216. 组合总和 III</h3><p><a href="https://leetcode.cn/problems/combination-sum-iii/">LeetCode题目链接</a><br>以先取1为例，不难画出其树形结构：<br><img src="https://www.zer02.fun/img/blogpng/backtrack_02.webp" alt="遍历过程"><br>回溯三部曲：</p><ul><li><p>确定回溯函数参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录每层递归的和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录收集了多少个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span></span><br></pre></td></tr></table></figure><p>显然此题答案存在于叶子节点，题中需要的数字个数 k 正好是树需要遍历的深度，我们不妨定义一个<code>int</code>型的变量 count 来记录树深，同时定义一个<code>int</code>型变量 sum 记录和，那么终止条件自然就得到了。</p></li><li><p>确定终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(count == k &amp;&amp; sum == n)&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确定单层遍历逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//每次循环更新sum和count，同时把当前数放入tmp中，回溯过程镜像此操作。</span></span><br><span class="line">    sum += i;</span><br><span class="line">    count++;</span><br><span class="line">    tmp.add(i);</span><br><span class="line">    backtrack(k, n, i + <span class="number">1</span>);</span><br><span class="line">    sum -= i;</span><br><span class="line">    count--;</span><br><span class="line">    tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>本题也需要一个 start 来记录本层递归中集合从哪里开始遍历。同是 start 也可以代替 count 起到剪枝的作用，用 count 的好处是代码更具有可读性。</strong></p></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录每层递归的和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录收集了多少个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        backtrack(k, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == k &amp;&amp; sum == n) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//剪枝</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; k || sum &gt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            count++;</span><br><span class="line">            tmp.add(i);</span><br><span class="line">            backtrack(k, n, i + <span class="number">1</span>);</span><br><span class="line">            sum -= i;</span><br><span class="line">            count--;</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-17-电话号码的字母组合"><a href="#LeetCode-17-电话号码的字母组合" class="headerlink" title="LeetCode 17. 电话号码的字母组合"></a>LeetCode 17. 电话号码的字母组合</h3><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">LeetCode题目链接</a><br>前两道题都是求同一集合中的不同组合，而这道题是在不同的集合中求不同的组合。</p><ul><li><p>树状图<br><img src="https://www.zer02.fun/img/blogpng/backtrack_03.webp" alt="遍历过程"><br>回溯三部曲：</p></li><li><p>确定回溯函数参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();<span class="comment">//多次对字符串切割，故使用StringBuilder比String效率高很多</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(String digits, String[] numString, <span class="type">int</span> num)</span></span><br></pre></td></tr></table></figure></li><li><p>确定终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(num == digits.length())&#123;</span><br><span class="line">    res.add(tmp.toString());</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确定单层遍历逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为是求不同集合中的组合，所以i不再从start开始</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">    tmp.append(str.charAt(i));</span><br><span class="line">    backtrack(digits, numString, num + <span class="number">1</span>);</span><br><span class="line">    tmp.deleteCharAt(tmp.length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (digits == <span class="literal">null</span> || digits.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//0 和 1 不记录，用&quot;&quot;占位处理异常情况</span></span><br><span class="line">        String[] numString = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span>&#125;;</span><br><span class="line">        backtrack(digits, numString, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(String digits, String[] numString, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num == digits.length()) &#123;</span><br><span class="line">            res.add(tmp.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> numString[digits.charAt(num) - <span class="string">&#x27;0&#x27;</span>];<span class="comment">//str 表示当前num对应的字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            tmp.append(str.charAt(i));</span><br><span class="line">            backtrack(digits, numString, num + <span class="number">1</span>);</span><br><span class="line">            tmp.deleteCharAt(tmp.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-39-组合总和"><a href="#LeetCode-39-组合总和" class="headerlink" title="LeetCode 39. 组合总和"></a>LeetCode 39. 组合总和</h3><p><a href="https://leetcode.cn/problems/combination-sum/">LeetCode题目链接</a><br>在<a href="https://leetcode.cn/problems/combinations/">77.组合</a>和<a href="https://leetcode.cn/problems/combination-sum-iii/">216.组合总和III</a>中都要递归k层，因为要选取k个元素。而本题不限制元素个数，所以当选取的元素和大于 target 时就立即返回。</p><ul><li>树状图<br><img src="https://www.zer02.fun/img/blogpng/backtrack_04.webp" alt="遍历过程"><br>图中可以清晰的看到，纵向递归是可以取到重复元素的，而横向则不可以，这样避免了得到[2,2,3]和[2,3,2]这样的重复结果。<br>而达到这个目的的关键因素就是我定义的 <code>start</code>。</li></ul><p>回溯三部曲：</p><ul><li><p>确定回溯函数参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//一个集合求组合，需要用start控制遍历起点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> start)</span></span><br></pre></td></tr></table></figure></li><li><p>确定终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和已经大于target</span></span><br><span class="line"><span class="keyword">if</span>(target &lt; <span class="number">0</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(target == <span class="number">0</span>)&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(tmp));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确定单层遍历逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; i++)&#123;</span><br><span class="line">    <span class="comment">//如果和大于target,剪枝</span></span><br><span class="line">    <span class="keyword">if</span>(target &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.add(candidates[i]);</span><br><span class="line">    backtrack(candidates, target - candidates[i], i);</span><br><span class="line">    tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtrack(candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="comment">//和已经大于target</span></span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(tmp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.add(candidates[i]);</span><br><span class="line">            backtrack(candidates, target - candidates[i], i);</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-40-组合总和-II"><a href="#LeetCode-40-组合总和-II" class="headerlink" title="LeetCode 40. 组合总和 II"></a>LeetCode 40. 组合总和 II</h3><p><a href="https://leetcode.cn/problems/combination-sum-ii/">LeetCode题目链接</a><br>这道题与<a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a>最大的不同是<strong>集合中的元素不可以重复使用</strong>，所以需要定义一个布尔型的数组来告诉程序哪些元素已经在本轮递归中使用过。</p><p>回溯三部曲：</p><ul><li><p>确定回溯函数参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//记录各元素之和，也可以跟上题一样使用target - candidates[i]</span></span><br><span class="line"><span class="type">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> start)</span></span><br></pre></td></tr></table></figure></li><li><p>确定终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//剪枝</span></span><br><span class="line"><span class="keyword">if</span>(sum &lt; <span class="number">0</span> || sum &gt; target)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单层递归逻辑<br>本题难点在于 数组candidates 有重复元素，但还不能有重复的组合，即如何去重。<br>为了将重复的数字都放到一起，所以先进行排序。<br><img src="https://www.zer02.fun/img/blogpng/backtrack_05.webp" alt="遍历过程"><br>由树状图可以看出，当同一层的前一个元素等于当前元素且前一个元素没有被访问过的时候，就要做去重操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; i++)&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    !used[i - 1]代表数层去重，前一个还没访问过</span></span><br><span class="line"><span class="comment">    例如[1,1,6],此时used为[0,1,0]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum += candidates[i];</span><br><span class="line">    used[i] = <span class="literal">true</span>;</span><br><span class="line">    tmp.add(candidates[i]);</span><br><span class="line">        </span><br><span class="line">    backtrack(candidates, target, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    sum -= candidates[i];</span><br><span class="line">    used[i] = <span class="literal">false</span>;</span><br><span class="line">    tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (candidates.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[candidates.length];</span><br><span class="line">        <span class="comment">// 加标志数组，用来辅助判断同层节点是否已经遍历</span></span><br><span class="line">        Arrays.fill(used, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//对原始数组排序，将重复元素放在一起</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtrack(candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span> || sum &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             !used[i - 1]代表数层去重，前一个还没访问过</span></span><br><span class="line"><span class="comment">             例如[1,1,6],此时used为[0,1,0]</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            tmp.add(candidates[i]);</span><br><span class="line">            <span class="comment">// 每个节点仅能选择一次，所以从下一位开始</span></span><br><span class="line">            backtrack(candidates, target, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="分割问题"><a href="#分割问题" class="headerlink" title="分割问题"></a>分割问题</h2><h3 id="LeetCode-131-分割回文串"><a href="#LeetCode-131-分割回文串" class="headerlink" title="LeetCode 131. 分割回文串"></a>LeetCode 131. 分割回文串</h3><p><a href="https://leetcode.cn/problems/palindrome-partitioning/">LeetCode题目链接</a><br>切割问题本质上类似于组合问题。<br>以[a,a,b]举例：<br>在组合问题中，第一个 a 递归完毕，就该拿出第二个a再跑一遍。<br>在切割问题中，第一段 a 切割完毕，就该拿出第二段 aa 再进行切割。<br>结合树状图会看的更清晰：<br><img src="https://www.zer02.fun/img/blogpng/backtrack_06.webp" alt="遍历过程"><br>当切割线走到数组结尾时，正好切割完毕。</p><p>回溯三部曲：</p><ul><li><p>确定回溯函数参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//start相当于切割线</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(String s, <span class="type">int</span> start)</span></span><br></pre></td></tr></table></figure></li><li><p>确定终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(start &gt;= s.length())&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确定单层循环逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; s.length(); i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isTrue(s, start, i))&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.substring(start, i + <span class="number">1</span>);</span><br><span class="line">        tmp.add(str);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(s, i + <span class="number">1</span>);</span><br><span class="line">    tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断回文</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isTrue</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> start, r = end; l &lt; r; l++, r--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(l) != s.charAt(r))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        backtrack(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(String s, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= s.length()) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(tmp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isTrue(s, start, i)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.substring(start, i + <span class="number">1</span>);</span><br><span class="line">                tmp.add(str);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            backtrack(s, i + <span class="number">1</span>);</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isTrue</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> start, r = end; l &lt; r; l++, r--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(l) != s.charAt(r)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="LeetCode-93-复原IP地址"><a href="#LeetCode-93-复原IP地址" class="headerlink" title="LeetCode 93.复原IP地址"></a>LeetCode 93.复原IP地址</h3><p><a href="https://leetcode.cn/problems/restore-ip-addresses/">LeetCode题目链接</a><br>本题与<a href="https://leetcode.cn/problems/palindrome-partitioning/">131. 分割回文串</a>类似，只需要把所有可能性搜索出来即可。<br>树状图也与上题一样，start在充当切割线的同时避免取到重复元素。</p><p>回溯三部曲：</p><ul><li><p>确定回溯函数参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//这种对字符串做频繁修改的题目建议用StringBuilder，我这样做不但复杂而且效率低。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> pointSum)</span></span><br></pre></td></tr></table></figure></li><li><p>确定终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//12位的IP地址由三个逗点隔开，所以当 pointNum = 3时将集合加入结果集中</span></span><br><span class="line"><span class="keyword">if</span>(pointSum == <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isLegal(s, start, s.length() - <span class="number">1</span>))&#123;</span><br><span class="line">        res.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确定单层循环逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; s.length(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isLegal(s, start, i))&#123;</span><br><span class="line">            s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + <span class="string">&quot;.&quot;</span> + s.substring(i + <span class="number">1</span>);</span><br><span class="line">            pointSum++;</span><br><span class="line">            backtrack(s, i + <span class="number">2</span>, pointSum);</span><br><span class="line">            s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + s.substring(i + <span class="number">2</span>);</span><br><span class="line">            pointSum--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断一段ip是否合法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isLegal</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以0开头不合法</span></span><br><span class="line">    <span class="keyword">if</span>(s.charAt(start) == <span class="string">&#x27;0&#x27;</span> &amp;&amp; start != end)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++)&#123;</span><br><span class="line">        <span class="comment">//遇到非数字不合法</span></span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i) &gt; <span class="string">&#x27;9&#x27;</span> || s.charAt(i) &lt; <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = sum * <span class="number">10</span> + (s.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="comment">//此段IP大于255不合法</span></span><br><span class="line">        <span class="keyword">if</span>(sum &gt; <span class="number">255</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt; <span class="number">4</span> || s.length() &gt; <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack(s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> pointSum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pointSum == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLegal(s, start, s.length() - <span class="number">1</span>)) &#123;</span><br><span class="line">                res.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLegal(s, start, i)) &#123;</span><br><span class="line">                s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + <span class="string">&quot;.&quot;</span> + s.substring(i + <span class="number">1</span>);</span><br><span class="line">                pointSum++;</span><br><span class="line">                backtrack(s, i + <span class="number">2</span>, pointSum);</span><br><span class="line">                s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + s.substring(i + <span class="number">2</span>);</span><br><span class="line">                pointSum--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isLegal</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(start) == <span class="string">&#x27;0&#x27;</span> &amp;&amp; start != end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) &gt; <span class="string">&#x27;9&#x27;</span> || s.charAt(i) &lt; <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum = sum * <span class="number">10</span> + (s.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis实战项目(二)</title>
      <link href="/2023/03/07/RedisProject-ii/"/>
      <url>/2023/03/07/RedisProject-ii/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博客总结了我在学习redis中做的实战项目，实现了优惠券秒杀功能，并用分布式锁、消息队列等对其进行了优化，其中业务部分代码和注释都是我手敲的，前端代码和图片来自黑马程序员<br>虽然这个项目已经烂大街，但是对于学习项目开发和redis来说仍是一份不错的教材，感谢黑马程序员<br>课程链接：<a href="https://www.bilibili.com/video/BV1cr4y1671t?p=1&amp;vd_source=40ac0553f204ea9791dc385431e71f1c">https://www.bilibili.com/video/BV1cr4y1671t?p=1&amp;vd_source=40ac0553f204ea9791dc385431e71f1c</a></p></blockquote><h1 id="redis实现全局唯一id"><a href="#redis实现全局唯一id" class="headerlink" title="redis实现全局唯一id"></a>redis实现全局唯一id</h1><p>不使用id自增的原因：</p><ul><li>id规律性太明显，暴露信息</li><li>受单表数据量的限制</li><li>分布式系统中不能保证唯一性</li></ul><p>全局ID生成器：<br><img src="https://www.zer02.fun/img/blogpng/redis_26.webp" alt="结构"><br>ID组成部分：</p><ul><li><p>符号位：1bit,永远为0</p></li><li><p>时间戳：31bit,可以使用69年</p></li><li><p>序列号：32bit,秒内计数器，支持每秒产生2^32个不同ID</p></li><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line">    <span class="comment">//开始时间戳</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BEGIN_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1640995200L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列号的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisIdWorker</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span> &#123;</span><br><span class="line">        <span class="comment">//1.生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowSecond</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> nowSecond - BEGIN_TIMESTAMP;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.生成序列号</span></span><br><span class="line">        <span class="comment">//2.1获取当前日期，精确到天,避免超过32位上限，且便于统计</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line">        <span class="comment">//2.2自增长</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPrefix + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.拼接并返回：时间戳的值左移序列号的位数</span></span><br><span class="line">        <span class="keyword">return</span> timestamp &lt;&lt; COUNT_BITS | count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis自增策略：</p></li><li><p>每天一个key,方便统计订单量</p></li><li><p>ID构造：时间戳 + 计数器</p></li></ul><h1 id="优惠券秒杀"><a href="#优惠券秒杀" class="headerlink" title="优惠券秒杀"></a>优惠券秒杀</h1><p>下单时需要判断两点：</p><ul><li><p>秒杀是否开始或结束，如果尚未开始或已经结束则无法下单</p></li><li><p>库存是否充足，不足则无法下单</p></li><li><p>业务流程：<br><img src="https://www.zer02.fun/img/blogpng/redis_27.webp" alt="业务流程"></p></li><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller包下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IVoucherOrderService voucherOrderService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;seckill/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long voucherId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> voucherOrderService.seckillVoucher(voucherId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service.impl包下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> voucherId 优惠券id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line"><span class="comment">//获取全局唯一id</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//涉及两张表操作</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询优惠券</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    <span class="comment">//2.判断秒杀是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">//尚未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.判断秒杀是否已经结束</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>).</span><br><span class="line">            eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">//扣减失败</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">//6.1订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    order.setId(orderId);</span><br><span class="line">    <span class="comment">//6.2用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//6.3代金券id</span></span><br><span class="line">    order.setVoucherId(userId);</span><br><span class="line">    save(order);</span><br><span class="line">    <span class="comment">//7.返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h2><p>假设有100个订单，当前有200个用户同时发起请求，那么订单的余量就可能出现负数，为什么会出现这种问题？<br>假设目前只剩下一个库存：<br><img src="https://www.zer02.fun/img/blogpng/redis_28.webp" alt="业务流程"><br>只要在线程1扣减之前，有无数的线程进来查询，都会判断库存为充足，都会扣减库存，最终导致超卖。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>这种典型的线程安全问题的一个常见解决方案就是加锁：<br><img src="https://www.zer02.fun/img/blogpng/redis_29.webp" alt="比较"><br>悲观锁实现简单，但效率较低，乐观锁虽然效率高，但难点在于如何知道在判断之前查询的数据是否被修改过，常见的方法有两种：</p><ul><li>版本号法：没当数据做一次修改，版本号加1，判断版本号有没有变化即可</li><li>CAS法：我们每次更新库存时必须更新版本，那么就可以把库存当作版本即可</li></ul><h4 id="基于CAS法解决超卖问题"><a href="#基于CAS法解决超卖问题" class="headerlink" title="基于CAS法解决超卖问题"></a>基于CAS法解决超卖问题</h4><p>乐观锁的问题就是成功率太低，当有无数线程发出请求，第一个线程更新了库存后，剩下的大量线程都会拿到不匹配的数据，从而失败,我们只要将库存的判断条件改为是否大于0就可以解决这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.扣减库存</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update().</span><br><span class="line">        setSql(<span class="string">&quot;stock = stock - 1&quot;</span>).</span><br><span class="line">        <span class="comment">//判断库存在修改前后是否相等</span></span><br><span class="line">        <span class="comment">// eq(&quot;voucher_id&quot;, voucherId).eq(&quot;stock&quot;, voucher.getStock()).</span></span><br><span class="line">        eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>).</span><br><span class="line">        update();</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>超卖这样的线程安全问题，解决方案有哪些？</p><ol><li>悲观锁：添加同步锁，让线程串行执行</li></ol><ul><li>优点：简单粗暴</li><li>缺点：性能一般</li></ul><ol start="2"><li>乐观锁：不加锁，在更新时判断是否有其他线程在修改</li></ol><ul><li>优点：性能好</li><li>缺点：存在成功率低的问题</li></ul><h2 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h2><p>同一个优惠券，一个人只能下一单。</p><ul><li><p>业务流程：<br><img src="https://www.zer02.fun/img/blogpng/redis_30.webp" alt="业务流程"></p></li><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询优惠券</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    <span class="comment">//2.判断秒杀是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">//尚未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.判断秒杀是否已经结束</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//先获取锁，提交事务，再释放锁才能才能确保线程安全</span></span><br><span class="line">    <span class="keyword">synchronized</span> (userId.toString().intern()) &#123;</span><br><span class="line">        <span class="comment">//拿到事务代理对象</span></span><br><span class="line">        <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">        <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">//1.一人一单判断</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//1.1查询订单</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">            .count();</span><br><span class="line">    <span class="comment">//1.2判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">//set stock = stock-1</span></span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId) <span class="comment">//where voucher_id==voucherId</span></span><br><span class="line">            .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">//where stock &gt;0</span></span><br><span class="line">            .update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">//扣减失败</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在单机情况下，这种做法是可行的，但在集群模式下，由于多台JVM都有自己的锁，每个JVM中都会有一个线程是成功的，还是会导致线程安全问题：<br><img src="https://www.zer02.fun/img/blogpng/redis_31.webp" alt="业务流程"><br>总的来说，就是在集群&#x2F;分布式系统下，有多个JVM的存在，每个JVM都有自己的锁，导致每个锁都可以有一个线程获取，就出现了并行运行，可能出现线程安全问题。<br>解决问题的关键：<strong>让多个JVM只能使用同一把锁</strong></p></li></ul><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>一个JVM只有一个锁监视器，所以只会有一个线程获取锁，可以实现线程间的互斥。但是当有多个JVM的时候，就无法实现多个线程间的互斥，所以就要使用一个在JVM外部的，多JVM进程都可以看到的一个锁监视器：<br><img src="https://www.zer02.fun/img/blogpng/redis_32.webp" alt="业务流程"><br>通过上面的描述，分布式锁的概念就很清晰了，即：<br>满足分布式系统或集群模式下多进程可见并且互斥的锁。<br>同时它也应该满足以下几点要求：</p><ul><li>多进程可见：在JVM外部的，比如redis、MySQL</li><li>互斥：多线程同时访问，只有一个线程能拿到锁</li><li>高可用：获取锁的动作不能经常出现问题，从而影响整个业务</li><li>高性能：加锁已经影响性能，获取锁的动作必须做到高并发</li><li>安全性：考虑异常情况，比如死锁、程序异常终止导致锁未释放</li></ul><h3 id="分布式锁的实现"><a href="#分布式锁的实现" class="headerlink" title="分布式锁的实现"></a>分布式锁的实现</h3><p>分布式锁的核心是实现多进程之间的互斥，而满足这一点的方式有很多，常见的有三种：</p><table><thead><tr><th align="center">条件</th><th align="center">MySQL</th><th align="center">Redis</th><th align="center">Zookeeper</th></tr></thead><tbody><tr><td align="center">互斥</td><td align="center">利用mysql本身的互斥锁机制</td><td align="center">利用setnx这样的互斥命令</td><td align="center">利用节点的唯一性和有序性实现互斥</td></tr><tr><td align="center">高可用</td><td align="center">好</td><td align="center">好</td><td align="center">好</td></tr><tr><td align="center">高性能</td><td align="center">一般</td><td align="center">好</td><td align="center">一般</td></tr><tr><td align="center">安全性</td><td align="center">断开连接，自动释放锁</td><td align="center">利用锁超时时间，到期释放</td><td align="center">临时节点，断开连接自动释放</td></tr></tbody></table><h3 id="基于redis的分布式锁"><a href="#基于redis的分布式锁" class="headerlink" title="基于redis的分布式锁"></a>基于redis的分布式锁</h3><ul><li><p>获取锁：<br>互斥：确保只能有一个线程获取锁<br>添加锁，NX是互斥，EX是设置超时时间(把两步写成一步，保证原子性)：<br><code>SET lock thread1 NX EX 10</code></p></li><li><p>释放锁：<br>超时释放：获取锁的时候添加一个超时时间<br>释放锁，删除即可：<code>DEL key</code></p></li></ul><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>定义一个类，实现下面接口，利用redis实现分布式锁功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 尝试获取锁</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> timeoutSec 锁持有的超时时间，过期后自动释放</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> true 代表获取锁成功；false代表获取锁失败</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 释放锁</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代码实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line"><span class="comment">//业务名称，也是锁的名称</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">    <span class="comment">//获取线程标示</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">//获取锁</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">            .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//释放锁</span></span><br><span class="line">    stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：<br>注入redis,修改<code>seckillVoucher()</code>第4步以后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建锁对象</span></span><br><span class="line"><span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line"><span class="comment">//获取锁</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//判断是否获取锁成功</span></span><br><span class="line"><span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">    <span class="comment">//获取锁失败,返回错误信息或重试</span></span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;不可重复下单！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//获取锁成功</span></span><br><span class="line">    <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//释放锁</span></span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="误删问题"><a href="#误删问题" class="headerlink" title="误删问题"></a>误删问题</h3><p>线程1拿到锁，但业务阻塞时间太长，超过了我们设置的超时时间，就会自动释放锁，此时线程2就可以拿到锁，执行自己的业务。如果这期间线程1的业务执行完毕，它会执行<code>del lock</code>也就是释放锁的操作，导致把线程2的锁释放了，而这时恰好线程3来了，又能拿到一把锁，线程2和线程3都在执行自己的业务，就有可能发生线程安全问题，如图所示：<br><img src="https://www.zer02.fun/img/blogpng/redis_33.webp" alt="业务流程"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>在释放锁之前，判断锁的标识是否一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加锁的前缀</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tryLock()方法中获取线程id的代码改为</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改释放锁的业务逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取线程标识</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">//判断是否一致</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">    <span class="keyword">if</span> (threadId == id) &#123;</span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这并没有完全解决问题，判断锁标识和释放是两个动作，这两个动作之间可能产生阻塞(如GC)，就会出现问题。判断锁和释放如果满足原子性，就可以解决这个问腿。</p><h4 id="Lua脚本解决多条命令原子性问题"><a href="#Lua脚本解决多条命令原子性问题" class="headerlink" title="Lua脚本解决多条命令原子性问题"></a>Lua脚本解决多条命令原子性问题</h4><p>释放锁的业务流程：</p><ol><li>获取锁中的线程提示</li><li>判断是否与指定的标识(当前线程标识)一致</li><li>如果一致则释放锁</li><li>如果不一致则什么都不做</li></ol><p>在resources目录下创建<code>unlock.lua</code>文件：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--比较线程标识与锁中标识是否一致</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;get&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--释放锁，del key</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>在<code>unlock()</code>方法中调用脚本:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在外部提前定义好，避免频繁的IO</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">    UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">    UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//调用lua脚本</span></span><br><span class="line">    stringRedisTemplate.execute(UNLOCK_SCRIPT,</span><br><span class="line">            Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">            ID_PREFIX + Thread.currentThread().getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>基于redis的分布式锁实现思路：</p><ul><li>利用<code>set nx ex</code>获取锁，并设置过期时间，保存线程提示</li><li>释放锁时先判断线程标识是否与自己一致，一致则删除</li></ul><p>特性：</p><ul><li>利用<code>set nx</code>满足互斥</li><li>利用<code>set ex</code>保证故障时锁依然能释放，避免死锁，提高安全性</li><li>利用redis集群保证高可用性和高并发特性</li></ul><p>基于setnx实现分布式锁完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">//业务名称，也是锁的名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="comment">//添加锁的前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID() + <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    <span class="comment">//在外部提前定义好，避免频繁的IO</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">        UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">        UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标示</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//调用lua脚本</span></span><br><span class="line">        stringRedisTemplate.execute(UNLOCK_SCRIPT,</span><br><span class="line">                Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">                ID_PREFIX + Thread.currentThread().getId()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分布式锁优化-Redisson"><a href="#分布式锁优化-Redisson" class="headerlink" title="分布式锁优化(Redisson)"></a>分布式锁优化(Redisson)</h3><p>基于setnx实现的分布式锁存在以下问题：</p><ul><li>不可重入：同一个线程无法多次获取同一把锁</li><li>不可重试：获取锁只尝试一次就返回false，没有重试机制</li><li>超时释放：锁超时释放虽然可以避免死锁，但如果是业务执行耗时较长，也会导致锁释放，存在安全隐患</li><li>主从一致性：如果redis提供了主从集群，主从同步存在延迟，当主宕机时，如果从并未同步主中的数据，则会出现锁失效</li></ul><h4 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a>可重入</h4><ul><li>配置Redisson：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.10.104:6379&quot;</span>).setPassword(<span class="string">&quot;200119&quot;</span>);</span><br><span class="line">        <span class="comment">//创建redissonClient 对象</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">- 使用Redisson分布式锁：</span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testRedisson</span><span class="params">()</span> <span class="keyword">throws</span> <span class="title function_">InterrupytedException</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取锁(可重入)，指定锁名称</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;anyLock&quot;</span>);</span><br><span class="line">    <span class="comment">//尝试获取锁，参数分别是：获取锁的最大等待时间(期间会重试),锁自动释放是时间，时间单位</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//判断释放获取成功</span></span><br><span class="line">    <span class="keyword">if</span>(isLock) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行业务&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>原理：利用Hash结构代替String结构，不仅存储线程标识，还要存储可重入的次数，每获取一次锁，可重入次数加一，反之减一，由于获取锁和释放锁常常成对出现，当次数为0时，就可以大胆删除锁。</p><ul><li><p>业务逻辑：<br><img src="https://www.zer02.fun/img/blogpng/redis_34.webp" alt="业务流程"></p></li><li><p>利用lua脚本编写保证原子性：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取锁</span></span><br><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">-- 锁的自动释放时间</span></span><br><span class="line"><span class="comment">-- 判断是否存在</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;exists&#x27;</span>, key) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 不存在,获得锁</span></span><br><span class="line">    redis.call(<span class="string">&#x27;hset&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="comment">-- 设置有效期</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果 </span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">-- 锁已经存在，判断threadId是否是自己</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;hexists&#x27;</span>, key, threadId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 不存在，获取锁，重入次数加1</span></span><br><span class="line">    redis.call(<span class="string">&#x27;hincrby&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="comment">-- 设置有效期</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果 </span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">-- 代码走完，说明获取锁的不是自己，获取锁失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 释放锁</span></span><br><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">-- 锁的自动释放时间</span></span><br><span class="line"><span class="comment">-- 判断当前锁是否还是自己持有</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;hexists&#x27;</span>, key, threadId) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> null; <span class="comment">-- 如果已经不是自己，则直接返回</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">-- 是自己的锁，则重入次数减一</span></span><br><span class="line"><span class="keyword">local</span> count = redis.call(<span class="string">&#x27;hincrby&#x27;</span>, key, threadId, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">-- 判断是否重入次数已经为0</span></span><br><span class="line"><span class="keyword">if</span>(count &gt; <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 大于0说明不能释放锁，重置有效期返回</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">-- 等于0说明可以释放锁，直接删除</span></span><br><span class="line">    redis.call(<span class="string">&#x27;del&#x27;</span>, key);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="锁重试和看门狗机制"><a href="#锁重试和看门狗机制" class="headerlink" title="锁重试和看门狗机制"></a>锁重试和看门狗机制</h4><ul><li>业务流程：<br><img src="https://www.zer02.fun/img/blogpng/redis_35.webp" alt="业务流程"></li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>Redosson分布式锁原理：</p><ul><li>可重入：利用hash结构记录线程id和重入次数</li><li>可重试：利用信号量和PubSub功能实现等待、唤醒，获取锁失败的重试机制</li><li>超时释放：利用watchDog，每隔一段时间(releaseTime &#x2F; 3),重置超时时间</li></ul><p>源码讲解见：<a href="https://www.bilibili.com/video/BV1cr4y1671t/?p=67&amp;spm_id_from=pageDriver&amp;vd_source=40ac0553f204ea9791dc385431e71f1c">https://www.bilibili.com/video/BV1cr4y1671t/?p=67&amp;spm_id_from=pageDriver&amp;vd_source=40ac0553f204ea9791dc385431e71f1c</a></p><h1 id="秒杀优化"><a href="#秒杀优化" class="headerlink" title="秒杀优化"></a>秒杀优化</h1><p>秒杀的业务基本是一条龙下来，为了保证一人一单，我们又加了分布式锁，而且存在大量对数据库的写操作，其性能可想而知，所以我们改变整体的业务逻辑如下：<br><img src="https://www.zer02.fun/img/blogpng/redis_36.webp" alt="业务流程"></p><p>其难点在于如何在redis中完成判断和校验，业务流程如下：<br><img src="https://www.zer02.fun/img/blogpng/redis_37.webp" alt="业务流程"></p><h2 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h2><p>需求：</p><ol><li>新增秒杀优惠券的同时，将优惠券信息保存到redis中</li><li>基于Lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功</li><li>如果抢购成功，将优惠券id和用户id封装后存入阻塞队列</li><li>开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能</li></ol><h3 id="需求1"><a href="#需求1" class="headerlink" title="需求1"></a>需求1</h3><p>在<code>addSeckillVoucher()</code>中加入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存秒杀信息到redis中</span></span><br><span class="line">   stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());</span><br></pre></td></tr></table></figure><h3 id="需求2"><a href="#需求2" class="headerlink" title="需求2"></a>需求2</h3><p>在resource包下创建<code>seckill.lua</code>：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--1.参数列表</span></span><br><span class="line"><span class="comment">--1.1优惠券id</span></span><br><span class="line"><span class="keyword">local</span> voucherId = ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="comment">--1.2用户id</span></span><br><span class="line"><span class="keyword">local</span> userId = Argv[<span class="number">2</span>]</span><br><span class="line"><span class="comment">--1.3订单id</span></span><br><span class="line"><span class="keyword">local</span> orderId = ARGV[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">--2.数据key</span></span><br><span class="line"><span class="comment">--2.1库存key</span></span><br><span class="line"><span class="keyword">local</span> stockKey = <span class="string">&quot;seckill:stock&quot;</span> .. voucherId</span><br><span class="line"><span class="comment">--2.2订单key</span></span><br><span class="line"><span class="keyword">local</span> orderKey = <span class="string">&quot;seckill:order&quot;</span> .. voucherId</span><br><span class="line"></span><br><span class="line"><span class="comment">--3.脚本业务</span></span><br><span class="line"><span class="comment">--3.1判断库存是否充足 get stock</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--库存不足，返回1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--3.2判断用户是否下单</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--存在，说明是重复下单，返回2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--3.3扣库存incrby stockKey -1</span></span><br><span class="line">redis.call(<span class="string">&#x27;incrby&#x27;</span>, stockKey, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">--3.4下单，保存用户信息 sadd orderKey userId</span></span><br><span class="line">redis.call(<span class="string">&#x27;sadd&#x27;</span>, orderKey, userId)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>在<code>VoucherOrderServiceImpl</code>类下加载脚本:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; SECKILL_SCRIPT;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    SECKILL_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">    SECKILL_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;seckill.lua&quot;</span>));</span><br><span class="line">    SECKILL_SCRIPT.setResultType(Long.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="需求3"><a href="#需求3" class="headerlink" title="需求3"></a>需求3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建阻塞队列</span></span><br><span class="line"><span class="keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="comment">//创建线程池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">SECKILL_ORDER_EXECUTOR</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">//确保类初始化完毕就立即执行</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    SECKILL_ORDER_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">VoucherOrderHandler</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//1.获取队列中的信息</span></span><br><span class="line">                <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> orderTasks.take();</span><br><span class="line">                <span class="comment">//2.创建订单存到数据库</span></span><br><span class="line">                handleVoucherOrder(voucherOrder);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;处理订单异常&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>handleVoucherOrder()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提前准备代理对象，确保子线程能拿到</span></span><br><span class="line"><span class="keyword">private</span> IVoucherOrderService proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在seckillVoucher方法的orderTasks.add()后加</span></span><br><span class="line">proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步创建订单</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">    <span class="comment">//2.创建锁对象</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock:order:&quot;</span> + userId);</span><br><span class="line">    <span class="comment">//3.获取锁</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">    <span class="comment">//4.判断获取锁是否成功</span></span><br><span class="line">    <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">        <span class="comment">//获取锁失败，返回错误</span></span><br><span class="line">        log.error(<span class="string">&quot;不允许重复下单&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        proxy.createVoucherOrder(voucherOrder);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//3.释放锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>createVoucherOrder()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">    <span class="comment">//1.一人一单判断</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//1.1查询订单</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId())</span><br><span class="line">            .count();</span><br><span class="line">    <span class="comment">//1.2判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;用户已经购买过一次&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">//set stock = stock-1</span></span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()) <span class="comment">//where voucher_id==voucherId</span></span><br><span class="line">            .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">//where stock &gt;0</span></span><br><span class="line">            .update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">//扣减失败</span></span><br><span class="line">        log.error(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.创建订单</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="需求4"><a href="#需求4" class="headerlink" title="需求4"></a>需求4</h3><p>实现秒杀业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">//1.1获取用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//1.2执行lua脚本</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">            SECKILL_SCRIPT,</span><br><span class="line">            Collections.emptyList(),</span><br><span class="line">            voucherId.toString(), userId.toString()</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//2.判断执行结果是否为0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//2.1不为0，没有购买资格</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(r == <span class="number">1</span> ? <span class="string">&quot;库存不足&quot;</span> : <span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.2 为0，有购买资格，把下单信息保存到阻塞队列中</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">//2.3订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="comment">//2.4保存用户id</span></span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">//2.5优惠券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    <span class="comment">//2.6放入阻塞队列</span></span><br><span class="line">    orderTasks.add(voucherOrder);</span><br><span class="line">    <span class="comment">//3.获取代理对象（确保事务Transactional生效，保证createVoucherOrder 提交完事务之后再释放锁）</span></span><br><span class="line">    proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="comment">//4.返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>秒杀业务的优化思路是什么？</p><ol><li>先利用redis完后库存余量、一人一单判断，完成抢单业务</li><li>再将下单业务放入阻塞队列，利用独立线程异步下单</li></ol><p>基于阻塞队列的异步秒杀存在哪些问题？</p><ul><li>内存限制问题：如果队列存满，其他订单就无法存入</li><li>数据安全问题：如果服务突然宕机，内存中的订单信息都会丢失</li></ul><h2 id="消息队列实现异步秒杀"><a href="#消息队列实现异步秒杀" class="headerlink" title="消息队列实现异步秒杀"></a>消息队列实现异步秒杀</h2><ul><li>消息队列：存储和管理信息，也被称为消息代理(Message Broker)</li><li>生产者：发送消息到消息队列</li><li>消费者：从消息队列中获取消息并处理消息</li></ul><p>redis提供了三种不同的方式实现消息队列：</p><ul><li>list结构：基于List结构模拟消息队列</li><li>PubSub：基于点对点消息模型</li><li>Stream：比较完善的消息队列模型</li></ul><h3 id="基于List的消息队列"><a href="#基于List的消息队列" class="headerlink" title="基于List的消息队列"></a>基于List的消息队列</h3><p>Redis的list数据结构是一个双向链表，很容易模拟出队列效果(尾入头出)。可以利用<code>LPUSH</code>结合<code>RPOP</code>，或者<code>RPUSH</code>结合<code>LPOP</code>来实现，当队列中没有消息时，<code>LPOP</code>和<code>RPOP</code>并不会阻塞，而是返回<code>NULL</code>，因此这里使用<strong>BRPOP</strong>或<strong>BLPOP</strong>实现阻塞效果。</p><p>优点：</p><ul><li>利用redis存储，不受限于JVM内存上限</li><li>基于redis的持久化机制，数据安全性有保障</li><li>可以满足消息有序性</li></ul><p>缺点：</p><ul><li>无法避免消息丢失</li><li>只支持单消费者</li></ul><h3 id="基于PubSub的消息队列"><a href="#基于PubSub的消息队列" class="headerlink" title="基于PubSub的消息队列"></a>基于PubSub的消息队列</h3><p>**PubSub(发布订阅)**是Redis2.0版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。</p><ul><li>SUBSCRIBE channel[channel]:订阅一个或多个频道</li><li>PUBLISH channel msg:向一个频道发送消息</li><li>PSUBSCRIBE pattern[pattern]:订阅与pattern格式匹配的所有频道</li></ul><p>优点：</p><ul><li>支持发布订阅模式，支持多生产、多消费</li></ul><p>缺点：</p><ul><li>不支持数据持久化</li><li>无法避免消息丢失</li><li>消息堆积有上限，超出时数据丢失。</li></ul><h3 id="基于Stream的消息队列"><a href="#基于Stream的消息队列" class="headerlink" title="基于Stream的消息队列"></a>基于Stream的消息队列</h3><p>Stream类型消息队列的XREAD命令特点：</p><ul><li>消息可回溯</li><li>一个消息可以被多个消费者读取</li><li>可以阻塞读取</li><li>有消息漏读的风险</li></ul><p>消费者组(Consumer Group):将多个消费者划分到一个组中，监听同一个队列。具备下列特点：<br><img src="https://www.zer02.fun/img/blogpng/redis_38.webp" alt="项目结构"></p><p>创建消费者组：<br><code>XGROUP CREATE key groupName ID [MKSTREAM]</code></p><ul><li>key:队列名称</li><li>groupName:消费者组名称</li><li>ID:起始ID标识，$代表队列中最后一个消息，0代表第一个消息</li><li>MKSTREAM:队列不存在时自动创建</li></ul><p>从消费者组读取消息：<br><code>XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]</code></p><ul><li>group:消费组名称</li><li>consumer:消费者名称，如果不存在，自动创建</li><li>count:本次查询最大数量</li><li>BLOCK milliseconds:当没有消息时最长等待时间</li><li>NOACK:无须手动ACK，获取到消息后自动确认</li><li>STREAMS key:指定队列名称</li><li>ID:获取消息的起始ID：<ul><li>“&gt;”:从下一个未消费的消息开始</li><li>其它:根据指定id从pending-list中获取已消费但未确认的消息，例如0，是从pending-list中的第一个消息开始</li></ul></li></ul><p>基本思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">//尝试监听队列，使用阻塞模式，最长等待2000毫秒</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">msg</span> <span class="operator">=</span> redis.call(<span class="string">&quot;XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(msg == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//处理消息，完成后一定要ACK</span></span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">msg</span> <span class="operator">=</span> redis.call(<span class="string">&quot;XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(msg == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//说明有异常消息，再次处理</span></span><br><span class="line">                handleMessage(msg);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                <span class="comment">//再次出现异常，记录日志，继续循环</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>STREAM类型消息队列的XREADGROUP命令特点：</p><ul><li>消息可回溯</li><li>可以多消费者争夺消息，加快消费速度</li><li>可以阻塞读取</li><li>没有消息漏读的风险</li><li>有消息确认机制，保证消息至少被消费一次</li></ul><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">功能</th><th align="center">List</th><th align="center">PubSub</th><th align="center">Stream</th></tr></thead><tbody><tr><td align="center">消息持久化</td><td align="center">支持</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">阻塞读取</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">消息堆积处理</td><td align="center">受限于内存空间，可以利用多消费者加快处理</td><td align="center">受限于消费者缓冲区</td><td align="center">受限于消息队列长度，可以利用消费者组提高消费速度，减少堆积</td></tr><tr><td align="center">消息确认机制</td><td align="center">不支持</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">消息回溯</td><td align="center">不支持</td><td align="center">不支持</td><td align="center">支持</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis实战项目(一)</title>
      <link href="/2023/03/01/RedisProject/"/>
      <url>/2023/03/01/RedisProject/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博客总结了我在学习redis中做的实战项目，实现了短信登录和添加缓存，并对缓存使用时出现的各种问题做了总结，其中业务部分代码和注释都是我手敲的，前端代码和图片来自黑马程序员<br>虽然这个项目已经烂大街，但是对于学习项目开发和redis来说仍是一份不错的教材，感谢黑马程序员<br>课程链接：<a href="https://www.bilibili.com/video/BV1cr4y1671t?p=1&amp;vd_source=40ac0553f204ea9791dc385431e71f1c">https://www.bilibili.com/video/BV1cr4y1671t?p=1&amp;vd_source=40ac0553f204ea9791dc385431e71f1c</a></p></blockquote><p>项目结构：<br><img src="https://www.zer02.fun/img/blogpng/redis_01.webp" alt="项目结构"></p><h1 id="短信登录功能"><a href="#短信登录功能" class="headerlink" title="短信登录功能"></a>短信登录功能</h1><h2 id="基于session实现发送手机验证码"><a href="#基于session实现发送手机验证码" class="headerlink" title="基于session实现发送手机验证码"></a>基于session实现发送手机验证码</h2><ul><li><p>实现流程：<br><img src="https://www.zer02.fun/img/blogpng/redis_02.webp" alt="实现流程"></p></li><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Controller包下</span></span><br><span class="line"><span class="comment"> * 发送手机验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 发送短信验证码并保存验证码</span></span><br><span class="line">    <span class="keyword">return</span> userService.sendCode(phone, session);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Service包下的发送手机验证码接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> phone   验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session 将结果保存到session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回成功或失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务代码 service.impl包下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> phone   验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session 将结果保存到session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回成功或失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.校验手机号</span></span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">        <span class="comment">//2.如果不符合，返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.符合，生成验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">//4.保存验证码到session</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">    <span class="comment">//5.发送验证码</span></span><br><span class="line">    log.debug(<span class="string">&quot;发送验证码成功：&#123;&#125;&quot;</span>, code);</span><br><span class="line">    <span class="comment">//6.返回ok</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="实现短信登录和注册"><a href="#实现短信登录和注册" class="headerlink" title="实现短信登录和注册"></a>实现短信登录和注册</h2><ul><li>实现流程：<br><img src="https://www.zer02.fun/img/blogpng/redis_03.webp" alt="实现流程"></li><li>代码实现：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Controller包下</span></span><br><span class="line"><span class="comment"> * 登录功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginForm 登录参数，包含手机号、验证码；或者手机号、密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//  实现登录功能</span></span><br><span class="line">    <span class="keyword">return</span> userService.login(loginForm, session);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Service包下的登录接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginForm 登陆参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session 保存结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回成功或失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务代码 service.impl包下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginForm 登陆参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session 保存结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//1.校验手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.校验验证码</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">cacheCode</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">    <span class="keyword">if</span> (cacheCode == <span class="literal">null</span> || !cacheCode.toString().equals(code)) &#123;</span><br><span class="line">        <span class="comment">//3.不一致，直接报错</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.一致，根据手机号查询用户(Mybatis-plus)</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line">    <span class="comment">//5.判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//6.不存在，创建新用户并保存</span></span><br><span class="line">        user = createUserWithPhone(phone);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7.保存用户信息到session</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更具手机号创建用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> phone 手机号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setPhone(phone);</span><br><span class="line">    user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(<span class="number">10</span>));</span><br><span class="line">    <span class="comment">//2.保存用户</span></span><br><span class="line">    save(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="实现登录校验拦截器"><a href="#实现登录校验拦截器" class="headerlink" title="实现登录校验拦截器"></a>实现登录校验拦截器</h2><ul><li><p>实现流程<br><img src="https://www.zer02.fun/img/blogpng/redis_04.webp" alt="实现流程"></p></li><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * utils包下</span></span><br><span class="line"><span class="comment"> * 拦截器功能实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2.获取session中的用户</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//4.不存在，拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.存在，保存到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser((User) user);</span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//移除用户，避免内存泄漏</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Config包下</span></span><br><span class="line"><span class="comment"> * 拦截器生效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>()).excludePathPatterns(</span><br><span class="line">                <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/blog/log&quot;</span>,</span><br><span class="line">                <span class="string">&quot;shop/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;shop-type/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;voucher/**&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Controller包下</span></span><br><span class="line"><span class="comment">     * 获取当前登录状态并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功或失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/me&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">me</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//  获取当前登录的用户并返回</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">        <span class="keyword">return</span> Result.ok(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="隐藏用户敏感信息"><a href="#隐藏用户敏感信息" class="headerlink" title="隐藏用户敏感信息"></a>隐藏用户敏感信息</h3><p>由于之前的业务逻辑是将获取到的<code>User</code>对象一股脑丢进<code>session</code>中，一方面存入多余的信息会增加服务器负担，另一方面也会有泄露风险，如图所示：<br><img src="https://www.zer02.fun/img/blogpng/redis_05.webp" alt="前端接收参数"><br>所以从一开始就不应该存入用户的完整信息，定义<code>UserDTO类</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DTO包下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中凡是涉及<code>User</code>对象的都应该转为<code>UserDTO</code>。</p><ul><li>优化后效果：<br><img src="https://www.zer02.fun/img/blogpng/redis_06.webp" alt="效果"><br>这样传到前端的数据就不在携带敏感信息，因为数据量的减少从而降低了内存的压力。</li></ul><h3 id="关于ThreadLocal"><a href="#关于ThreadLocal" class="headerlink" title="关于ThreadLocal"></a>关于ThreadLocal</h3><p>-TheadLocal数据结构：<br><img src="https://www.zer02.fun/img/blogpng/redis_07.webp" alt="结构图"></p><ul><li>Thread类有一个类型为<code>ThreadLocal.ThreadLocalMap</code>的实例变量<code>threadLocals</code>，也就是说每个线程有一个自己的<code>ThreadLocalMap</code>。</li><li><code>ThreadLocalMap</code>有自己的独立实现，可以简单地将它的<code>key</code>视作<code>ThreadLocal</code>，<code>value</code>为代码中放入的值（实际上<code>key</code>并不是<code>ThreadLocal</code>本身，而是它的一个弱引用）。</li><li>每个线程在往<code>ThreadLocal</code>里放值的时候，都会往自己的<code>ThreadLocalMap</code>里存，读也是以<code>ThreadLocal</code>作为引用，在自己的<code>map</code>里找对应的<code>key</code>，从而实现了<strong>线程隔离</strong>。</li><li><code>ThreadLocalMap</code>有点类似<code>HashMap</code>的结构，只是<code>HashMap</code>是由数组+链表&#x2F;红黑树实现的，而<code>ThreadLocalMap</code>中并没有链表结构。</li></ul><p><strong>由于ThreadLocal中的key是弱引用，所以在gc时会被回收，而value是强引用则不会，如果不做任何措施，value就永远无法被gc,这时就有可能出现内存泄露问题，这就是我们为什么在拦截器的afterCompletion()方法中手动removeUser()的原因</strong></p><p>代码中的<code>UserHolder</code>类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserDTO&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(UserDTO user)</span> &#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDTO <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span> &#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用redis代替session"><a href="#使用redis代替session" class="headerlink" title="使用redis代替session"></a>使用redis代替session</h2><h3 id="session共享问题"><a href="#session共享问题" class="headerlink" title="session共享问题"></a>session共享问题</h3><p>当将来数据量变大，我们肯定需要配置多台Tomcat来进行负载均衡，而此时session的弊端就显现了出来，由于每个Tomcat都会有自己的sessionId,所以当另一台Tomcat想要获取数据时就拿不到，从而降低用户体验，如图所示：<br><img src="https://www.zer02.fun/img/blogpng/redis_08.webp" alt="项目架构"><br>想要解决这个问题，就必须满足三个条件：</p><ul><li>数据共享：解决数据丢失问题</li><li>内存存储：保证读写效率以应对高并发需求</li><li>key-value结构：存储的数据应该间接且方便维护<br>综上，Redis闪亮登场！终于到了我学习这个项目的主题！</li></ul><p>整体业务流程：<br><img src="https://www.zer02.fun/img/blogpng/redis_09.webp" alt="业务流程"><br><img src="https://www.zer02.fun/img/blogpng/redis_10.webp" alt="业务流程"></p><h3 id="基于redis实现短信登录"><a href="#基于redis实现短信登录" class="headerlink" title="基于redis实现短信登录"></a>基于redis实现短信登录</h3><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//注入API</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改发送验证码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.校验手机号</span></span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">//2.如果不符合，返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.符合，生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//4.不再存入session，而是保存验证码到redis,设置有效时间2分钟</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//5.发送验证码</span></span><br><span class="line">        log.debug(<span class="string">&quot;发送验证码成功：&#123;&#125;&quot;</span>, code);</span><br><span class="line">        <span class="comment">//6.返回ok</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改短信登录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">//1.校验手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">//2.如果不符合，返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.改为从redis中获取验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cacheCode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">        <span class="keyword">if</span> (cacheCode == <span class="literal">null</span> || !cacheCode.equals(code)) &#123;</span><br><span class="line">            <span class="comment">//不一致，直接报错</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.一致，根据手机号查询用户(Mybatis-plus)</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line">        <span class="comment">//5.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//6.不存在，创建新用户并保存</span></span><br><span class="line">            user = createUserWithPhone(phone);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 7.保存用户到redis</span></span><br><span class="line"><span class="comment">         * 使用hash存储，支持单个字段查询，减少内存消耗</span></span><br><span class="line"><span class="comment">         * 不再使用手机号，而是使用token做为key,避免传入前端的数据携带敏感信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//7.1生成token，作为登陆令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//7.2将User对象转为hash存储</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">        <span class="comment">//将所有字段值转为字符串</span></span><br><span class="line">        Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),</span><br><span class="line">                CopyOptions.create().</span><br><span class="line">                        setIgnoreNullValue(<span class="literal">true</span>).</span><br><span class="line">                        setFieldValueEditor((filedName, fieldValue) -&gt; fieldValue.toString()));</span><br><span class="line">        <span class="comment">//7.3存储,给token设置有效期，避免内存占用过多，参考session为30分钟</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">        stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);</span><br><span class="line">        <span class="comment">//7.4设置token有效期,但session会自动刷新有效期，而redis只要过了有效期就自动踢出用户</span></span><br><span class="line">        <span class="comment">//在登录拦截器设置更新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//8.返回token</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * utils包下</span></span><br><span class="line"><span class="comment"> * 更改拦截器，设置token有效期</span></span><br><span class="line"><span class="comment"> * 注意：不能使用注解注入，因为此类对象是我们手动创建的，而不是spring创建的</span></span><br><span class="line"><span class="comment"> * 所以使用构造函数注入,但config包下的MvcConfig是由spring构建的，注入后放入构造函数即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.改为获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">//不存在，拦截，返回401状态码</span></span><br><span class="line">        response.setStatus(<span class="number">401</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.改为基于token从redis中获取用户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisConstants.LOGIN_USER_KEY;</span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line">        <span class="comment">//3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//4.不存在，拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.将查询到的哈希数据转为UserDTO对象</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//6.存在，保存到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">//7.刷新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(key, RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//8.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//移除用户，避免内存泄漏</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登录拦截器优化"><a href="#登录拦截器优化" class="headerlink" title="登录拦截器优化"></a>登录拦截器优化</h3><p>我们在拦截器中写的更新token操作并不能完全达到目的，因为目前的登录拦截器只拦截需要登录的路径，反之，当用户浏览不用登录的页面如首页、商铺详情页时就不会触发拦截器，从而导致用户明明一直活跃却还是被踢出，为了解决这个问题，我们使用拦截器链：<br><img src="https://www.zer02.fun/img/blogpng/redis_11.webp" alt="业务流程"></p><ul><li>第一个拦截器拦截所有页面，只放行，确保用户所有操作都会触发拦截器</li><li>第二个拦截器做实际的拦截操作</li></ul><p>代码如下：<br>在utils包下创建<code>RefreshTokenInterceptor</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截所有请求，只放行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshTokenInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取请求头的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.基于token获取redis用户信息</span></span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(LOGIN_USER_KEY + token);</span><br><span class="line">        <span class="comment">//3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.将查询到的hash数据转为UserDTO对象</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//6.用户存在，保存用户信息到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">//7.刷新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(LOGIN_USER_KEY + token, LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//8.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断要不要拦截</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.判断是否需要拦截（ThreadLocal中是否有用户）</span></span><br><span class="line">        <span class="keyword">if</span> (UserHolder.getUser() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//2.没有，需要拦截，设置状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.有用户，放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Config包下</span></span><br><span class="line"><span class="comment"> * 配置拦截器并设置优先级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>()).excludePathPatterns(</span><br><span class="line">                <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/blog/log&quot;</span>,</span><br><span class="line">                <span class="string">&quot;shop/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;shop-type/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;voucher/**&quot;</span></span><br><span class="line">        ).order(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//token刷新的拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">RefreshTokenInterceptor</span>(stringRedisTemplate)).</span><br><span class="line">                addPathPatterns(<span class="string">&quot;/**&quot;</span>).order(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="添加缓存"><a href="#添加缓存" class="headerlink" title="添加缓存"></a>添加缓存</h1><p>缓存就是数据交换的缓冲区，时存储数据的临时地方，用于提升读写效率。<br>优点：</p><ul><li>降低后端负载：请求进来直接查缓存，不用再查数据库</li><li>提高读写效率，降低响应时间：使用redis缓存直接在内存层面读写，省去磁盘IO的时间</li></ul><p>缺点：</p><ul><li>数据的一致性：缓存和数据库中的数据可能不一致</li><li>代码维护：为了解决一致性问题，需要增加业务代码</li><li>运维：为了解决如缓存雪崩等问题需要搭建集群从而提高运维成本</li></ul><p>缓存工作模型如下：<br><img src="https://www.zer02.fun/img/blogpng/redis_12.webp" alt="业务流程"></p><ol><li>客户端发送请求到缓存，如果命中则直接返回</li><li>否则就查数据库，将结果返回，并把数据写入缓存</li></ol><h2 id="添加商户缓存"><a href="#添加商户缓存" class="headerlink" title="添加商户缓存"></a>添加商户缓存</h2><ul><li><p>实现流程：<br><img src="https://www.zer02.fun/img/blogpng/redis_13.webp" alt="业务流程"></p></li><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Controller包下</span></span><br><span class="line"><span class="comment"> * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> shopService.queryById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service.impl包下</span></span><br><span class="line">Result <span class="title function_">queryById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过id查询商铺信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 商铺信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(id);</span><br><span class="line">    <span class="comment">//2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="comment">//3.存在，直接返回</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.存在，把数据写入redis</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop));</span><br><span class="line">    <span class="comment">//7.返回</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><p>由于缓存和数据库中的数据存在一致性问题，用户可能会查到旧数据，所以应该选择合适的缓存更新策略，这里选择主动更新策略，如图所示：<br><img src="https://www.zer02.fun/img/blogpng/redis_14.webp" alt="缓存更新策略"><br>业务场景：</p><ul><li>低一致性需求：使用内存淘汰机制，如店铺类型的查询缓存</li><li>高一致性需求：主动更新，并以超时时间作为兜底方案。如店铺详情查询的缓存。</li></ul><p>主动更新策略有以下三种方式：<br><img src="https://www.zer02.fun/img/blogpng/redis_15.webp" alt="主动更新策略"><br>这里选择第一种，因为第一种虽然需要我们自己编码，但可控性更高，而第二种虽然简化了一些，但对维护成本有较高要求，而第三种在异步存储之前还是有可能生一致性问题。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>删除缓存还是更新缓存？</strong></p><ul><li>更新缓存：每次更新数据库都要更新缓存，无效写操作较多</li><li>删除缓存：更新数据库时让缓存失效，查询时才更新缓存</li></ul><p><strong>如何保证缓存与数据库操作同时成功或失败？</strong></p><ul><li>单体系统：由于缓存和数据库在一个项目当中，所以将缓存与数据库放在一个事务中</li><li>分布式系统：利用TCC等分布式事务方案</li></ul><p><strong>先操作缓存还是先操作数据库？</strong><br>仅对异常情况来说，如果先删缓存再擦做数据库，如图所示：<br><img src="https://www.zer02.fun/img/blogpng/redis_16.webp" alt="先缓存再数据库"><br>在数据规模较大的前提下这种情况是很有可能发生的，因为redis是基于内存的，它远比需要进行磁盘IO的数据库快。<br>而先操作数据库，再删缓存如下：<br><img src="https://www.zer02.fun/img/blogpng/redis_17.webp" alt="先数据库再缓存"><br>由图可见，在内存查询中途插上一次磁盘IO，相对于前者来说发生的概率是较低的，所以我们选择先操作数据库再删缓存。</p><h3 id="业务中添加策略"><a href="#业务中添加策略" class="headerlink" title="业务中添加策略"></a>业务中添加策略</h3><p>给查询商铺的缓存添加超时剔除和主动更新策略：<br>修改ShopController中的业务逻辑，满足以下条件：</p><ul><li>根据id查询店铺时，如果缓存未命中，则查询数据库，写入缓存，设置超时时间</li><li>根据id修改店铺时，先操作数据库，再删除缓存</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将queryById方法中的第六步改为以下代码</span></span><br><span class="line"><span class="comment">//6.存在，把数据写入redis,添加过期时间</span></span><br><span class="line">stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Controller包下</span></span><br><span class="line"><span class="comment">     * 更新商铺信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shop 商铺数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateShop</span><span class="params">(<span class="meta">@RequestBody</span> Shop shop)</span> &#123;</span><br><span class="line">        <span class="comment">// 写入数据库</span></span><br><span class="line">        shopService.update(shop);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//service.impl包下</span></span><br><span class="line">    Result <span class="title function_">update</span><span class="params">(Shop shop)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先操作数据库再删缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shop 店铺信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shop.getId();</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺id 不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.更新数据库</span></span><br><span class="line">        updateById(shop);</span><br><span class="line">        <span class="comment">//2.删除缓存</span></span><br><span class="line">        stringRedisTemplate.delete(CACHE_SHOP_KEY + id);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>缓存穿透是指客户端请求的数据再缓存和数据库中都不存在，这样缓存永远都不会生效，每次请求都会打到数据库。</strong></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="缓存空对象"><a href="#缓存空对象" class="headerlink" title="缓存空对象"></a>缓存空对象</h4><p>事先把空值存入数据库，当发送一个缓存和数据库都不存在的请求时，直接把数据库中的空值返回，可以解决请求变化不频繁的情况，如图所示：<br><img src="https://www.zer02.fun/img/blogpng/redis_18.webp" alt="缓存无效key"></p><ul><li><p>优点：<br>实现简单，便于维护</p></li><li><p>缺点：</p></li></ul><ol><li>额外的内存消耗：当黑客恶意攻击时，每次构建不同的请求key,会导致redis中缓存大量的无效key<br>解决方案：可以对无效key设置一个较短的TTL起到一定的保护作用</li><li>可能造成短期的不一致：如果用户请求了一个刚好不存在的id,那么redis中会缓存null值，此时我们给商铺插入一条数据，那么用户再查也依旧是null，只有当TTL过期才会更新<br>解决方案：尽量将TTL的时间设置的短一些，或者在数据库插入数据时主动覆盖redis中的null值</li></ol><h4 id="布隆过滤"><a href="#布隆过滤" class="headerlink" title="布隆过滤"></a>布隆过滤</h4><p>在客户端和redis之间再加一层过滤器，其他逻辑不变，如图所示：<br><img src="https://www.zer02.fun/img/blogpng/redis_19.webp" alt="布隆过滤"><br><strong>布隆过滤器可能会误判，如果它说某个元素不存在，那么它一定不存在，但它说存在，那么这个元素不一定存在。</strong><br>要解释这种情况，需要理解布隆过滤器的工作原理：</p><ol><li>使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。</li><li>根据得到的哈希值，在位数组中把对应下标的值置为 1。</li></ol><p>判断元素是否存在的操作：</p><ol><li>对给定元素再次进行相同的哈希计算；</li><li>得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。</li></ol><p>当不同的字符串哈希出来的位置相同，就会出现误判，发生的概率取决于数组大小和哈希函数的优劣</p><ul><li>优点：<br>内存占用小，没有多余key：不用缓存多余的空数据</li><li>缺点：</li></ul><ol><li>实现复杂：可以使用redis自带的<code>BitMap</code>简化开发</li><li>存在误判可能</li></ol><h3 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h3><p>使用缓存空对象的方式解决查询商铺页面的缓存穿透问题。</p><ul><li>业务流程：<br><img src="https://www.zer02.fun/img/blogpng/redis_20.webp" alt="业务流程"><br>两个修改：</li></ul><ol><li>从redis中查询缓存时，判断是否为空</li><li>商铺不存在时，将空值写入redis</li></ol><ul><li>代码实现：<br>修改<code>queryById()</code>中的第2步和第5步：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.判断是否存在</span></span><br><span class="line"><span class="comment">//只有当shopJson有真实数据才返回true</span></span><br><span class="line"><span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">    <span class="comment">//3.存在，直接返回</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.不存在，返回错误,并且将空值写入redis</span></span><br><span class="line"><span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>缓存穿透产生的原因是什么？</p><ul><li>用户请求的数据在缓存和数据库中都不存在，不断发起这样的请求会给数据库带来巨大压力</li></ul><p>缓存穿透的解决方案有哪些？<br>被动方案：</p><ul><li>缓存null值</li><li>布隆过滤</li></ul><p>主动方案：</p><ul><li>增加id复杂度，避免被猜测id规律</li><li>做好数据的基础格式校验</li><li>加强用户权限校验</li><li>做好热点参数限流</li></ul><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p><strong>缓存雪崩是指同一时间大量的缓存key同时失效或者redis服务宕机，导致大量请求到数据库，带来巨大压力。</strong></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>给不同的key的TTL添加随机值：<br>使批量缓存的数据分布在一个时间段内失效，而不是同时失效，缓解数据库压力。</li><li>利用redis集群提高服务的可用性：<br>哨兵机制可以实现服务的监控，如果主宕机，哨兵可以自动从从机选出来一个替代原来的主，而且主从还可以实现一种数据同步，如果主宕机，从上面还会有数据，避免数据丢失。</li><li>给缓存业务添加降级和限流策略：<br>当redis出现故障时，及时做服务降级，比如快速失败、拒绝服务，而不是继续压入数据库，牺牲部分服务，从而保护数据库的健康。</li><li>给业务添加多级缓存：<br>在多个层面建立缓存，比如在Nginx和JVM中都建立缓存，如果redis崩了，还有其他缓存可以弥补</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>缓存击穿问题也叫热点key问题，就是一个被<strong>高并发访问</strong>并且<strong>缓存重建业务较为复杂</strong>的key突然失效了，无数的请求会在瞬间给数据库带来巨大冲击。</p><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p>当很多线程同时查询缓存且未命中，只有一个线程能获取锁，在把数据重新写入redis之前，其他线程全部等待，如图所示：<br><img src="https://www.zer02.fun/img/blogpng/redis_21.webp" alt="业务流程"><br>因为有大量的线程在等待释放锁，因此这种方案的效率比较低。</p><h4 id="逻辑过期"><a href="#逻辑过期" class="headerlink" title="逻辑过期"></a>逻辑过期</h4><p>之前产生问题的原因是我们设置了TTL，导致缓存突然失效，那现在不设置TTL了，我们需要在存储数据时设置<code>expire</code>(过期时间，并不是TTL，而是在当前时间基础上再加上过期时间)，理论上它是永不过期的，一般在双11等活动前预热完成。<br>它的业务流程如图所示：<br><img src="https://www.zer02.fun/img/blogpng/redis_22.webp" alt="业务流程"><br>为了避免线程等待时间过长，缓存重构交给独立线程去做，线程1和线程三只要发现逻辑过期，返回旧数据即可，直到线程4进来，自然可以获取更新后的数据。</p><h4 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a>方案对比</h4><p><img src="https://www.zer02.fun/img/blogpng/redis_23.webp" alt="业务流程"><br>根据业务需求，在保证可用性和一致性之间做出抉择。</p><h3 id="项目实现-1"><a href="#项目实现-1" class="headerlink" title="项目实现"></a>项目实现</h3><h4 id="基于互斥锁解决缓存击穿"><a href="#基于互斥锁解决缓存击穿" class="headerlink" title="基于互斥锁解决缓存击穿"></a>基于互斥锁解决缓存击穿</h4><p>修改根据id查询商铺的业务，基于互斥锁方式解决缓存击穿问题。</p><ul><li><p>业务流程<br><img src="https://www.zer02.fun/img/blogpng/redis_24.webp" alt="业务流程"><br>获取锁：<code>setnx key value</code><br>释放锁：<code>del key</code></p></li><li><p>互斥锁代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用互斥锁解决缓存击穿</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 店铺id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 店铺信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(id);</span><br><span class="line">    <span class="comment">//2.判断是否存在</span></span><br><span class="line">    <span class="comment">//只有当shopJson有真实数据才返回true</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="comment">//3.存在，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断命中的是否为空值</span></span><br><span class="line">    <span class="keyword">if</span> (shopJson == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.实现缓存重建</span></span><br><span class="line">    <span class="comment">//4.1获取互斥锁</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">//4.2是否获取成功</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="comment">//4.3失败，休眠并重试</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.4成功，根据id查询数据库</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//模拟重建的演示</span></span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">//5.不存在，返回错误,并且将空值写入redis</span></span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.存在，把数据写入redis,添加过期时间</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//8.返回</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//7.释放互斥锁</span></span><br><span class="line">        unlock(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将缓存穿透，获取锁，释放锁封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用互斥锁解决缓存击穿</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 店铺id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 店铺信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(id);</span><br><span class="line">    <span class="comment">//2.判断是否存在</span></span><br><span class="line">    <span class="comment">//只有当shopJson有真实数据才返回true</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="comment">//3.存在，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断命中的是否为空值</span></span><br><span class="line">    <span class="keyword">if</span> (shopJson == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.实现缓存重建</span></span><br><span class="line">    <span class="comment">//4.1获取互斥锁</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">//4.2是否获取成功</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="comment">//4.3失败，休眠并重试</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.4成功，根据id查询数据库</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//模拟重建的演示</span></span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">//5.不存在，返回错误,并且将空值写入redis</span></span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.存在，把数据写入redis,添加过期时间</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//8.返回</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//7.释放互斥锁</span></span><br><span class="line">        unlock(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尝试获取锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否获取成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//不要直接返回，可能出现空指针</span></span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用主方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过id查询商铺信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 商铺信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//缓存穿透</span></span><br><span class="line">    <span class="comment">//Shop shop = queryWithPassThrough(id);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//互斥锁解决缓存击穿</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> queryWithMutex(id);</span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="基于逻辑过期解决缓存击穿"><a href="#基于逻辑过期解决缓存击穿" class="headerlink" title="基于逻辑过期解决缓存击穿"></a>基于逻辑过期解决缓存击穿</h4><p>修改根据id查询商铺的业务，基于逻辑过期方式解决缓存击穿问题。</p><ul><li>业务流程<br><img src="https://www.zer02.fun/img/blogpng/redis_25.webp" alt="业务流程"></li><li>代码实现：</li></ul><ol><li><p>在utils包下创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在实现类封装方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装店铺信息逻辑过期时间</span></span><br><span class="line"><span class="comment"> * 没有添加TTL，key可以视为永久有效</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 店铺id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expireSeconds 逻辑过期时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id, <span class="type">long</span> expireSeconds)</span>&#123;</span><br><span class="line">    <span class="comment">//1.查询店铺数据</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//2.封装成逻辑过期</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));</span><br><span class="line">    <span class="comment">//3.写入redis</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>逻辑过期主要业务代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用逻辑过期解决缓存击穿</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithLogicalExpire</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(id);</span><br><span class="line">    <span class="comment">//2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(shopJson)) &#123;</span><br><span class="line">        <span class="comment">//3.未命中，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.命中，json反序列化为对象</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">    <span class="comment">//5.判断是否过期</span></span><br><span class="line">    <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">//5.1未过期，直接返回店铺信息</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.2已过期，缓存重建</span></span><br><span class="line">    <span class="comment">//6.缓存重建</span></span><br><span class="line">    <span class="comment">//6.1获取互斥锁</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">    <span class="comment">//6.2判断是否获取成功</span></span><br><span class="line">    <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">        <span class="comment">//6.3成功，开启独立线程实现缓存重建</span></span><br><span class="line">        CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//重建</span></span><br><span class="line">                <span class="built_in">this</span>.saveShop2Redis(id, CACHE_SHOP_TTL);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                unlock(lockKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7.返回过期的商铺信息</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis实战项目-数据库设计</title>
      <link href="/2023/02/22/RedisProject-sql/"/>
      <url>/2023/02/22/RedisProject-sql/</url>
      
        <content type="html"><![CDATA[<h1 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">11</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机号码&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密码，加密存储&#x27;</span>,</span><br><span class="line">  `nick_name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;昵称，默认是用户id&#x27;</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;人物头像&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `uniqe_key_phone`(`phone`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1010</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br></pre></td></tr></table></figure><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;13686869696&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;小鱼同学&#x27;</span>, <span class="string">&#x27;/imgs/blogs/blog1.jpg&#x27;</span>, <span class="string">&#x27;2021-12-24 10:27:19&#x27;</span>, <span class="string">&#x27;2022-01-11 16:04:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;13838411438&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;可可今天不吃肉&#x27;</span>, <span class="string">&#x27;/imgs/icons/kkjtbcr.jpg&#x27;</span>, <span class="string">&#x27;2021-12-24 15:14:39&#x27;</span>, <span class="string">&#x27;2021-12-28 19:58:04&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;13456789011&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_slxaxy2au9f3tanffaxr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-01-07 12:07:53&#x27;</span>, <span class="string">&#x27;2022-01-07 12:07:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;13456789001&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;可爱多&#x27;</span>, <span class="string">&#x27;/imgs/icons/user5-icon.png&#x27;</span>, <span class="string">&#x27;2022-01-07 16:11:33&#x27;</span>, <span class="string">&#x27;2022-03-11 09:09:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;13456762069&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_xn5wr3hpsv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-07 17:54:10&#x27;</span>, <span class="string">&#x27;2022-02-07 17:54:10&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;13688668889&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_88arndojw9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;13688668890&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qcfr2k1lmi&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;13688668891&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ffsk4hli07&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;13688668892&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_r62q62ijef&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;13688668893&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_f3rymyt1q5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;13688668894&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hnyhc3mjat&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="string">&#x27;13688668895&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2spo35f5rl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">17</span>, <span class="string">&#x27;13688668896&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_q3r70baqe1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">18</span>, <span class="string">&#x27;13688668897&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v73ottjqxt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">19</span>, <span class="string">&#x27;13688668898&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tmh8o4r11q&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">20</span>, <span class="string">&#x27;13688668899&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4epgb7b5u1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">21</span>, <span class="string">&#x27;13688668900&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_g474zoujxj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">22</span>, <span class="string">&#x27;13688668901&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_r3kh1g6aah&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">23</span>, <span class="string">&#x27;13688668902&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_u3uuo7l5fo&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">24</span>, <span class="string">&#x27;13688668903&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9o93lbsojt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">25</span>, <span class="string">&#x27;13688668904&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jbhmr43wpq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">26</span>, <span class="string">&#x27;13688668905&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nevyd3c5ux&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">27</span>, <span class="string">&#x27;13688668906&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_oow4frmjp3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">28</span>, <span class="string">&#x27;13688668907&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cvmknmec74&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">29</span>, <span class="string">&#x27;13688668908&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0t2x5njbz7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">30</span>, <span class="string">&#x27;13688668909&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_y5x09783hp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">31</span>, <span class="string">&#x27;13688668910&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_owe4eyuhhh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">32</span>, <span class="string">&#x27;13688668911&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_j76auh0ggg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">33</span>, <span class="string">&#x27;13688668912&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_aal5w9rm33&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">34</span>, <span class="string">&#x27;13688668913&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_a2pgu8cr21&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">35</span>, <span class="string">&#x27;13688668914&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nle60p846v&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">36</span>, <span class="string">&#x27;13688668915&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_w1mck7c7yv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">37</span>, <span class="string">&#x27;13688668916&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bnpiybumlk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">38</span>, <span class="string">&#x27;13688668917&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4w7xeo2yyt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">39</span>, <span class="string">&#x27;13688668918&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_99u4voj7xl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">40</span>, <span class="string">&#x27;13688668919&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_g03is27pd6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">41</span>, <span class="string">&#x27;13688668920&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3j9erfkl0p&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">42</span>, <span class="string">&#x27;13688668921&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_l7rs56ah9y&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">43</span>, <span class="string">&#x27;13688668922&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_p3655ctliy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">44</span>, <span class="string">&#x27;13688668923&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qi1qze1yp1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">45</span>, <span class="string">&#x27;13688668924&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vrd5ir0rj0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">46</span>, <span class="string">&#x27;13688668925&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tubboh1byc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">47</span>, <span class="string">&#x27;13688668926&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_j2bdj3d2eo&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">48</span>, <span class="string">&#x27;13688668927&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ncj7r0vu1h&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">49</span>, <span class="string">&#x27;13688668928&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_63rhqjqa0a&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">50</span>, <span class="string">&#x27;13688668929&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_80ue5cywnk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">51</span>, <span class="string">&#x27;13688668930&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_j4q037vhpi&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">52</span>, <span class="string">&#x27;13688668931&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ms0uat5bf0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">53</span>, <span class="string">&#x27;13688668932&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_oqep16bdel&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">54</span>, <span class="string">&#x27;13688668933&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vjtvjjdqh7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">55</span>, <span class="string">&#x27;13688668934&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0168i9hv5g&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">56</span>, <span class="string">&#x27;13688668935&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vh1j6zw1q4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">57</span>, <span class="string">&#x27;13688668936&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rkf2nxouof&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">58</span>, <span class="string">&#x27;13688668937&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_whlt2chtv3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">59</span>, <span class="string">&#x27;13688668938&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lpqr90wbeo&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">60</span>, <span class="string">&#x27;13688668939&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_h40y3ipk9k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:47&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">61</span>, <span class="string">&#x27;13688668940&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_awdqkmbkt7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">62</span>, <span class="string">&#x27;13688668941&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1xgbg9v4r5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">63</span>, <span class="string">&#x27;13688668942&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7vf5fgiu68&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">64</span>, <span class="string">&#x27;13688668943&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lsgiz015vf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">65</span>, <span class="string">&#x27;13688668944&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0nqjvanruk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">66</span>, <span class="string">&#x27;13688668945&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8alg1taath&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">67</span>, <span class="string">&#x27;13688668946&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_q45ykjgpxe&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">68</span>, <span class="string">&#x27;13688668947&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4hy0o6ir0r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">69</span>, <span class="string">&#x27;13688668948&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_q6rh7e6zo9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">70</span>, <span class="string">&#x27;13688668949&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1wp3ygfyn2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">71</span>, <span class="string">&#x27;13688668950&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_13vjvo6flp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">72</span>, <span class="string">&#x27;13688668951&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_glyshbbwin&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">73</span>, <span class="string">&#x27;13688668952&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3ewzgsnhzj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">74</span>, <span class="string">&#x27;13688668953&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ky481zf1fs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">75</span>, <span class="string">&#x27;13688668954&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_o5yzu0epev&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">76</span>, <span class="string">&#x27;13688668955&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ycbracmsi3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">77</span>, <span class="string">&#x27;13688668956&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_974wwi1283&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">78</span>, <span class="string">&#x27;13688668957&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1y0xokmk9w&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">79</span>, <span class="string">&#x27;13688668958&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nd74cho3tu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">80</span>, <span class="string">&#x27;13688668959&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5z7u2eysa4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">81</span>, <span class="string">&#x27;13688668960&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yvf8hfu5yy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">82</span>, <span class="string">&#x27;13688668961&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2poi4wvpms&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">83</span>, <span class="string">&#x27;13688668962&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v4ysxjt1yu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">84</span>, <span class="string">&#x27;13688668963&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kbvn4gpgk6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">85</span>, <span class="string">&#x27;13688668964&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_23niik1tyg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">86</span>, <span class="string">&#x27;13688668965&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_uf2zz6ispe&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">87</span>, <span class="string">&#x27;13688668966&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5k19vf7c4o&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">88</span>, <span class="string">&#x27;13688668967&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5ahdd98xbr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">89</span>, <span class="string">&#x27;13688668968&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_a5cnfnoopx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">90</span>, <span class="string">&#x27;13688668969&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_utnmcyfg13&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">91</span>, <span class="string">&#x27;13688668970&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0k6n8ikb95&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">92</span>, <span class="string">&#x27;13688668971&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_zqk5maqtmi&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">93</span>, <span class="string">&#x27;13688668972&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9i9suwd3nd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">94</span>, <span class="string">&#x27;13688668973&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_u0y0ngrdjo&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">95</span>, <span class="string">&#x27;13688668974&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_stvijjwvzu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">96</span>, <span class="string">&#x27;13688668975&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7if7tttays&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">97</span>, <span class="string">&#x27;13688668976&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_f9hmz0ngdu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">98</span>, <span class="string">&#x27;13688668977&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wuhs2nq9d0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">99</span>, <span class="string">&#x27;13688668978&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1u3rlntd5s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">100</span>, <span class="string">&#x27;13688668979&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ywe62vhu7u&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">101</span>, <span class="string">&#x27;13688668980&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rbfpzdt6tg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">102</span>, <span class="string">&#x27;13688668981&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jv69l0d1kg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">103</span>, <span class="string">&#x27;13688668982&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dg6hwl48r6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">104</span>, <span class="string">&#x27;13688668983&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8rwl92pixr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">105</span>, <span class="string">&#x27;13688668984&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_k5dek2os3m&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">106</span>, <span class="string">&#x27;13688668985&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kw1nr2scyz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">107</span>, <span class="string">&#x27;13688668986&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_h81c5g0t7s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">108</span>, <span class="string">&#x27;13688668987&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jar6djas5e&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">109</span>, <span class="string">&#x27;13688668988&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_f9x2qm4grh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">110</span>, <span class="string">&#x27;13688668989&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mg5h6c4bcu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">111</span>, <span class="string">&#x27;13688668990&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hcg7ocbnus&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">112</span>, <span class="string">&#x27;13688668991&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rsbxx7g2yz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">113</span>, <span class="string">&#x27;13688668992&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bi3fhutbd1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">114</span>, <span class="string">&#x27;13688668993&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_o4pjkkyu3q&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">115</span>, <span class="string">&#x27;13688668994&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7zfs7g5vqb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">116</span>, <span class="string">&#x27;13688668995&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_oq71inq541&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">117</span>, <span class="string">&#x27;13688668996&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_u9zoiadq6l&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">118</span>, <span class="string">&#x27;13688668997&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4elguvu5pz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">119</span>, <span class="string">&#x27;13688668998&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_90dclmdv94&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">120</span>, <span class="string">&#x27;13688668999&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v2of3k1liq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">121</span>, <span class="string">&#x27;13688669000&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bg04b99iqn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">122</span>, <span class="string">&#x27;13688669001&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6fo9sul3q6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">123</span>, <span class="string">&#x27;13688669002&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vl7ajjlhnn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">124</span>, <span class="string">&#x27;13688669003&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_df3kaj5zi1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">125</span>, <span class="string">&#x27;13688669004&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yo6iohe5s2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">126</span>, <span class="string">&#x27;13688669005&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2iss3wrcm1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">127</span>, <span class="string">&#x27;13688669006&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7y8qm8sv4r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">128</span>, <span class="string">&#x27;13688669007&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_f825rhknpq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">129</span>, <span class="string">&#x27;13688669008&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3bigm0aauz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">130</span>, <span class="string">&#x27;13688669009&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ib9eo5dtgk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">131</span>, <span class="string">&#x27;13688669010&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ci5hhnufj9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">132</span>, <span class="string">&#x27;13688669011&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cc56u62rny&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">133</span>, <span class="string">&#x27;13688669012&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_i8fg7azvnt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">134</span>, <span class="string">&#x27;13688669013&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bw5dqkv6d9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">135</span>, <span class="string">&#x27;13688669014&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1n1o9ri5oz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">136</span>, <span class="string">&#x27;13688669015&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1b0zexoldy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">137</span>, <span class="string">&#x27;13688669016&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lz9dr6wxkw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">138</span>, <span class="string">&#x27;13688669017&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_zfpfscu53e&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">139</span>, <span class="string">&#x27;13688669018&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5kldn59nn9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">140</span>, <span class="string">&#x27;13688669019&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_p0mjswjh9x&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">141</span>, <span class="string">&#x27;13688669020&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_z4jcqggm11&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">142</span>, <span class="string">&#x27;13688669021&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pv9yctbxza&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">143</span>, <span class="string">&#x27;13688669022&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_u702tikvol&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">144</span>, <span class="string">&#x27;13688669023&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sy4a5f3qmy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">145</span>, <span class="string">&#x27;13688669024&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_n6g293r60l&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">146</span>, <span class="string">&#x27;13688669025&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_uylyp6ttqz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">147</span>, <span class="string">&#x27;13688669026&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_h2zmzefha3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">148</span>, <span class="string">&#x27;13688669027&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5outop6hz2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">149</span>, <span class="string">&#x27;13688669028&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vp8l74sadq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">150</span>, <span class="string">&#x27;13688669029&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_n9ww3of8fg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">151</span>, <span class="string">&#x27;13688669030&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rfm7pfgkv8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">152</span>, <span class="string">&#x27;13688669031&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_h7298xuo0u&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">153</span>, <span class="string">&#x27;13688669032&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_72s0smb2wz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">154</span>, <span class="string">&#x27;13688669033&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_twhphih9nd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">155</span>, <span class="string">&#x27;13688669034&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vfocakn5gl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">156</span>, <span class="string">&#x27;13688669035&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tfwe1v2x82&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">157</span>, <span class="string">&#x27;13688669036&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_eyrq375qgg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">158</span>, <span class="string">&#x27;13688669037&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rg2obilrot&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">159</span>, <span class="string">&#x27;13688669038&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rzfwln2aw2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">160</span>, <span class="string">&#x27;13688669039&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rzfgzeshe1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">161</span>, <span class="string">&#x27;13688669040&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_c67s0sjbmv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">162</span>, <span class="string">&#x27;13688669041&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fkyp652kkn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">163</span>, <span class="string">&#x27;13688669042&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sv1i552okx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">164</span>, <span class="string">&#x27;13688669043&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fsrmh6e0d3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">165</span>, <span class="string">&#x27;13688669044&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jey7gkjesn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">166</span>, <span class="string">&#x27;13688669045&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_00xdq55r0f&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">167</span>, <span class="string">&#x27;13688669046&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wkb6tveg4e&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">168</span>, <span class="string">&#x27;13688669047&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_51ong6aunx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">169</span>, <span class="string">&#x27;13688669048&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ke4h0uxthm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">170</span>, <span class="string">&#x27;13688669049&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_oswyb9opx5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">171</span>, <span class="string">&#x27;13688669050&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_iy8itbwg6q&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">172</span>, <span class="string">&#x27;13688669051&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_g1mk023p9r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">173</span>, <span class="string">&#x27;13688669052&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2507p7kvzs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">174</span>, <span class="string">&#x27;13688669053&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_piixbanfxl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">175</span>, <span class="string">&#x27;13688669054&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_w2d2is43jc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">176</span>, <span class="string">&#x27;13688669055&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lrk4it56lt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">177</span>, <span class="string">&#x27;13688669056&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3273q3j2ft&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">178</span>, <span class="string">&#x27;13688669057&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ltf42q0vy4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">179</span>, <span class="string">&#x27;13688669058&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7npp13snqp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">180</span>, <span class="string">&#x27;13688669059&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_slxftqmjp9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">181</span>, <span class="string">&#x27;13688669060&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_il4dsuvdfr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">182</span>, <span class="string">&#x27;13688669061&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_esm2d4uh7a&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">183</span>, <span class="string">&#x27;13688669062&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_te4prs2y3j&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">184</span>, <span class="string">&#x27;13688669063&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dycwcufgj0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">185</span>, <span class="string">&#x27;13688669064&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jjo4dvsgag&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">186</span>, <span class="string">&#x27;13688669065&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9opl0t1sd2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">187</span>, <span class="string">&#x27;13688669066&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hbm1dnssq6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">188</span>, <span class="string">&#x27;13688669067&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tx88zar5cs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">189</span>, <span class="string">&#x27;13688669068&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1p206nyupm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">190</span>, <span class="string">&#x27;13688669069&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8lnbd2ao5u&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">191</span>, <span class="string">&#x27;13688669070&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v4uwls1wg7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">192</span>, <span class="string">&#x27;13688669071&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_z1bkh9lnjj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">193</span>, <span class="string">&#x27;13688669072&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_r7u852ex1n&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">194</span>, <span class="string">&#x27;13688669073&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yqr54gdh8t&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">195</span>, <span class="string">&#x27;13688669074&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_x4kngjjng7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">196</span>, <span class="string">&#x27;13688669075&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_xvtxjocno2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">197</span>, <span class="string">&#x27;13688669076&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1zj77q03tf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">198</span>, <span class="string">&#x27;13688669077&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0q8yjtlp7a&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">199</span>, <span class="string">&#x27;13688669078&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nt2ogdyl73&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">200</span>, <span class="string">&#x27;13688669079&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6w0ex6afsz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">201</span>, <span class="string">&#x27;13688669080&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qpm2vyflc3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">202</span>, <span class="string">&#x27;13688669081&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dzvf9xujj1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">203</span>, <span class="string">&#x27;13688669082&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_aiypeaeupd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">204</span>, <span class="string">&#x27;13688669083&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5iznj0t5hg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">205</span>, <span class="string">&#x27;13688669084&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4t1flvqz2h&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">206</span>, <span class="string">&#x27;13688669085&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_542t36rd41&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">207</span>, <span class="string">&#x27;13688669086&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kmhowbydu6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">208</span>, <span class="string">&#x27;13688669087&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e8nz64jbym&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">209</span>, <span class="string">&#x27;13688669088&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_zjbr3zq6we&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">210</span>, <span class="string">&#x27;13688669089&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ptk6qaspna&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">211</span>, <span class="string">&#x27;13688669090&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jei7tqtu1j&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">212</span>, <span class="string">&#x27;13688669091&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8x7cyv5ey8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">213</span>, <span class="string">&#x27;13688669092&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mx3l4tj2jq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">214</span>, <span class="string">&#x27;13688669093&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ba6e9l6exg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:48&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">215</span>, <span class="string">&#x27;13688669094&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vlku3rop6e&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">216</span>, <span class="string">&#x27;13688669095&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hsff9net6q&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">217</span>, <span class="string">&#x27;13688669096&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mbaficnzfe&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">218</span>, <span class="string">&#x27;13688669097&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_b3wglh40dk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">219</span>, <span class="string">&#x27;13688669098&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dvi1yllk48&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">220</span>, <span class="string">&#x27;13688669099&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cxv8smu642&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">221</span>, <span class="string">&#x27;13688669100&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ze5exti1z5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">222</span>, <span class="string">&#x27;13688669101&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_b6524nuosz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">223</span>, <span class="string">&#x27;13688669102&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jw3xmz31ss&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">224</span>, <span class="string">&#x27;13688669103&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3fqrglyqj0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">225</span>, <span class="string">&#x27;13688669104&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_uf9dy1kfmg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">226</span>, <span class="string">&#x27;13688669105&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nn4ss4oupv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">227</span>, <span class="string">&#x27;13688669106&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_khse5vlch8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">228</span>, <span class="string">&#x27;13688669107&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_xfpqrk3hea&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">229</span>, <span class="string">&#x27;13688669108&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0sfyf9o74l&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">230</span>, <span class="string">&#x27;13688669109&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_936vlojcwy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">231</span>, <span class="string">&#x27;13688669110&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wq9m8aqmay&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">232</span>, <span class="string">&#x27;13688669111&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_uqw0c5ilp5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">233</span>, <span class="string">&#x27;13688669112&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qjucgt4ar1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">234</span>, <span class="string">&#x27;13688669113&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sry5bqf8ev&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">235</span>, <span class="string">&#x27;13688669114&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9csdwveeh8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">236</span>, <span class="string">&#x27;13688669115&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_y9kl1yd7fk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">237</span>, <span class="string">&#x27;13688669116&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mahwf66irm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">238</span>, <span class="string">&#x27;13688669117&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tud2i4itlr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">239</span>, <span class="string">&#x27;13688669118&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_p1s640kfny&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">240</span>, <span class="string">&#x27;13688669119&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2tyzfj49r6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">241</span>, <span class="string">&#x27;13688669120&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wjswilvpou&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">242</span>, <span class="string">&#x27;13688669121&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yuushg7x44&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">243</span>, <span class="string">&#x27;13688669122&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pb0fas6tob&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">244</span>, <span class="string">&#x27;13688669123&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3k4nn4dhuh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">245</span>, <span class="string">&#x27;13688669124&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lljtt3ttml&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">246</span>, <span class="string">&#x27;13688669125&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_weftqlsasg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">247</span>, <span class="string">&#x27;13688669126&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1lo78exvpl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">248</span>, <span class="string">&#x27;13688669127&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qzbukb32cm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">249</span>, <span class="string">&#x27;13688669128&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_k80i5kfvoj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">250</span>, <span class="string">&#x27;13688669129&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ggx53ve2zp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">251</span>, <span class="string">&#x27;13688669130&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yz0fmlzjxv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">252</span>, <span class="string">&#x27;13688669131&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jh6epyjgiw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">253</span>, <span class="string">&#x27;13688669132&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0k0ly383fy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">254</span>, <span class="string">&#x27;13688669133&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ibc8pgs2jc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">255</span>, <span class="string">&#x27;13688669134&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ys8yxdm6cr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">256</span>, <span class="string">&#x27;13688669135&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7zdagyyymi&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">257</span>, <span class="string">&#x27;13688669136&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9q7fiiqwzm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">258</span>, <span class="string">&#x27;13688669137&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_64qzvesiku&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">259</span>, <span class="string">&#x27;13688669138&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5fi8fsc9e5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">260</span>, <span class="string">&#x27;13688669139&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1wo4aktp89&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">261</span>, <span class="string">&#x27;13688669140&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5mis2rucuh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">262</span>, <span class="string">&#x27;13688669141&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pghkcw4cog&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">263</span>, <span class="string">&#x27;13688669142&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ymh7a5t69k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">264</span>, <span class="string">&#x27;13688669143&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_58qypl26r3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">265</span>, <span class="string">&#x27;13688669144&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_oknszihfil&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">266</span>, <span class="string">&#x27;13688669145&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rx5qu0277b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">267</span>, <span class="string">&#x27;13688669146&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4mwekx3q8z&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">268</span>, <span class="string">&#x27;13688669147&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ie9qzfwu27&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">269</span>, <span class="string">&#x27;13688669148&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_l80r6phxur&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">270</span>, <span class="string">&#x27;13688669149&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_np6iqqeuql&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">271</span>, <span class="string">&#x27;13688669150&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5c27qgw2o3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">272</span>, <span class="string">&#x27;13688669151&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ujpa6juatc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">273</span>, <span class="string">&#x27;13688669152&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_van4fds7cx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">274</span>, <span class="string">&#x27;13688669153&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ox11o9krp9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">275</span>, <span class="string">&#x27;13688669154&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_c7o3u0usf2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">276</span>, <span class="string">&#x27;13688669155&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cq7hojlerq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">277</span>, <span class="string">&#x27;13688669156&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kphis0ntao&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">278</span>, <span class="string">&#x27;13688669157&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nd12v2tdpj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">279</span>, <span class="string">&#x27;13688669158&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5far04rjm0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">280</span>, <span class="string">&#x27;13688669159&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_f33abomjs2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">281</span>, <span class="string">&#x27;13688669160&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1qty1oyawt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">282</span>, <span class="string">&#x27;13688669161&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9l463o7me2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">283</span>, <span class="string">&#x27;13688669162&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0seyfs8ou8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">284</span>, <span class="string">&#x27;13688669163&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7uhqt2zf11&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">285</span>, <span class="string">&#x27;13688669164&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wy2jtbkr1t&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">286</span>, <span class="string">&#x27;13688669165&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yjf1kbl6r8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">287</span>, <span class="string">&#x27;13688669166&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_r98pel35gn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">288</span>, <span class="string">&#x27;13688669167&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_u2eg1jcwvz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">289</span>, <span class="string">&#x27;13688669168&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5z7d4fr9ye&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">290</span>, <span class="string">&#x27;13688669169&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kl0p0ku6zv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">291</span>, <span class="string">&#x27;13688669170&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dsdocfa64r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">292</span>, <span class="string">&#x27;13688669171&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gbygsd03kc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">293</span>, <span class="string">&#x27;13688669172&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dj1xqos2is&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">294</span>, <span class="string">&#x27;13688669173&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_il6yctz040&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">295</span>, <span class="string">&#x27;13688669174&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_y4zn043gvj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">296</span>, <span class="string">&#x27;13688669175&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_oh9tjoxq8c&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">297</span>, <span class="string">&#x27;13688669176&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6xlq088asi&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">298</span>, <span class="string">&#x27;13688669177&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0sepghh66s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">299</span>, <span class="string">&#x27;13688669178&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dzo7q333x7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">300</span>, <span class="string">&#x27;13688669179&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_n7j3j68agt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">301</span>, <span class="string">&#x27;13688669180&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_b99vc3qr3d&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">302</span>, <span class="string">&#x27;13688669181&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_o2uu01ngfw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">303</span>, <span class="string">&#x27;13688669182&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_q0yy8pvku3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">304</span>, <span class="string">&#x27;13688669183&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lipi4iyiv9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">305</span>, <span class="string">&#x27;13688669184&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_x2dq9i90ms&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">306</span>, <span class="string">&#x27;13688669185&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bz9twrcx01&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">307</span>, <span class="string">&#x27;13688669186&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_iun0ocev18&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">308</span>, <span class="string">&#x27;13688669187&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_uob3pxr062&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">309</span>, <span class="string">&#x27;13688669188&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nxuwi8q3n5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">310</span>, <span class="string">&#x27;13688669189&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_g6si4hwe4r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">311</span>, <span class="string">&#x27;13688669190&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v4xud6pxnh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">312</span>, <span class="string">&#x27;13688669191&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_n3vq5a4c49&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">313</span>, <span class="string">&#x27;13688669192&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6qdfn8dkja&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">314</span>, <span class="string">&#x27;13688669193&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_872mdw0ibu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">315</span>, <span class="string">&#x27;13688669194&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_s426pmlnno&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">316</span>, <span class="string">&#x27;13688669195&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_n7d3fcnlqf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">317</span>, <span class="string">&#x27;13688669196&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_d1euhpgvjt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">318</span>, <span class="string">&#x27;13688669197&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_luwqlqye4n&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">319</span>, <span class="string">&#x27;13688669198&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_m9khstqle0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">320</span>, <span class="string">&#x27;13688669199&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7u54hoeh5p&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">321</span>, <span class="string">&#x27;13688669200&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hndxi8iyg7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">322</span>, <span class="string">&#x27;13688669201&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_csagq8b16v&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">323</span>, <span class="string">&#x27;13688669202&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sa979r5vfr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">324</span>, <span class="string">&#x27;13688669203&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gojbeoieko&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">325</span>, <span class="string">&#x27;13688669204&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vrxmccmk36&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">326</span>, <span class="string">&#x27;13688669205&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kwzzzxile8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">327</span>, <span class="string">&#x27;13688669206&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8ik6wmzcs3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">328</span>, <span class="string">&#x27;13688669207&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_x9f4po6eok&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">329</span>, <span class="string">&#x27;13688669208&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vn0g3rywt0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">330</span>, <span class="string">&#x27;13688669209&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0h0hqnoqvv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">331</span>, <span class="string">&#x27;13688669210&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ne3rvn4cim&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">332</span>, <span class="string">&#x27;13688669211&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bz20tomja0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">333</span>, <span class="string">&#x27;13688669212&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7k5d8324tm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">334</span>, <span class="string">&#x27;13688669213&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5va74it1op&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">335</span>, <span class="string">&#x27;13688669214&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gc21xkfgph&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">336</span>, <span class="string">&#x27;13688669215&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rv1o0ousua&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">337</span>, <span class="string">&#x27;13688669216&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lkp3hk0t8q&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">338</span>, <span class="string">&#x27;13688669217&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e2kjjqo7ee&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">339</span>, <span class="string">&#x27;13688669218&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ja24gfl42z&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">340</span>, <span class="string">&#x27;13688669219&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5sxrarxxd2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">341</span>, <span class="string">&#x27;13688669220&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lzilfx23jr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">342</span>, <span class="string">&#x27;13688669221&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4healeh2sq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">343</span>, <span class="string">&#x27;13688669222&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_txh60qz6xe&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">344</span>, <span class="string">&#x27;13688669223&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ofie8fobtu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">345</span>, <span class="string">&#x27;13688669224&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wxfngmqndc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">346</span>, <span class="string">&#x27;13688669225&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_n11kdqn95y&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">347</span>, <span class="string">&#x27;13688669226&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7b9etto6jl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">348</span>, <span class="string">&#x27;13688669227&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sa23n9pacw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">349</span>, <span class="string">&#x27;13688669228&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1lhe46upfz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">350</span>, <span class="string">&#x27;13688669229&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jioft4gdiu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">351</span>, <span class="string">&#x27;13688669230&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jta7ld4vty&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">352</span>, <span class="string">&#x27;13688669231&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5tkaejhk7g&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">353</span>, <span class="string">&#x27;13688669232&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fkoe771g9p&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">354</span>, <span class="string">&#x27;13688669233&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_snv802ujrx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">355</span>, <span class="string">&#x27;13688669234&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4szkwdl3hw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">356</span>, <span class="string">&#x27;13688669235&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qq4cteo33l&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">357</span>, <span class="string">&#x27;13688669236&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hwn4ofw0dp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">358</span>, <span class="string">&#x27;13688669237&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2r4xhcvxp2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">359</span>, <span class="string">&#x27;13688669238&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_iphgurk3nk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">360</span>, <span class="string">&#x27;13688669239&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ih9kbl5kzb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">361</span>, <span class="string">&#x27;13688669240&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2odlf3rqex&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">362</span>, <span class="string">&#x27;13688669241&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_i9jalo3ouw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">363</span>, <span class="string">&#x27;13688669242&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_whbqd8vhr2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">364</span>, <span class="string">&#x27;13688669243&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bzlvvy10mp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">365</span>, <span class="string">&#x27;13688669244&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pe7y2zyii7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">366</span>, <span class="string">&#x27;13688669245&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cnk071ghc7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">367</span>, <span class="string">&#x27;13688669246&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_21cue7tpm0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">368</span>, <span class="string">&#x27;13688669247&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nidneujm1x&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">369</span>, <span class="string">&#x27;13688669248&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tx2y3v0pb0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">370</span>, <span class="string">&#x27;13688669249&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_i8ikz0nufr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">371</span>, <span class="string">&#x27;13688669250&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_omq8bsw2ij&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">372</span>, <span class="string">&#x27;13688669251&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ffpuo977gj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">373</span>, <span class="string">&#x27;13688669252&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jcgx7mukv0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">374</span>, <span class="string">&#x27;13688669253&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gn6k43jfx8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">375</span>, <span class="string">&#x27;13688669254&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_esfv726lun&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">376</span>, <span class="string">&#x27;13688669255&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_l7vh3qyhnk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">377</span>, <span class="string">&#x27;13688669256&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_aqo9nsp13v&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">378</span>, <span class="string">&#x27;13688669257&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_45z1cjwo34&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">379</span>, <span class="string">&#x27;13688669258&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cukuugiquc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">380</span>, <span class="string">&#x27;13688669259&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cmzben5ql1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">381</span>, <span class="string">&#x27;13688669260&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fm136hckhd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">382</span>, <span class="string">&#x27;13688669261&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4neww35d6t&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">383</span>, <span class="string">&#x27;13688669262&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_p4e2t04dl0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">384</span>, <span class="string">&#x27;13688669263&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3s22mzjlgl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">385</span>, <span class="string">&#x27;13688669264&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kf0pbo00lp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">386</span>, <span class="string">&#x27;13688669265&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7tan2lj2jn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:49&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">387</span>, <span class="string">&#x27;13688669266&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_w88q6nof2r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">388</span>, <span class="string">&#x27;13688669267&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9aze983wkj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">389</span>, <span class="string">&#x27;13688669268&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wtioxpbho1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">390</span>, <span class="string">&#x27;13688669269&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yf70g0cjfu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">391</span>, <span class="string">&#x27;13688669270&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_i1w18vru0l&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">392</span>, <span class="string">&#x27;13688669271&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6lr3w5npe5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">393</span>, <span class="string">&#x27;13688669272&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9n8rjbb9gp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">394</span>, <span class="string">&#x27;13688669273&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fe3u4g7p1f&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">395</span>, <span class="string">&#x27;13688669274&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_618vib46zb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">396</span>, <span class="string">&#x27;13688669275&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mj4b8uxpu3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">397</span>, <span class="string">&#x27;13688669276&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3jq7brld6h&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">398</span>, <span class="string">&#x27;13688669277&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8577262ob3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">399</span>, <span class="string">&#x27;13688669278&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_x63u1e3sap&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">400</span>, <span class="string">&#x27;13688669279&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_o2c2l1j9zs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">401</span>, <span class="string">&#x27;13688669280&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rtupie4qut&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">402</span>, <span class="string">&#x27;13688669281&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_othsv0bkha&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">403</span>, <span class="string">&#x27;13688669282&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4wqa1vn3kw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">404</span>, <span class="string">&#x27;13688669283&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_xmhuythdnn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">405</span>, <span class="string">&#x27;13688669284&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_alzyibl549&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">406</span>, <span class="string">&#x27;13688669285&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3nhqsa0htg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">407</span>, <span class="string">&#x27;13688669286&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vn81ys9n64&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">408</span>, <span class="string">&#x27;13688669287&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_iz6t7kpxz2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">409</span>, <span class="string">&#x27;13688669288&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7gnmjhg1rh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">410</span>, <span class="string">&#x27;13688669289&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_r2i71mq5lk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">411</span>, <span class="string">&#x27;13688669290&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gevxv4bfda&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">412</span>, <span class="string">&#x27;13688669291&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hqneva0vaz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">413</span>, <span class="string">&#x27;13688669292&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8fvquxjm0t&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">414</span>, <span class="string">&#x27;13688669293&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9u8dxzs9nk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">415</span>, <span class="string">&#x27;13688669294&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8mwcrg9ez9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">416</span>, <span class="string">&#x27;13688669295&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_erzqptr80b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">417</span>, <span class="string">&#x27;13688669296&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_97xgccgwaf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">418</span>, <span class="string">&#x27;13688669297&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5rz6s0zuoh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">419</span>, <span class="string">&#x27;13688669298&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8o7cg6rp05&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">420</span>, <span class="string">&#x27;13688669299&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rhftetybs4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">421</span>, <span class="string">&#x27;13688669300&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mjh9uzi92z&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">422</span>, <span class="string">&#x27;13688669301&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bvaub566b3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">423</span>, <span class="string">&#x27;13688669302&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e97b0z12jc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">424</span>, <span class="string">&#x27;13688669303&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mcc1pteaw5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">425</span>, <span class="string">&#x27;13688669304&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gz1ymib0dl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">426</span>, <span class="string">&#x27;13688669305&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_owszpn6jem&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">427</span>, <span class="string">&#x27;13688669306&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nyqxiekdus&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">428</span>, <span class="string">&#x27;13688669307&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ilr27xnuxu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">429</span>, <span class="string">&#x27;13688669308&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mhzftdfxi4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">430</span>, <span class="string">&#x27;13688669309&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kavgc8r8f6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">431</span>, <span class="string">&#x27;13688669310&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_svztbpgr9w&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">432</span>, <span class="string">&#x27;13688669311&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fdjhoysgy8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">433</span>, <span class="string">&#x27;13688669312&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_drssks7627&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">434</span>, <span class="string">&#x27;13688669313&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_53kuim78p1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">435</span>, <span class="string">&#x27;13688669314&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tpjaw9ygl6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">436</span>, <span class="string">&#x27;13688669315&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_zlj9ao4lbw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">437</span>, <span class="string">&#x27;13688669316&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9nsckyz0k8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">438</span>, <span class="string">&#x27;13688669317&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rkyjx5n0k9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">439</span>, <span class="string">&#x27;13688669318&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e47mr17jmo&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">440</span>, <span class="string">&#x27;13688669319&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gdouwxu8bm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">441</span>, <span class="string">&#x27;13688669320&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7odu05tcri&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">442</span>, <span class="string">&#x27;13688669321&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_x6dga1y84j&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">443</span>, <span class="string">&#x27;13688669322&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ubzwoytroz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">444</span>, <span class="string">&#x27;13688669323&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_brivojp5b1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">445</span>, <span class="string">&#x27;13688669324&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_q5sluitgii&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">446</span>, <span class="string">&#x27;13688669325&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bbqazzzawl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">447</span>, <span class="string">&#x27;13688669326&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_82fbd0oo0u&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">448</span>, <span class="string">&#x27;13688669327&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_87ft14as7t&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">449</span>, <span class="string">&#x27;13688669328&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_diabg787km&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">450</span>, <span class="string">&#x27;13688669329&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_oo1gf0pxln&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">451</span>, <span class="string">&#x27;13688669330&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4fc1q8u2f3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">452</span>, <span class="string">&#x27;13688669331&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hgny53jwpn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">453</span>, <span class="string">&#x27;13688669332&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5m75miuy6r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">454</span>, <span class="string">&#x27;13688669333&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qx5ohjcayd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">455</span>, <span class="string">&#x27;13688669334&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cff2zkpu62&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">456</span>, <span class="string">&#x27;13688669335&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dsb1rk9dsr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">457</span>, <span class="string">&#x27;13688669336&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_50h3ylhjnz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">458</span>, <span class="string">&#x27;13688669337&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_i02f5rjdab&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">459</span>, <span class="string">&#x27;13688669338&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3vwdqpif1l&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">460</span>, <span class="string">&#x27;13688669339&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_g6xewzg33w&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">461</span>, <span class="string">&#x27;13688669340&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_63u60u6o7f&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">462</span>, <span class="string">&#x27;13688669341&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_m6ikxcr92q&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">463</span>, <span class="string">&#x27;13688669342&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yzd5lmecur&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">464</span>, <span class="string">&#x27;13688669343&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_m3163uc9al&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">465</span>, <span class="string">&#x27;13688669344&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1x6f94jq0v&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">466</span>, <span class="string">&#x27;13688669345&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_keo0udy60g&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">467</span>, <span class="string">&#x27;13688669346&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_87y52es2uw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">468</span>, <span class="string">&#x27;13688669347&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1zkkz9j0e6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">469</span>, <span class="string">&#x27;13688669348&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_baznwk8x5q&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">470</span>, <span class="string">&#x27;13688669349&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_b4hnhsmpxw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">471</span>, <span class="string">&#x27;13688669350&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1hr6wbd939&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">472</span>, <span class="string">&#x27;13688669351&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4w7dhr290a&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">473</span>, <span class="string">&#x27;13688669352&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tkxg6jo3xa&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">474</span>, <span class="string">&#x27;13688669353&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_saosjqptnq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">475</span>, <span class="string">&#x27;13688669354&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wjge9hxzfv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">476</span>, <span class="string">&#x27;13688669355&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8ex8ynmec4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">477</span>, <span class="string">&#x27;13688669356&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_beih06msot&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">478</span>, <span class="string">&#x27;13688669357&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e4tuso2fad&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">479</span>, <span class="string">&#x27;13688669358&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_iolxs2wbfs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">480</span>, <span class="string">&#x27;13688669359&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5trre9akf1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">481</span>, <span class="string">&#x27;13688669360&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_y3l832hamq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">482</span>, <span class="string">&#x27;13688669361&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gs7kvt65y8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">483</span>, <span class="string">&#x27;13688669362&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8rda39nfpx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">484</span>, <span class="string">&#x27;13688669363&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wix6t6g14l&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">485</span>, <span class="string">&#x27;13688669364&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_s2k023vtn7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">486</span>, <span class="string">&#x27;13688669365&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qc3nhavb9f&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">487</span>, <span class="string">&#x27;13688669366&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_98eoecfe9s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">488</span>, <span class="string">&#x27;13688669367&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kknik7xw80&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">489</span>, <span class="string">&#x27;13688669368&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_17d7bifhpp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">490</span>, <span class="string">&#x27;13688669369&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_04vbus432n&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">491</span>, <span class="string">&#x27;13688669370&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3e1xl0tvss&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">492</span>, <span class="string">&#x27;13688669371&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jpvv20rmfk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">493</span>, <span class="string">&#x27;13688669372&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_51jd3tfl3e&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">494</span>, <span class="string">&#x27;13688669373&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_agt44szvcb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">495</span>, <span class="string">&#x27;13688669374&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pr7icguenq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">496</span>, <span class="string">&#x27;13688669375&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2jl0qaecm0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">497</span>, <span class="string">&#x27;13688669376&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_m1fxzx8i0u&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">498</span>, <span class="string">&#x27;13688669377&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fh7a1j0vaz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">499</span>, <span class="string">&#x27;13688669378&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ty7afbm01v&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">500</span>, <span class="string">&#x27;13688669379&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bwazk1tt71&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">501</span>, <span class="string">&#x27;13688669380&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_c1wrwmqzfi&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">502</span>, <span class="string">&#x27;13688669381&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nbfyg2pfql&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">503</span>, <span class="string">&#x27;13688669382&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_h85lj9y0jy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">504</span>, <span class="string">&#x27;13688669383&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e0r5gg439j&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">505</span>, <span class="string">&#x27;13688669384&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_k0s8h8v8wt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">506</span>, <span class="string">&#x27;13688669385&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0v423qhiz2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">507</span>, <span class="string">&#x27;13688669386&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_zgze48neoq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">508</span>, <span class="string">&#x27;13688669387&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_un4nppmh7k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">509</span>, <span class="string">&#x27;13688669388&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_knr2flv5mr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">510</span>, <span class="string">&#x27;13688669389&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cvhg3r8aqj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">511</span>, <span class="string">&#x27;13688669390&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_92xh46mlff&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">512</span>, <span class="string">&#x27;13688669391&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vhp8pxmhk6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">513</span>, <span class="string">&#x27;13688669392&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hc4c7z9y3k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">514</span>, <span class="string">&#x27;13688669393&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_03ikpqtn96&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">515</span>, <span class="string">&#x27;13688669394&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_g0l23kj1ta&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">516</span>, <span class="string">&#x27;13688669395&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hdd1qkfbjy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">517</span>, <span class="string">&#x27;13688669396&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vmc478haq2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">518</span>, <span class="string">&#x27;13688669397&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_g16kk9w1jp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">519</span>, <span class="string">&#x27;13688669398&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vlviloabak&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">520</span>, <span class="string">&#x27;13688669399&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_f4t9c9x0qs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">521</span>, <span class="string">&#x27;13688669400&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_uhd0vskqux&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">522</span>, <span class="string">&#x27;13688669401&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_uidqqwety9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">523</span>, <span class="string">&#x27;13688669402&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ijqz4fb077&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">524</span>, <span class="string">&#x27;13688669403&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_d16wfogt38&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">525</span>, <span class="string">&#x27;13688669404&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_50cj7qxejp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">526</span>, <span class="string">&#x27;13688669405&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_w0mawjfxbf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">527</span>, <span class="string">&#x27;13688669406&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vihcs8gddy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">528</span>, <span class="string">&#x27;13688669407&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1io84j51kb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">529</span>, <span class="string">&#x27;13688669408&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sac23jn0ct&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">530</span>, <span class="string">&#x27;13688669409&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_84saoi0eaq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">531</span>, <span class="string">&#x27;13688669410&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bqfd0lusff&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">532</span>, <span class="string">&#x27;13688669411&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_a717jzadbk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">533</span>, <span class="string">&#x27;13688669412&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3e6nd805yp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">534</span>, <span class="string">&#x27;13688669413&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bgkv3zjjsy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">535</span>, <span class="string">&#x27;13688669414&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4lzfuo6hcl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">536</span>, <span class="string">&#x27;13688669415&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_y748pleoq8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">537</span>, <span class="string">&#x27;13688669416&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ciyuki97of&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">538</span>, <span class="string">&#x27;13688669417&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kaulf89rnl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">539</span>, <span class="string">&#x27;13688669418&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_h0dan7ux0u&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">540</span>, <span class="string">&#x27;13688669419&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fvmx4u2re0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">541</span>, <span class="string">&#x27;13688669420&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_njomftlkps&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">542</span>, <span class="string">&#x27;13688669421&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2ezx5lxtc4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">543</span>, <span class="string">&#x27;13688669422&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_161mxzchbt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">544</span>, <span class="string">&#x27;13688669423&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_f8e3enit63&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">545</span>, <span class="string">&#x27;13688669424&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_j1ygvb30zr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">546</span>, <span class="string">&#x27;13688669425&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lskpl9geya&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">547</span>, <span class="string">&#x27;13688669426&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_feww9njnhi&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">548</span>, <span class="string">&#x27;13688669427&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e8x6u5i9ca&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">549</span>, <span class="string">&#x27;13688669428&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_17al8oqa4w&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">550</span>, <span class="string">&#x27;13688669429&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nbo1m8bazt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">551</span>, <span class="string">&#x27;13688669430&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rqfyp2isyr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">552</span>, <span class="string">&#x27;13688669431&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_epr1i52q5x&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">553</span>, <span class="string">&#x27;13688669432&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_x154dr8sch&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">554</span>, <span class="string">&#x27;13688669433&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_i5lvnupsu6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">555</span>, <span class="string">&#x27;13688669434&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qsnre265gc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">556</span>, <span class="string">&#x27;13688669435&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7f3zwt1uso&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">557</span>, <span class="string">&#x27;13688669436&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qgkrbv1r7p&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">558</span>, <span class="string">&#x27;13688669437&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_b39j58u8ql&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">559</span>, <span class="string">&#x27;13688669438&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wby0tn39v5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">560</span>, <span class="string">&#x27;13688669439&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9vt11wm6wb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">561</span>, <span class="string">&#x27;13688669440&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_y4rokt5rzh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">562</span>, <span class="string">&#x27;13688669441&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lyarwzepjm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">563</span>, <span class="string">&#x27;13688669442&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_er844jel5s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">564</span>, <span class="string">&#x27;13688669443&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2gkdrbu7rd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">565</span>, <span class="string">&#x27;13688669444&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fnks15rgap&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">566</span>, <span class="string">&#x27;13688669445&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fe79dtlbf3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:50&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">567</span>, <span class="string">&#x27;13688669446&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jrl1kdhopy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">568</span>, <span class="string">&#x27;13688669447&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_p5h5hfw0h5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">569</span>, <span class="string">&#x27;13688669448&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_756lckggox&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">570</span>, <span class="string">&#x27;13688669449&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9w56lad204&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">571</span>, <span class="string">&#x27;13688669450&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kjfvuonq64&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">572</span>, <span class="string">&#x27;13688669451&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_k1i16oya8x&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">573</span>, <span class="string">&#x27;13688669452&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_z4wz2wq9oj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">574</span>, <span class="string">&#x27;13688669453&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jotms6c1vz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">575</span>, <span class="string">&#x27;13688669454&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_29iu6j1olp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">576</span>, <span class="string">&#x27;13688669455&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rfkqpu7bs1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">577</span>, <span class="string">&#x27;13688669456&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yecqp8c38k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">578</span>, <span class="string">&#x27;13688669457&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1mbkrz4rng&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">579</span>, <span class="string">&#x27;13688669458&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bx6h4wu47y&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">580</span>, <span class="string">&#x27;13688669459&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_usub0nsxez&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">581</span>, <span class="string">&#x27;13688669460&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2vvxjpuwgr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">582</span>, <span class="string">&#x27;13688669461&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9tmhy4nfm1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">583</span>, <span class="string">&#x27;13688669462&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_q1gyjoatnm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">584</span>, <span class="string">&#x27;13688669463&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vaqe3soyoz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">585</span>, <span class="string">&#x27;13688669464&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bz81fj51ul&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">586</span>, <span class="string">&#x27;13688669465&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pwp8w2oife&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">587</span>, <span class="string">&#x27;13688669466&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6i8a8jpc4a&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">588</span>, <span class="string">&#x27;13688669467&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e19oms872y&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">589</span>, <span class="string">&#x27;13688669468&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7jnvjujuk5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">590</span>, <span class="string">&#x27;13688669469&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1brabvuxfp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">591</span>, <span class="string">&#x27;13688669470&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_w25xjchkmt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">592</span>, <span class="string">&#x27;13688669471&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qc38678j1q&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">593</span>, <span class="string">&#x27;13688669472&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5wqfc087pg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">594</span>, <span class="string">&#x27;13688669473&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_l921wy6ghf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">595</span>, <span class="string">&#x27;13688669474&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qgdwy1c8ya&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">596</span>, <span class="string">&#x27;13688669475&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2ftowbar49&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">597</span>, <span class="string">&#x27;13688669476&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e0rqhfdde9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">598</span>, <span class="string">&#x27;13688669477&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vpswd32xps&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">599</span>, <span class="string">&#x27;13688669478&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ec479wdojq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">600</span>, <span class="string">&#x27;13688669479&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6kz95u775k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">601</span>, <span class="string">&#x27;13688669480&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_iyyh1jdjvk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">602</span>, <span class="string">&#x27;13688669481&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jbv97r3zcf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">603</span>, <span class="string">&#x27;13688669482&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1t7nmmwx2g&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">604</span>, <span class="string">&#x27;13688669483&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fb8j6mb1cn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">605</span>, <span class="string">&#x27;13688669484&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ld0b3fd8uk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">606</span>, <span class="string">&#x27;13688669485&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sv8tt0fhb0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">607</span>, <span class="string">&#x27;13688669486&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ovqhhaqzfs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">608</span>, <span class="string">&#x27;13688669487&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mdybbx800t&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">609</span>, <span class="string">&#x27;13688669488&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dy1n5yoxhv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">610</span>, <span class="string">&#x27;13688669489&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_xefu4y7d2d&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">611</span>, <span class="string">&#x27;13688669490&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4aun9z96dn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">612</span>, <span class="string">&#x27;13688669491&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_guva8ofunq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">613</span>, <span class="string">&#x27;13688669492&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6l4gzaotnf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">614</span>, <span class="string">&#x27;13688669493&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ngbcy6a2zk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">615</span>, <span class="string">&#x27;13688669494&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dqqj7ti3pd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">616</span>, <span class="string">&#x27;13688669495&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5zq4rzlbik&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">617</span>, <span class="string">&#x27;13688669496&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7e0qi512hf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">618</span>, <span class="string">&#x27;13688669497&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jpmnhzwesi&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">619</span>, <span class="string">&#x27;13688669498&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_00xb9uvv0m&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">620</span>, <span class="string">&#x27;13688669499&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nxn2ldt3gl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">621</span>, <span class="string">&#x27;13688669500&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cyd1a9zfqw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">622</span>, <span class="string">&#x27;13688669501&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0nhklq4xie&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">623</span>, <span class="string">&#x27;13688669502&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rtf3z1wptn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">624</span>, <span class="string">&#x27;13688669503&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ov4uix8csm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">625</span>, <span class="string">&#x27;13688669504&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lxi5i68cdf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">626</span>, <span class="string">&#x27;13688669505&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_do1slgl1ph&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">627</span>, <span class="string">&#x27;13688669506&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qj8pbsjpl5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">628</span>, <span class="string">&#x27;13688669507&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ygrl56l48d&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">629</span>, <span class="string">&#x27;13688669508&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_maynz9h3vn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">630</span>, <span class="string">&#x27;13688669509&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_m7qnvuej5k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">631</span>, <span class="string">&#x27;13688669510&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ceg7kezzrd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">632</span>, <span class="string">&#x27;13688669511&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v7ky9w9v6f&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">633</span>, <span class="string">&#x27;13688669512&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kk8rzbittq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">634</span>, <span class="string">&#x27;13688669513&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mskczihgi8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">635</span>, <span class="string">&#x27;13688669514&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0tmadlzf1j&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">636</span>, <span class="string">&#x27;13688669515&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_oeui72807w&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">637</span>, <span class="string">&#x27;13688669516&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ad49besbbs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">638</span>, <span class="string">&#x27;13688669517&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_huzzpviaax&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">639</span>, <span class="string">&#x27;13688669518&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_b0p11t8qon&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">640</span>, <span class="string">&#x27;13688669519&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_14k8fje63n&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">641</span>, <span class="string">&#x27;13688669520&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bl5rc085pr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">642</span>, <span class="string">&#x27;13688669521&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_938covh4nt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">643</span>, <span class="string">&#x27;13688669522&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_olt9qfefvw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">644</span>, <span class="string">&#x27;13688669523&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bhkdwtkfdg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">645</span>, <span class="string">&#x27;13688669524&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_we6790rc8v&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">646</span>, <span class="string">&#x27;13688669525&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wqmiqbrj3a&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">647</span>, <span class="string">&#x27;13688669526&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ccdo9ncgzt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">648</span>, <span class="string">&#x27;13688669527&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pk3l58b3cf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">649</span>, <span class="string">&#x27;13688669528&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_meqr7dxbog&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">650</span>, <span class="string">&#x27;13688669529&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_x70v1uaf0g&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">651</span>, <span class="string">&#x27;13688669530&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yijawdxi8k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">652</span>, <span class="string">&#x27;13688669531&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qlv8jnv927&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">653</span>, <span class="string">&#x27;13688669532&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2tkj1s7aex&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">654</span>, <span class="string">&#x27;13688669533&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5vbfw1gln6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">655</span>, <span class="string">&#x27;13688669534&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_zseyyi59z2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">656</span>, <span class="string">&#x27;13688669535&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8ch1tq5bfp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">657</span>, <span class="string">&#x27;13688669536&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gdgb5nbkqn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">658</span>, <span class="string">&#x27;13688669537&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rr5448qo4l&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">659</span>, <span class="string">&#x27;13688669538&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e6zwifzqhw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">660</span>, <span class="string">&#x27;13688669539&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7ytv4vd6he&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">661</span>, <span class="string">&#x27;13688669540&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pc84newj49&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">662</span>, <span class="string">&#x27;13688669541&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_h4wpk3e9ht&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">663</span>, <span class="string">&#x27;13688669542&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_d3vt4vqim8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">664</span>, <span class="string">&#x27;13688669543&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_eqr14mgaz2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">665</span>, <span class="string">&#x27;13688669544&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ldd4kzq961&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">666</span>, <span class="string">&#x27;13688669545&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_w4qu1bb2lk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">667</span>, <span class="string">&#x27;13688669546&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0627bn8px3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">668</span>, <span class="string">&#x27;13688669547&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_64aj20cdf1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">669</span>, <span class="string">&#x27;13688669548&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_l7u34b3ler&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">670</span>, <span class="string">&#x27;13688669549&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2ze9tl9994&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">671</span>, <span class="string">&#x27;13688669550&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_m5phoejixm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">672</span>, <span class="string">&#x27;13688669551&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8ogdovuirm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">673</span>, <span class="string">&#x27;13688669552&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wfk4ebck83&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">674</span>, <span class="string">&#x27;13688669553&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_oupbnni466&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">675</span>, <span class="string">&#x27;13688669554&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_89967wcevq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">676</span>, <span class="string">&#x27;13688669555&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_xr6g2q08cm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">677</span>, <span class="string">&#x27;13688669556&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_m313bjckeq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">678</span>, <span class="string">&#x27;13688669557&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_x25nq1ss14&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">679</span>, <span class="string">&#x27;13688669558&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jeidzxzp6y&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">680</span>, <span class="string">&#x27;13688669559&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_l7dkffo3n0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">681</span>, <span class="string">&#x27;13688669560&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pqio9ol2ln&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">682</span>, <span class="string">&#x27;13688669561&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_k1cbsqi4gt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">683</span>, <span class="string">&#x27;13688669562&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_p1i9b4p4sv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">684</span>, <span class="string">&#x27;13688669563&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_07yfm6qtl1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">685</span>, <span class="string">&#x27;13688669564&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_y3mmmk1kak&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">686</span>, <span class="string">&#x27;13688669565&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lkxjnwtqa7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">687</span>, <span class="string">&#x27;13688669566&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v5w9pm18iq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">688</span>, <span class="string">&#x27;13688669567&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_364l5poxpw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">689</span>, <span class="string">&#x27;13688669568&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_trlfkptv3g&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">690</span>, <span class="string">&#x27;13688669569&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rkheg82tnp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">691</span>, <span class="string">&#x27;13688669570&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5zmzrjgo5o&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">692</span>, <span class="string">&#x27;13688669571&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6uacx6cqhp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">693</span>, <span class="string">&#x27;13688669572&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wnats1phoj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">694</span>, <span class="string">&#x27;13688669573&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dcm1w7674v&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">695</span>, <span class="string">&#x27;13688669574&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_r7ik7ae272&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">696</span>, <span class="string">&#x27;13688669575&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_xk77qyl4gl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">697</span>, <span class="string">&#x27;13688669576&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_989d1fsji4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">698</span>, <span class="string">&#x27;13688669577&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_macs32vcct&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">699</span>, <span class="string">&#x27;13688669578&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_z5mahfpa9r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">700</span>, <span class="string">&#x27;13688669579&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tn1bnk3zir&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">701</span>, <span class="string">&#x27;13688669580&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_95ajn6osry&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">702</span>, <span class="string">&#x27;13688669581&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qff1n375uc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">703</span>, <span class="string">&#x27;13688669582&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gdjqlq4i6n&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">704</span>, <span class="string">&#x27;13688669583&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_w6tsnpzfqn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">705</span>, <span class="string">&#x27;13688669584&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lqp4c4j2ch&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">706</span>, <span class="string">&#x27;13688669585&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1raii40ps1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">707</span>, <span class="string">&#x27;13688669586&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0r9izz201x&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">708</span>, <span class="string">&#x27;13688669587&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vlrp22q0rk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">709</span>, <span class="string">&#x27;13688669588&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_f7kvbzb8i4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">710</span>, <span class="string">&#x27;13688669589&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yn8nntyyur&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">711</span>, <span class="string">&#x27;13688669590&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_p58nxqajou&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">712</span>, <span class="string">&#x27;13688669591&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_61msspy26k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">713</span>, <span class="string">&#x27;13688669592&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fqb0ch1hh1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">714</span>, <span class="string">&#x27;13688669593&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_oyq3nszclx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">715</span>, <span class="string">&#x27;13688669594&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ggybvkn73t&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">716</span>, <span class="string">&#x27;13688669595&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_po0gph6jgp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">717</span>, <span class="string">&#x27;13688669596&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hlzvh6wl1y&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">718</span>, <span class="string">&#x27;13688669597&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_btb024hqic&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">719</span>, <span class="string">&#x27;13688669598&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wqasvon847&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">720</span>, <span class="string">&#x27;13688669599&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_rdp7fvaz3z&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">721</span>, <span class="string">&#x27;13688669600&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_oh5q9kfkvc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">722</span>, <span class="string">&#x27;13688669601&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ae21kmiles&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">723</span>, <span class="string">&#x27;13688669602&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_b1ouyw3sww&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">724</span>, <span class="string">&#x27;13688669603&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9o5qz4s17l&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">725</span>, <span class="string">&#x27;13688669604&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6urs1iwti9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">726</span>, <span class="string">&#x27;13688669605&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_80pnfhyqyi&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">727</span>, <span class="string">&#x27;13688669606&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mynvmq4zcn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">728</span>, <span class="string">&#x27;13688669607&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_q09fj27oc4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">729</span>, <span class="string">&#x27;13688669608&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v4e7hkfw63&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">730</span>, <span class="string">&#x27;13688669609&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_x4sol5dj4f&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">731</span>, <span class="string">&#x27;13688669610&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v53dsicdtx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">732</span>, <span class="string">&#x27;13688669611&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fcoezs141i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">733</span>, <span class="string">&#x27;13688669612&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_viv3l4o52c&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">734</span>, <span class="string">&#x27;13688669613&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8j4m80dj76&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">735</span>, <span class="string">&#x27;13688669614&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_r65xyt3opb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">736</span>, <span class="string">&#x27;13688669615&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_moi9x442th&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">737</span>, <span class="string">&#x27;13688669616&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qxkltii6ec&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">738</span>, <span class="string">&#x27;13688669617&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_72vsybd20b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">739</span>, <span class="string">&#x27;13688669618&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_eai1g9ltu9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">740</span>, <span class="string">&#x27;13688669619&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_h47ubi7f36&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">741</span>, <span class="string">&#x27;13688669620&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yxo46519hp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">742</span>, <span class="string">&#x27;13688669621&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_499diayvwn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">743</span>, <span class="string">&#x27;13688669622&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ytomkocl3c&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">744</span>, <span class="string">&#x27;13688669623&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_271mt5x5uo&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">745</span>, <span class="string">&#x27;13688669624&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_h5s36mj609&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">746</span>, <span class="string">&#x27;13688669625&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sklzx3z3nq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">747</span>, <span class="string">&#x27;13688669626&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9v2ikjkwm8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">748</span>, <span class="string">&#x27;13688669627&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_w5jjd49ipx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">749</span>, <span class="string">&#x27;13688669628&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3rzokm18yo&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">750</span>, <span class="string">&#x27;13688669629&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vm6zz6ejs7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">751</span>, <span class="string">&#x27;13688669630&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_r494p0jlle&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">752</span>, <span class="string">&#x27;13688669631&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_c50thdpyv0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">753</span>, <span class="string">&#x27;13688669632&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hc4qi0sfo2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">754</span>, <span class="string">&#x27;13688669633&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_w8y4nebzxs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">755</span>, <span class="string">&#x27;13688669634&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mxxqu6isy9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">756</span>, <span class="string">&#x27;13688669635&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sd3f76mtg3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">757</span>, <span class="string">&#x27;13688669636&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6zb026vsmm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">758</span>, <span class="string">&#x27;13688669637&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mzya91331l&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">759</span>, <span class="string">&#x27;13688669638&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_adu5gmym2g&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">760</span>, <span class="string">&#x27;13688669639&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_31bidh90w5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">761</span>, <span class="string">&#x27;13688669640&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_iectlacbk7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">762</span>, <span class="string">&#x27;13688669641&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_by8vl07035&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">763</span>, <span class="string">&#x27;13688669642&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_n8ii3p3b6z&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">764</span>, <span class="string">&#x27;13688669643&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_eopvczuyzq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">765</span>, <span class="string">&#x27;13688669644&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2m36qy9yht&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">766</span>, <span class="string">&#x27;13688669645&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_re1q80zze2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">767</span>, <span class="string">&#x27;13688669646&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lelhu217ad&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">768</span>, <span class="string">&#x27;13688669647&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dyv7ll1h9r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">769</span>, <span class="string">&#x27;13688669648&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7zws9wi4cp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">770</span>, <span class="string">&#x27;13688669649&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tvseis2smv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">771</span>, <span class="string">&#x27;13688669650&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_975ls201ra&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">772</span>, <span class="string">&#x27;13688669651&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0416smxpjc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">773</span>, <span class="string">&#x27;13688669652&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dkdw3wuvxt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">774</span>, <span class="string">&#x27;13688669653&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_d1z5jtfh2g&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">775</span>, <span class="string">&#x27;13688669654&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yg9r3ws35z&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">776</span>, <span class="string">&#x27;13688669655&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9cos7jzgmy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">777</span>, <span class="string">&#x27;13688669656&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_679sq0b6eb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">778</span>, <span class="string">&#x27;13688669657&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kzk5m1pgqv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">779</span>, <span class="string">&#x27;13688669658&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_28qetr02oe&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">780</span>, <span class="string">&#x27;13688669659&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_peazcxx51i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">781</span>, <span class="string">&#x27;13688669660&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_roghf2lerp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">782</span>, <span class="string">&#x27;13688669661&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sth9xhgsoj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">783</span>, <span class="string">&#x27;13688669662&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_38ejcd1npp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">784</span>, <span class="string">&#x27;13688669663&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_m0y48rqbxs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">785</span>, <span class="string">&#x27;13688669664&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_a0f919rrdw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">786</span>, <span class="string">&#x27;13688669665&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_veddhmnfa7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">787</span>, <span class="string">&#x27;13688669666&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ltexwx6bm6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">788</span>, <span class="string">&#x27;13688669667&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_euqn9si8dg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">789</span>, <span class="string">&#x27;13688669668&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wm4s4v0o87&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">790</span>, <span class="string">&#x27;13688669669&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mthbqaorve&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">791</span>, <span class="string">&#x27;13688669670&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_k63cindeeh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">792</span>, <span class="string">&#x27;13688669671&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kz30acb48r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">793</span>, <span class="string">&#x27;13688669672&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1jmeyd8a28&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">794</span>, <span class="string">&#x27;13688669673&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_su5oi3kpfx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">795</span>, <span class="string">&#x27;13688669674&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4eurdp0387&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">796</span>, <span class="string">&#x27;13688669675&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_orxdegd4d4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">797</span>, <span class="string">&#x27;13688669676&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_50vxeli8rd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">798</span>, <span class="string">&#x27;13688669677&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vqsnl66ot5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">799</span>, <span class="string">&#x27;13688669678&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_en3q7qyiqb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">800</span>, <span class="string">&#x27;13688669679&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0yyk9mnng0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">801</span>, <span class="string">&#x27;13688669680&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_l48qjtjmxl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">802</span>, <span class="string">&#x27;13688669681&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1wvigh2hxq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">803</span>, <span class="string">&#x27;13688669682&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gr0bhwfvhu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">804</span>, <span class="string">&#x27;13688669683&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qpku5s9nr6&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">805</span>, <span class="string">&#x27;13688669684&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kyhepj12kd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">806</span>, <span class="string">&#x27;13688669685&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3x99ypxvqy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">807</span>, <span class="string">&#x27;13688669686&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_np8bk7b07w&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">808</span>, <span class="string">&#x27;13688669687&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dnu8kswk6o&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">809</span>, <span class="string">&#x27;13688669688&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_u01mnauofu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">810</span>, <span class="string">&#x27;13688669689&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_48sv36r3xs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">811</span>, <span class="string">&#x27;13688669690&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6ojf6nhxch&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">812</span>, <span class="string">&#x27;13688669691&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wd32jqla7r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">813</span>, <span class="string">&#x27;13688669692&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_zsdxxcpkuq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">814</span>, <span class="string">&#x27;13688669693&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ib97xw8nl2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">815</span>, <span class="string">&#x27;13688669694&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_b7qb56z1p0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">816</span>, <span class="string">&#x27;13688669695&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_i7jmrgmisg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">817</span>, <span class="string">&#x27;13688669696&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5nf21zmos7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">818</span>, <span class="string">&#x27;13688669697&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mck6nqe55g&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">819</span>, <span class="string">&#x27;13688669698&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6xnadvfus7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">820</span>, <span class="string">&#x27;13688669699&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_450u8mqe4z&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">821</span>, <span class="string">&#x27;13688669700&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hv55cq5n1w&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">822</span>, <span class="string">&#x27;13688669701&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qiy3ulbyd0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">823</span>, <span class="string">&#x27;13688669702&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sx58542ugn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">824</span>, <span class="string">&#x27;13688669703&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9xs0uuyds5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">825</span>, <span class="string">&#x27;13688669704&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_zveuo0azp4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">826</span>, <span class="string">&#x27;13688669705&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qwt4x5faay&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">827</span>, <span class="string">&#x27;13688669706&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ztzuqeybvp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">828</span>, <span class="string">&#x27;13688669707&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kh5n7wfie8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">829</span>, <span class="string">&#x27;13688669708&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dwxkvw03b7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">830</span>, <span class="string">&#x27;13688669709&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3tyhv91k7p&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">831</span>, <span class="string">&#x27;13688669710&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0jwdppbvdk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">832</span>, <span class="string">&#x27;13688669711&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_twx4z08vzb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">833</span>, <span class="string">&#x27;13688669712&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lly5v9ibpk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">834</span>, <span class="string">&#x27;13688669713&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_kkho7xpu2u&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">835</span>, <span class="string">&#x27;13688669714&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_l51d2os1wh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">836</span>, <span class="string">&#x27;13688669715&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_i6gkyfawkv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">837</span>, <span class="string">&#x27;13688669716&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v2k5vdh4he&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">838</span>, <span class="string">&#x27;13688669717&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7k9ql2go9e&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">839</span>, <span class="string">&#x27;13688669718&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tnz3f99w2c&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">840</span>, <span class="string">&#x27;13688669719&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_833zw6fgxz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">841</span>, <span class="string">&#x27;13688669720&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_f4hq0ga1oj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">842</span>, <span class="string">&#x27;13688669721&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_uxuxrig26t&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">843</span>, <span class="string">&#x27;13688669722&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_grn37re7bg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">844</span>, <span class="string">&#x27;13688669723&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5msjf8z2fj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">845</span>, <span class="string">&#x27;13688669724&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_53x3w7l7mv&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">846</span>, <span class="string">&#x27;13688669725&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pyolvy8m0v&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">847</span>, <span class="string">&#x27;13688669726&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_12i4hpk09n&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">848</span>, <span class="string">&#x27;13688669727&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_zjhyyt7zfq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">849</span>, <span class="string">&#x27;13688669728&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_avv8zgw4qk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">850</span>, <span class="string">&#x27;13688669729&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_khxmnqb6ni&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">851</span>, <span class="string">&#x27;13688669730&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_i80iu0pb5k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">852</span>, <span class="string">&#x27;13688669731&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lqkx9uurmj&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">853</span>, <span class="string">&#x27;13688669732&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ewiswre8fm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">854</span>, <span class="string">&#x27;13688669733&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_d0nwznn64y&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">855</span>, <span class="string">&#x27;13688669734&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v7wyz44u6m&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">856</span>, <span class="string">&#x27;13688669735&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ipkx0z0nno&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">857</span>, <span class="string">&#x27;13688669736&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_64tnyqwxun&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">858</span>, <span class="string">&#x27;13688669737&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_r9bjp3fegg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">859</span>, <span class="string">&#x27;13688669738&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_i36s8hsq72&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">860</span>, <span class="string">&#x27;13688669739&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cqe1zvq4dr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">861</span>, <span class="string">&#x27;13688669740&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_omdgisd0ls&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">862</span>, <span class="string">&#x27;13688669741&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3mgz8z636y&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">863</span>, <span class="string">&#x27;13688669742&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ts3qtzwp68&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">864</span>, <span class="string">&#x27;13688669743&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_56seol3kxp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">865</span>, <span class="string">&#x27;13688669744&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4x55muo0si&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">866</span>, <span class="string">&#x27;13688669745&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ny46fscq78&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">867</span>, <span class="string">&#x27;13688669746&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_raano2keb9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">868</span>, <span class="string">&#x27;13688669747&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_31m00sj2bt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">869</span>, <span class="string">&#x27;13688669748&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2ovmzeq4f3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">870</span>, <span class="string">&#x27;13688669749&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_dis12x5ko3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">871</span>, <span class="string">&#x27;13688669750&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jx9defd5pu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">872</span>, <span class="string">&#x27;13688669751&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_k3u9zems0n&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">873</span>, <span class="string">&#x27;13688669752&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_o84aucm31f&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">874</span>, <span class="string">&#x27;13688669753&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_h4msccd8qo&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">875</span>, <span class="string">&#x27;13688669754&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6sk051bxed&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">876</span>, <span class="string">&#x27;13688669755&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1s1r4kks05&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">877</span>, <span class="string">&#x27;13688669756&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2pfvfdb27x&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">878</span>, <span class="string">&#x27;13688669757&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_k5nxhuil69&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">879</span>, <span class="string">&#x27;13688669758&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6wu2vujv7x&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">880</span>, <span class="string">&#x27;13688669759&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_05jr9c63o0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">881</span>, <span class="string">&#x27;13688669760&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cc2l1lrlw5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">882</span>, <span class="string">&#x27;13688669761&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ieeqrlof8f&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">883</span>, <span class="string">&#x27;13688669762&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6m5ermqkua&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">884</span>, <span class="string">&#x27;13688669763&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mh99rug0nh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">885</span>, <span class="string">&#x27;13688669764&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_n55ceoc392&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">886</span>, <span class="string">&#x27;13688669765&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_72vzhk8py3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">887</span>, <span class="string">&#x27;13688669766&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bthii5wt36&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">888</span>, <span class="string">&#x27;13688669767&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mut3q0vunf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">889</span>, <span class="string">&#x27;13688669768&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_symgsydmbd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">890</span>, <span class="string">&#x27;13688669769&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7qs7kedl19&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">891</span>, <span class="string">&#x27;13688669770&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_uwyx1i29m0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">892</span>, <span class="string">&#x27;13688669771&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ls2p6sldmi&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">893</span>, <span class="string">&#x27;13688669772&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1kmmkpegso&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">894</span>, <span class="string">&#x27;13688669773&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4zp483y1e7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">895</span>, <span class="string">&#x27;13688669774&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nr78kan9c3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">896</span>, <span class="string">&#x27;13688669775&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0r0m7ngv6x&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">897</span>, <span class="string">&#x27;13688669776&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_lknjznxmau&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">898</span>, <span class="string">&#x27;13688669777&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v9g6j6h0ah&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">899</span>, <span class="string">&#x27;13688669778&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wuyim37fx5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">900</span>, <span class="string">&#x27;13688669779&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_l0lfqjjzs0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">901</span>, <span class="string">&#x27;13688669780&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6uyxk7pa4u&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">902</span>, <span class="string">&#x27;13688669781&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_f17o0qymn9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">903</span>, <span class="string">&#x27;13688669782&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ogpqk1b39a&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">904</span>, <span class="string">&#x27;13688669783&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9jpofrgda1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">905</span>, <span class="string">&#x27;13688669784&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_n298v8udm3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">906</span>, <span class="string">&#x27;13688669785&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_0biwjc5wwt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">907</span>, <span class="string">&#x27;13688669786&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_xbbdx6wq53&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">908</span>, <span class="string">&#x27;13688669787&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nh79qly5ir&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">909</span>, <span class="string">&#x27;13688669788&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_v86oajknbs&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">910</span>, <span class="string">&#x27;13688669789&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e13odsshad&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">911</span>, <span class="string">&#x27;13688669790&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6cvwrirdtl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">912</span>, <span class="string">&#x27;13688669791&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_nqr7bpgz67&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">913</span>, <span class="string">&#x27;13688669792&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wn1ae0p6gw&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">914</span>, <span class="string">&#x27;13688669793&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_te48rluimb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">915</span>, <span class="string">&#x27;13688669794&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_p2r85n4k8g&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">916</span>, <span class="string">&#x27;13688669795&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ca8fdlrbty&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">917</span>, <span class="string">&#x27;13688669796&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_toque00p0i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">918</span>, <span class="string">&#x27;13688669797&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_uiti5cdbhf&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">919</span>, <span class="string">&#x27;13688669798&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8pgku7viy8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">920</span>, <span class="string">&#x27;13688669799&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cdafki4cwc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">921</span>, <span class="string">&#x27;13688669800&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fyyk2yfpk5&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">922</span>, <span class="string">&#x27;13688669801&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_78e1meevls&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">923</span>, <span class="string">&#x27;13688669802&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qzwls7m33b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">924</span>, <span class="string">&#x27;13688669803&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jxuw8ixefk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">925</span>, <span class="string">&#x27;13688669804&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1xye60infx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">926</span>, <span class="string">&#x27;13688669805&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gvccna2mni&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">927</span>, <span class="string">&#x27;13688669806&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tftvpegd2c&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">928</span>, <span class="string">&#x27;13688669807&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6ihh78vpox&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">929</span>, <span class="string">&#x27;13688669808&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_46qroyojdl&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">930</span>, <span class="string">&#x27;13688669809&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wwi4i2wb77&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">931</span>, <span class="string">&#x27;13688669810&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_s28l0bryil&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">932</span>, <span class="string">&#x27;13688669811&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4lgib8jvrx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">933</span>, <span class="string">&#x27;13688669812&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fczpz5s31b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">934</span>, <span class="string">&#x27;13688669813&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3cvkn9pv9w&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">935</span>, <span class="string">&#x27;13688669814&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wtvk7gx8ar&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">936</span>, <span class="string">&#x27;13688669815&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yrel6rbyyd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">937</span>, <span class="string">&#x27;13688669816&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hmxjnsbnon&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">938</span>, <span class="string">&#x27;13688669817&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cuxcl0d2oo&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">939</span>, <span class="string">&#x27;13688669818&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1ax8x9zw0c&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">940</span>, <span class="string">&#x27;13688669819&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_p7v98oe5nm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">941</span>, <span class="string">&#x27;13688669820&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_m90rt3bwsz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">942</span>, <span class="string">&#x27;13688669821&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_xhty5jm1hy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">943</span>, <span class="string">&#x27;13688669822&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7h88k22eo0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">944</span>, <span class="string">&#x27;13688669823&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5a75z9jcqa&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">945</span>, <span class="string">&#x27;13688669824&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3t0twwq0nh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">946</span>, <span class="string">&#x27;13688669825&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_861ywr4gfr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">947</span>, <span class="string">&#x27;13688669826&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_iwkz8k1zpx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">948</span>, <span class="string">&#x27;13688669827&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vzmhyoz1ap&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">949</span>, <span class="string">&#x27;13688669828&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5tmpddukgq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">950</span>, <span class="string">&#x27;13688669829&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_h6siyam4hb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">951</span>, <span class="string">&#x27;13688669830&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_n5yqq6mgka&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">952</span>, <span class="string">&#x27;13688669831&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_an9epa7f2r&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">953</span>, <span class="string">&#x27;13688669832&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5vr0cdy8sz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">954</span>, <span class="string">&#x27;13688669833&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_xpanlhqjbq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">955</span>, <span class="string">&#x27;13688669834&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_3cfykc172m&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">956</span>, <span class="string">&#x27;13688669835&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1n0jceyzim&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">957</span>, <span class="string">&#x27;13688669836&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4ixi7efxtr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">958</span>, <span class="string">&#x27;13688669837&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_5adpp336iy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">959</span>, <span class="string">&#x27;13688669838&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_mflzjd6e6b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">960</span>, <span class="string">&#x27;13688669839&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_80bwfj72p7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">961</span>, <span class="string">&#x27;13688669840&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_i3anusitco&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">962</span>, <span class="string">&#x27;13688669841&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yj4pcsrkl9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">963</span>, <span class="string">&#x27;13688669842&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7v9x6gxjdz&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">964</span>, <span class="string">&#x27;13688669843&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_2ahufmnyzp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">965</span>, <span class="string">&#x27;13688669844&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_1oel6c441t&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">966</span>, <span class="string">&#x27;13688669845&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qxzcv0ib6g&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">967</span>, <span class="string">&#x27;13688669846&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9uyh0i8ykg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">968</span>, <span class="string">&#x27;13688669847&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tb01d4d9ql&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">969</span>, <span class="string">&#x27;13688669848&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_hwpkx6ovii&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">970</span>, <span class="string">&#x27;13688669849&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pqd04q9hq2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">971</span>, <span class="string">&#x27;13688669850&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4t7wkgkufh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">972</span>, <span class="string">&#x27;13688669851&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_834e4vzf0e&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">973</span>, <span class="string">&#x27;13688669852&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_pxk4urlnmo&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:52&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">974</span>, <span class="string">&#x27;13688669853&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_e3x6n0ff0d&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">975</span>, <span class="string">&#x27;13688669854&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_wxnvsvb5ut&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">976</span>, <span class="string">&#x27;13688669855&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ehi7k4zpjb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">977</span>, <span class="string">&#x27;13688669856&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_om0pzyh3z1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">978</span>, <span class="string">&#x27;13688669857&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_9asdqbe7od&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">979</span>, <span class="string">&#x27;13688669858&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_seuabngxt9&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">980</span>, <span class="string">&#x27;13688669859&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_b0qvb27eiy&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">981</span>, <span class="string">&#x27;13688669860&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_63sjue2tkh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">982</span>, <span class="string">&#x27;13688669861&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cc3lvxfr1u&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">983</span>, <span class="string">&#x27;13688669862&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_in37hfw5tk&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">984</span>, <span class="string">&#x27;13688669863&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jtg0c9tyqn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">985</span>, <span class="string">&#x27;13688669864&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qzpipaj50w&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">986</span>, <span class="string">&#x27;13688669865&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ppnb4ljetq&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">987</span>, <span class="string">&#x27;13688669866&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_zbcui7783k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">988</span>, <span class="string">&#x27;13688669867&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ki4dxb9q9b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">989</span>, <span class="string">&#x27;13688669868&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_27b5dxktn0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">990</span>, <span class="string">&#x27;13688669869&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_fxvb2av882&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">991</span>, <span class="string">&#x27;13688669870&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_6vp3uflnwm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">992</span>, <span class="string">&#x27;13688669871&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_7ix7djbg30&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">993</span>, <span class="string">&#x27;13688669872&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_vx8r39tjiu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">994</span>, <span class="string">&#x27;13688669873&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_l2wdiwule0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">995</span>, <span class="string">&#x27;13688669874&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_z4qe1up5zx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">996</span>, <span class="string">&#x27;13688669875&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bklo4b32lu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">997</span>, <span class="string">&#x27;13688669876&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_ax0y473ndh&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">998</span>, <span class="string">&#x27;13688669877&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_yx2p44qww3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">999</span>, <span class="string">&#x27;13688669878&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_bnw9bzib34&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1000</span>, <span class="string">&#x27;13688669879&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_cdj4ojh4pc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1001</span>, <span class="string">&#x27;13688669880&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_l7o3r96hn3&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1002</span>, <span class="string">&#x27;13688669881&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_zbehzrz279&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1003</span>, <span class="string">&#x27;13688669882&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_tql21zepcx&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1004</span>, <span class="string">&#x27;13688669883&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_jnxnrk8qt0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1005</span>, <span class="string">&#x27;13688669884&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_8e5twg6q0k&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1006</span>, <span class="string">&#x27;13688669885&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_gfeusukbpp&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1007</span>, <span class="string">&#x27;13688669886&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_sveivfswhn&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1008</span>, <span class="string">&#x27;13688669887&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_qgf4t8jkx0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1009</span>, <span class="string">&#x27;13688669888&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user_4qh6bofkol&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>, <span class="string">&#x27;2022-02-28 10:50:53&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="个人信息表"><a href="#个人信息表" class="headerlink" title="个人信息表"></a>个人信息表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_user_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user_info`  (</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键，用户id&#x27;</span>,</span><br><span class="line">  `city` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;城市名称&#x27;</span>,</span><br><span class="line">  `introduce` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;个人介绍，不要超过128个字符&#x27;</span>,</span><br><span class="line">  `fans` <span class="type">int</span>(<span class="number">8</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;粉丝数量&#x27;</span>,</span><br><span class="line">  `followee` <span class="type">int</span>(<span class="number">8</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;关注的人的数量&#x27;</span>,</span><br><span class="line">  `gender` tinyint(<span class="number">1</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;性别，0：男，1：女&#x27;</span>,</span><br><span class="line">  `birthday` <span class="type">date</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">  `credits` <span class="type">int</span>(<span class="number">8</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;积分&#x27;</span>,</span><br><span class="line">  `level` tinyint(<span class="number">1</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;会员级别，0~9级,0代表未开通会员&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br></pre></td></tr></table></figure><h1 id="商户表"><a href="#商户表" class="headerlink" title="商户表"></a>商户表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_shop`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_shop`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商铺名称&#x27;</span>,</span><br><span class="line">  `type_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商铺类型的id&#x27;</span>,</span><br><span class="line">  `images` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商铺图片，多个图片以\&#x27;</span>,\<span class="string">&#x27;隔开&#x27;</span>,</span><br><span class="line">  `area` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商圈，例如陆家嘴&#x27;</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  `x` <span class="keyword">double</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;经度&#x27;</span>,</span><br><span class="line">  `y` <span class="keyword">double</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;维度&#x27;</span>,</span><br><span class="line">  `avg_price` <span class="type">bigint</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;均价，取整数&#x27;</span>,</span><br><span class="line">  `sold` <span class="type">int</span>(<span class="number">10</span>) UNSIGNED ZEROFILL <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">  `comments` <span class="type">int</span>(<span class="number">10</span>) UNSIGNED ZEROFILL <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;评论数量&#x27;</span>,</span><br><span class="line">  `score` <span class="type">int</span>(<span class="number">2</span>) UNSIGNED ZEROFILL <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;评分，1~5分，乘10保存，避免小数&#x27;</span>,</span><br><span class="line">  `open_hours` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;营业时间，例如 10:00-22:00&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `foreign_key_type`(`type_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">15</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br></pre></td></tr></table></figure><h2 id="数据-1"><a href="#数据-1" class="headerlink" title="数据"></a>数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;103茶餐厅&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;https://qcloud.dpfile.com/pc/jiclIsCKmOI2arxKN1Uf0Hx3PucIJH8q0QSz-Z8llzcN56-_QiKuOvyio1OOxsRtFoXqu0G3iT2T27qat3WhLVEuLYk00OmSS1IdNpm8K8sG4JN9RIm2mTKcbLtc2o2vfCF2ubeXzk49OsGrXt_KYDCngOyCwZK-s3fqawWswzk.jpg,https://qcloud.dpfile.com/pc/IOf6VX3qaBgFXFVgp75w-KKJmWZjFc8GXDU8g9bQC6YGCpAmG00QbfT4vCCBj7njuzFvxlbkWx5uwqY2qcjixFEuLYk00OmSS1IdNpm8K8sG4JN9RIm2mTKcbLtc2o2vmIU_8ZGOT1OjpJmLxG6urQ.jpg&#x27;</span>, <span class="string">&#x27;大关&#x27;</span>, <span class="string">&#x27;金华路锦昌文华苑29号&#x27;</span>, <span class="number">120.149192</span>, <span class="number">30.316078</span>, <span class="number">80</span>, <span class="number">0000004215</span>, <span class="number">0000003035</span>, <span class="number">37</span>, <span class="string">&#x27;10:00-22:00&#x27;</span>, <span class="string">&#x27;2021-12-22 18:10:39&#x27;</span>, <span class="string">&#x27;2022-01-13 17:32:19&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;蔡馬洪涛烤肉·老北京铜锅涮羊肉&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;https://p0.meituan.net/bbia/c1870d570e73accbc9fee90b48faca41195272.jpg,http://p0.meituan.net/mogu/397e40c28fc87715b3d5435710a9f88d706914.jpg,https://qcloud.dpfile.com/pc/MZTdRDqCZdbPDUO0Hk6lZENRKzpKRF7kavrkEI99OxqBZTzPfIxa5E33gBfGouhFuzFvxlbkWx5uwqY2qcjixFEuLYk00OmSS1IdNpm8K8sG4JN9RIm2mTKcbLtc2o2vmIU_8ZGOT1OjpJmLxG6urQ.jpg&#x27;</span>, <span class="string">&#x27;拱宸桥/上塘&#x27;</span>, <span class="string">&#x27;上塘路1035号（中国工商银行旁）&#x27;</span>, <span class="number">120.151505</span>, <span class="number">30.333422</span>, <span class="number">85</span>, <span class="number">0000002160</span>, <span class="number">0000001460</span>, <span class="number">46</span>, <span class="string">&#x27;11:30-03:00&#x27;</span>, <span class="string">&#x27;2021-12-22 19:00:13&#x27;</span>, <span class="string">&#x27;2022-01-11 16:12:26&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;新白鹿餐厅(运河上街店)&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;https://p0.meituan.net/biztone/694233_1619500156517.jpeg,https://img.meituan.net/msmerchant/876ca8983f7395556eda9ceb064e6bc51840883.png,https://img.meituan.net/msmerchant/86a76ed53c28eff709a36099aefe28b51554088.png&#x27;</span>, <span class="string">&#x27;运河上街&#x27;</span>, <span class="string">&#x27;台州路2号运河上街购物中心F5&#x27;</span>, <span class="number">120.151954</span>, <span class="number">30.32497</span>, <span class="number">61</span>, <span class="number">0000012035</span>, <span class="number">0000008045</span>, <span class="number">47</span>, <span class="string">&#x27;10:30-21:00&#x27;</span>, <span class="string">&#x27;2021-12-22 19:10:05&#x27;</span>, <span class="string">&#x27;2022-01-11 16:12:42&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;Mamala(杭州远洋乐堤港店)&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;https://img.meituan.net/msmerchant/232f8fdf09050838bd33fb24e79f30f9606056.jpg,https://qcloud.dpfile.com/pc/rDe48Xe15nQOHCcEEkmKUp5wEKWbimt-HDeqYRWsYJseXNncvMiXbuED7x1tXqN4uzFvxlbkWx5uwqY2qcjixFEuLYk00OmSS1IdNpm8K8sG4JN9RIm2mTKcbLtc2o2vmIU_8ZGOT1OjpJmLxG6urQ.jpg&#x27;</span>, <span class="string">&#x27;拱宸桥/上塘&#x27;</span>, <span class="string">&#x27;丽水路66号远洋乐堤港商城2期1层B115号&#x27;</span>, <span class="number">120.146659</span>, <span class="number">30.312742</span>, <span class="number">290</span>, <span class="number">0000013519</span>, <span class="number">0000009529</span>, <span class="number">49</span>, <span class="string">&#x27;11:00-22:00&#x27;</span>, <span class="string">&#x27;2021-12-22 19:17:15&#x27;</span>, <span class="string">&#x27;2022-01-11 16:12:51&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;海底捞火锅(水晶城购物中心店）&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;https://img.meituan.net/msmerchant/054b5de0ba0b50c18a620cc37482129a45739.jpg,https://img.meituan.net/msmerchant/59b7eff9b60908d52bd4aea9ff356e6d145920.jpg,https://qcloud.dpfile.com/pc/Qe2PTEuvtJ5skpUXKKoW9OQ20qc7nIpHYEqJGBStJx0mpoyeBPQOJE4vOdYZwm9AuzFvxlbkWx5uwqY2qcjixFEuLYk00OmSS1IdNpm8K8sG4JN9RIm2mTKcbLtc2o2vmIU_8ZGOT1OjpJmLxG6urQ.jpg&#x27;</span>, <span class="string">&#x27;大关&#x27;</span>, <span class="string">&#x27;上塘路458号水晶城购物中心F6&#x27;</span>, <span class="number">120.15778</span>, <span class="number">30.310633</span>, <span class="number">104</span>, <span class="number">0000004125</span>, <span class="number">0000002764</span>, <span class="number">49</span>, <span class="string">&#x27;10:00-07:00&#x27;</span>, <span class="string">&#x27;2021-12-22 19:20:58&#x27;</span>, <span class="string">&#x27;2022-01-11 16:13:01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;幸福里老北京涮锅（丝联店）&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;https://img.meituan.net/msmerchant/e71a2d0d693b3033c15522c43e03f09198239.jpg,https://img.meituan.net/msmerchant/9f8a966d60ffba00daf35458522273ca658239.jpg,https://img.meituan.net/msmerchant/ef9ca5ef6c05d381946fe4a9aa7d9808554502.jpg&#x27;</span>, <span class="string">&#x27;拱宸桥/上塘&#x27;</span>, <span class="string">&#x27;金华南路189号丝联166号&#x27;</span>, <span class="number">120.148603</span>, <span class="number">30.318618</span>, <span class="number">130</span>, <span class="number">0000009531</span>, <span class="number">0000007324</span>, <span class="number">46</span>, <span class="string">&#x27;11:00-13:50,17:00-20:50&#x27;</span>, <span class="string">&#x27;2021-12-22 19:24:53&#x27;</span>, <span class="string">&#x27;2022-01-11 16:13:09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;炉鱼(拱墅万达广场店)&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;https://img.meituan.net/msmerchant/909434939a49b36f340523232924402166854.jpg,https://img.meituan.net/msmerchant/32fd2425f12e27db0160e837461c10303700032.jpg,https://img.meituan.net/msmerchant/f7022258ccb8dabef62a0514d3129562871160.jpg&#x27;</span>, <span class="string">&#x27;北部新城&#x27;</span>, <span class="string">&#x27;杭行路666号万达商业中心4幢2单元409室(铺位号4005)&#x27;</span>, <span class="number">120.124691</span>, <span class="number">30.336819</span>, <span class="number">85</span>, <span class="number">0000002631</span>, <span class="number">0000001320</span>, <span class="number">47</span>, <span class="string">&#x27;00:00-24:00&#x27;</span>, <span class="string">&#x27;2021-12-22 19:40:52&#x27;</span>, <span class="string">&#x27;2022-01-11 16:13:19&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;浅草屋寿司（运河上街店）&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;https://img.meituan.net/msmerchant/cf3dff697bf7f6e11f4b79c4e7d989e4591290.jpg,https://img.meituan.net/msmerchant/0b463f545355c8d8f021eb2987dcd0c8567811.jpg,https://img.meituan.net/msmerchant/c3c2516939efaf36c4ccc64b0e629fad587907.jpg&#x27;</span>, <span class="string">&#x27;运河上街&#x27;</span>, <span class="string">&#x27;拱墅区金华路80号运河上街B1&#x27;</span>, <span class="number">120.150526</span>, <span class="number">30.325231</span>, <span class="number">88</span>, <span class="number">0000002406</span>, <span class="number">0000001206</span>, <span class="number">46</span>, <span class="string">&#x27; 11:00-21:30&#x27;</span>, <span class="string">&#x27;2021-12-22 19:51:06&#x27;</span>, <span class="string">&#x27;2022-01-11 16:13:25&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;羊老三羊蝎子牛仔排北派炭火锅(运河上街店)&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;https://p0.meituan.net/biztone/163160492_1624251899456.jpeg,https://img.meituan.net/msmerchant/e478eb16f7e31a7f8b29b5e3bab6de205500837.jpg,https://img.meituan.net/msmerchant/6173eb1d18b9d70ace7fdb3f2dd939662884857.jpg&#x27;</span>, <span class="string">&#x27;运河上街&#x27;</span>, <span class="string">&#x27;台州路2号运河上街购物中心F5&#x27;</span>, <span class="number">120.150598</span>, <span class="number">30.325251</span>, <span class="number">101</span>, <span class="number">0000002763</span>, <span class="number">0000001363</span>, <span class="number">44</span>, <span class="string">&#x27;11:00-21:30&#x27;</span>, <span class="string">&#x27;2021-12-22 19:53:59&#x27;</span>, <span class="string">&#x27;2022-01-11 16:13:34&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;开乐迪KTV（运河上街店）&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;https://p0.meituan.net/joymerchant/a575fd4adb0b9099c5c410058148b307-674435191.jpg,https://p0.meituan.net/merchantpic/68f11bf850e25e437c5f67decfd694ab2541634.jpg,https://p0.meituan.net/dpdeal/cb3a12225860ba2875e4ea26c6d14fcc197016.jpg&#x27;</span>, <span class="string">&#x27;运河上街&#x27;</span>, <span class="string">&#x27;台州路2号运河上街购物中心F4&#x27;</span>, <span class="number">120.149093</span>, <span class="number">30.324666</span>, <span class="number">67</span>, <span class="number">0000026891</span>, <span class="number">0000000902</span>, <span class="number">37</span>, <span class="string">&#x27;00:00-24:00&#x27;</span>, <span class="string">&#x27;2021-12-22 20:25:16&#x27;</span>, <span class="string">&#x27;2021-12-22 20:25:16&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;INLOVE KTV(水晶城店)&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;https://p0.meituan.net/dpmerchantpic/53e74b200211d68988a4f02ae9912c6c1076826.jpg,https://qcloud.dpfile.com/pc/4iWtIvzLzwM2MGgyPu1PCDb4SWEaKqUeHm--YAt1EwR5tn8kypBcqNwHnjg96EvT_Gd2X_f-v9T8Yj4uLt25Gg.jpg,https://qcloud.dpfile.com/pc/WZsJWRI447x1VG2x48Ujgu7vwqksi_9WitdKI4j3jvIgX4MZOpGNaFtM93oSSizbGybIjx5eX6WNgCPvcASYAw.jpg&#x27;</span>, <span class="string">&#x27;水晶城&#x27;</span>, <span class="string">&#x27;上塘路458号水晶城购物中心6层&#x27;</span>, <span class="number">120.15853</span>, <span class="number">30.310002</span>, <span class="number">75</span>, <span class="number">0000035977</span>, <span class="number">0000005684</span>, <span class="number">47</span>, <span class="string">&#x27;11:30-06:00&#x27;</span>, <span class="string">&#x27;2021-12-22 20:29:02&#x27;</span>, <span class="string">&#x27;2021-12-22 20:39:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;魅(杭州远洋乐堤港店)&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;https://p0.meituan.net/dpmerchantpic/63833f6ba0393e2e8722420ef33f3d40466664.jpg,https://p0.meituan.net/dpmerchantpic/ae3c94cc92c529c4b1d7f68cebed33fa105810.png,&#x27;</span>, <span class="string">&#x27;远洋乐堤港&#x27;</span>, <span class="string">&#x27;丽水路58号远洋乐堤港F4&#x27;</span>, <span class="number">120.14983</span>, <span class="number">30.31211</span>, <span class="number">88</span>, <span class="number">0000006444</span>, <span class="number">0000000235</span>, <span class="number">46</span>, <span class="string">&#x27;10:00-02:00&#x27;</span>, <span class="string">&#x27;2021-12-22 20:34:34&#x27;</span>, <span class="string">&#x27;2021-12-22 20:34:34&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;讴K拉量贩KTV(北城天地店)&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;https://p1.meituan.net/merchantpic/598c83a8c0d06fe79ca01056e214d345875600.jpg,https://qcloud.dpfile.com/pc/HhvI0YyocYHRfGwJWqPQr34hRGRl4cWdvlNwn3dqghvi4WXlM2FY1te0-7pE3Wb9_Gd2X_f-v9T8Yj4uLt25Gg.jpg,https://qcloud.dpfile.com/pc/F5ZVzZaXFE27kvQzPnaL4V8O9QCpVw2nkzGrxZE8BqXgkfyTpNExfNG5CEPQX4pjGybIjx5eX6WNgCPvcASYAw.jpg&#x27;</span>, <span class="string">&#x27;D32天阳购物中心&#x27;</span>, <span class="string">&#x27;湖州街567号北城天地5层&#x27;</span>, <span class="number">120.130453</span>, <span class="number">30.327655</span>, <span class="number">58</span>, <span class="number">0000018997</span>, <span class="number">0000001857</span>, <span class="number">41</span>, <span class="string">&#x27;12:00-02:00&#x27;</span>, <span class="string">&#x27;2021-12-22 20:38:54&#x27;</span>, <span class="string">&#x27;2021-12-22 20:40:04&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop` <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;星聚会KTV(拱墅区万达店)&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;https://p0.meituan.net/dpmerchantpic/f4cd6d8d4eb1959c3ea826aa05a552c01840451.jpg,https://p0.meituan.net/dpmerchantpic/2efc07aed856a8ab0fc75c86f4b9b0061655777.jpg,https://qcloud.dpfile.com/pc/zWfzzIorCohKT0bFwsfAlHuayWjI6DBEMPHHncmz36EEMU9f48PuD9VxLLDAjdoU_Gd2X_f-v9T8Yj4uLt25Gg.jpg&#x27;</span>, <span class="string">&#x27;北部新城&#x27;</span>, <span class="string">&#x27;杭行路666号万达广场C座1-2F&#x27;</span>, <span class="number">120.128958</span>, <span class="number">30.337252</span>, <span class="number">60</span>, <span class="number">0000017771</span>, <span class="number">0000000685</span>, <span class="number">47</span>, <span class="string">&#x27;10:00-22:00&#x27;</span>, <span class="string">&#x27;2021-12-22 20:48:54&#x27;</span>, <span class="string">&#x27;2021-12-22 20:48:54&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="商户类型表"><a href="#商户类型表" class="headerlink" title="商户类型表"></a>商户类型表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_shop_type`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_shop_type`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;类型名称&#x27;</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图标&#x27;</span>,</span><br><span class="line">  `sort` <span class="type">int</span>(<span class="number">3</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;顺序&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">11</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br></pre></td></tr></table></figure><h2 id="数据-2"><a href="#数据-2" class="headerlink" title="数据"></a>数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop_type` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;美食&#x27;</span>, <span class="string">&#x27;/types/ms.png&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2021-12-22 20:17:47&#x27;</span>, <span class="string">&#x27;2021-12-23 11:24:31&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop_type` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;KTV&#x27;</span>, <span class="string">&#x27;/types/KTV.png&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2021-12-22 20:18:27&#x27;</span>, <span class="string">&#x27;2021-12-23 11:24:31&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop_type` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;丽人·美发&#x27;</span>, <span class="string">&#x27;/types/lrmf.png&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;2021-12-22 20:18:48&#x27;</span>, <span class="string">&#x27;2021-12-23 11:24:31&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop_type` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;健身运动&#x27;</span>, <span class="string">&#x27;/types/jsyd.png&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;2021-12-22 20:19:04&#x27;</span>, <span class="string">&#x27;2021-12-23 11:24:31&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop_type` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;按摩·足疗&#x27;</span>, <span class="string">&#x27;/types/amzl.png&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;2021-12-22 20:19:27&#x27;</span>, <span class="string">&#x27;2021-12-23 11:24:31&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop_type` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;美容SPA&#x27;</span>, <span class="string">&#x27;/types/spa.png&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;2021-12-22 20:19:35&#x27;</span>, <span class="string">&#x27;2021-12-23 11:24:31&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop_type` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;亲子游乐&#x27;</span>, <span class="string">&#x27;/types/qzyl.png&#x27;</span>, <span class="number">7</span>, <span class="string">&#x27;2021-12-22 20:19:53&#x27;</span>, <span class="string">&#x27;2021-12-23 11:24:31&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop_type` <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;酒吧&#x27;</span>, <span class="string">&#x27;/types/jiuba.png&#x27;</span>, <span class="number">8</span>, <span class="string">&#x27;2021-12-22 20:20:02&#x27;</span>, <span class="string">&#x27;2021-12-23 11:24:31&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop_type` <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;轰趴馆&#x27;</span>, <span class="string">&#x27;/types/hpg.png&#x27;</span>, <span class="number">9</span>, <span class="string">&#x27;2021-12-22 20:20:08&#x27;</span>, <span class="string">&#x27;2021-12-23 11:24:31&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_shop_type` <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;美睫·美甲&#x27;</span>, <span class="string">&#x27;/types/mjmj.png&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;2021-12-22 20:21:46&#x27;</span>, <span class="string">&#x27;2021-12-23 11:24:31&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="优惠券表"><a href="#优惠券表" class="headerlink" title="优惠券表"></a>优惠券表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_voucher`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_voucher`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `shop_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商铺id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;代金券标题&#x27;</span>,</span><br><span class="line">  `sub_title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;副标题&#x27;</span>,</span><br><span class="line">  `rules` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;使用规则&#x27;</span>,</span><br><span class="line">  `pay_value` <span class="type">bigint</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付金额，单位是分。例如200代表2元&#x27;</span>,</span><br><span class="line">  `actual_value` <span class="type">bigint</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;抵扣金额，单位是分。例如200代表2元&#x27;</span>,</span><br><span class="line">  `type` tinyint(<span class="number">1</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;0,普通券；1,秒杀券&#x27;</span>,</span><br><span class="line">  `status` tinyint(<span class="number">1</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;1,上架; 2,下架; 3,过期&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br></pre></td></tr></table></figure><h2 id="数据-3"><a href="#数据-3" class="headerlink" title="数据"></a>数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_voucher` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;50元代金券&#x27;</span>, <span class="string">&#x27;周一至周日均可使用&#x27;</span>, <span class="string">&#x27;全场通用\\n无需预约\\n可无限叠加\\不兑现、不找零\\n仅限堂食&#x27;</span>, <span class="number">4750</span>, <span class="number">5000</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;2022-01-04 09:42:39&#x27;</span>, <span class="string">&#x27;2022-01-04 09:43:31&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="秒杀券"><a href="#秒杀券" class="headerlink" title="秒杀券"></a>秒杀券</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_seckill_voucher`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_seckill_voucher`  (</span><br><span class="line">  `voucher_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;关联的优惠券的id&#x27;</span>,</span><br><span class="line">  `stock` <span class="type">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `begin_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;生效时间&#x27;</span>,</span><br><span class="line">  `end_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;失效时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`voucher_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;秒杀优惠券表，与优惠券是一对一关系&#x27;</span> ROW_FORMAT <span class="operator">=</span> Compact;</span><br></pre></td></tr></table></figure><h2 id="支付状态"><a href="#支付状态" class="headerlink" title="支付状态"></a>支付状态</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_voucher_order`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_voucher_order`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;下单的用户id&#x27;</span>,</span><br><span class="line">  `voucher_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;购买的代金券id&#x27;</span>,</span><br><span class="line">  `pay_type` tinyint(<span class="number">1</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;支付方式 1：余额支付；2：支付宝；3：微信&#x27;</span>,</span><br><span class="line">  `status` tinyint(<span class="number">1</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;订单状态，1：未支付；2：已支付；3：已核销；4：已取消；5：退款中；6：已退款&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;下单时间&#x27;</span>,</span><br><span class="line">  `pay_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付时间&#x27;</span>,</span><br><span class="line">  `use_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;核销时间&#x27;</span>,</span><br><span class="line">  `refund_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;退款时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br></pre></td></tr></table></figure><h1 id="达人探店"><a href="#达人探店" class="headerlink" title="达人探店"></a>达人探店</h1><h2 id="探店笔记"><a href="#探店笔记" class="headerlink" title="探店笔记"></a>探店笔记</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_blog`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_blog`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `shop_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">  `images` <span class="type">varchar</span>(<span class="number">2048</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;探店的照片，最多9张，多张以\&quot;,\&quot;隔开&#x27;</span>,</span><br><span class="line">  `content` <span class="type">varchar</span>(<span class="number">2048</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;探店的文字描述&#x27;</span>,</span><br><span class="line">  `liked` <span class="type">int</span>(<span class="number">8</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;点赞数量&#x27;</span>,</span><br><span class="line">  `comments` <span class="type">int</span>(<span class="number">8</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;评论数量&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">23</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br></pre></td></tr></table></figure><h2 id="数据-4"><a href="#数据-4" class="headerlink" title="数据"></a>数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_blog` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="string">&#x27;无尽浪漫的夜晚丨在万花丛中摇晃着红酒杯🍷品战斧牛排🥩&#x27;</span>, <span class="string">&#x27;/imgs/blogs/7/14/4771fefb-1a87-4252-816c-9f7ec41ffa4a.jpg,/imgs/blogs/4/10/2f07e3c9-ddce-482d-9ea7-c21450f8d7cd.jpg,/imgs/blogs/2/6/b0756279-65da-4f2d-b62a-33f74b06454a.jpg,/imgs/blogs/10/7/7e97f47d-eb49-4dc9-a583-95faa7aed287.jpg,/imgs/blogs/1/2/4a7b496b-2a08-4af7-aa95-df2c3bd0ef97.jpg,/imgs/blogs/14/3/52b290eb-8b5d-403b-8373-ba0bb856d18e.jpg&#x27;</span>, <span class="string">&#x27;生活就是一半烟火·一半诗意&lt;br/&gt;手执烟火谋生活·心怀诗意以谋爱·&lt;br/&gt;当然&lt;br/&gt;\r\n男朋友给不了的浪漫要学会自己给🍒&lt;br/&gt;\n无法重来的一生·尽量快乐.&lt;br/&gt;&lt;br/&gt;🏰「小筑里·神秘浪漫花园餐厅」🏰&lt;br/&gt;&lt;br/&gt;\n💯这是一家最最最美花园的西餐厅·到处都是花餐桌上是花前台是花  美好无处不在\n品一口葡萄酒，维亚红酒马瑟兰·微醺上头工作的疲惫消失无际·生如此多娇🍃&lt;br/&gt;&lt;br/&gt;📍地址:延安路200号(家乐福面)&lt;br/&gt;&lt;br/&gt;🚌交通:地铁①号线定安路B口出右转过下通道右转就到啦～&lt;br/&gt;&lt;br/&gt;--------------🥣菜品详情🥣---------------&lt;br/&gt;&lt;br/&gt;「战斧牛排]&lt;br/&gt;\n超大一块战斧牛排经过火焰的炙烤发出阵阵香，外焦里嫩让人垂涎欲滴，切开牛排的那一刻，牛排的汁水顺势流了出来，分熟的牛排肉质软，简直细嫩到犯规，一刻都等不了要放入嘴里咀嚼～&lt;br/&gt;&lt;br/&gt;「奶油培根意面」&lt;br/&gt;太太太好吃了💯&lt;br/&gt;我真的无法形容它的美妙，意面混合奶油香菇的香味真的太太太香了，我真的舔盘了，一丁点美味都不想浪费‼️&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;「香菜汁烤鲈鱼」&lt;br/&gt;这个酱是辣的 真的绝好吃‼️&lt;br/&gt;鲈鱼本身就很嫩没什么刺，烤过之后外皮酥酥的，鱼肉蘸上酱料根本停不下来啊啊啊啊&lt;br/&gt;能吃辣椒的小伙伴一定要尝尝&lt;br/&gt;&lt;br/&gt;非常可 好吃子🍽\n&lt;br/&gt;--------------🍃个人感受🍃---------------&lt;br/&gt;&lt;br/&gt;【👩🏻‍🍳服务】&lt;br/&gt;小姐姐特别耐心的给我们介绍彩票 &lt;br/&gt;推荐特色菜品，拍照需要帮忙也是尽心尽力配合，太爱他们了&lt;br/&gt;&lt;br/&gt;【🍃环境】&lt;br/&gt;比较有格调的西餐厅 整个餐厅的布局可称得上的万花丛生 有种在人间仙境的感觉🌸&lt;br/&gt;集美食美酒与鲜花为一体的风格店铺 令人向往&lt;br/&gt;烟火皆是生活 人间皆是浪漫&lt;br/&gt;&#x27;</span>, <span class="number">1</span>, <span class="number">104</span>, <span class="string">&#x27;2021-12-28 19:50:01&#x27;</span>, <span class="string">&#x27;2022-03-10 14:26:34&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_blog` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;人均30💰杭州这家港式茶餐厅我疯狂打call‼️&#x27;</span>, <span class="string">&#x27;/imgs/blogs/4/7/863cc302-d150-420d-a596-b16e9232a1a6.jpg,/imgs/blogs/11/12/8b37d208-9414-4e78-b065-9199647bb3e3.jpg,/imgs/blogs/4/1/fa74a6d6-3026-4cb7-b0b6-35abb1e52d11.jpg,/imgs/blogs/9/12/ac2ce2fb-0605-4f14-82cc-c962b8c86688.jpg,/imgs/blogs/4/0/26a7cd7e-6320-432c-a0b4-1b7418f45ec7.jpg,/imgs/blogs/15/9/cea51d9b-ac15-49f6-b9f1-9cf81e9b9c85.jpg&#x27;</span>, <span class="string">&#x27;又吃到一家好吃的茶餐厅🍴环境是怀旧tvb港风📺边吃边拍照片📷几十种菜品均价都在20+💰可以是很平价了！&lt;br&gt;·&lt;br&gt;店名：九记冰厅(远洋店)&lt;br&gt;地址：杭州市丽水路远洋乐堤港负一楼（溜冰场旁边）&lt;br&gt;·&lt;br&gt;✔️黯然销魂饭（38💰）&lt;br&gt;这碗饭我吹爆！米饭上盖满了甜甜的叉烧 还有两颗溏心蛋🍳每一粒米饭都裹着浓郁的酱汁 光盘了&lt;br&gt;·&lt;br&gt;✔️铜锣湾漏奶华（28💰）&lt;br&gt;黄油吐司烤的脆脆的 上面洒满了可可粉🍫一刀切开 奶盖流心像瀑布一样流出来  满足&lt;br&gt;·&lt;br&gt;✔️神仙一口西多士士（16💰）&lt;br&gt;简简单单却超级好吃！西多士烤的很脆 黄油味浓郁 面包体超级柔软 上面淋了炼乳&lt;br&gt;·&lt;br&gt;✔️怀旧五柳炸蛋饭（28💰）&lt;br&gt;四个鸡蛋炸成蓬松的炸蛋！也太好吃了吧！还有大块鸡排 上淋了酸甜的酱汁 太合我胃口了！！&lt;br&gt;·&lt;br&gt;✔️烧味双拼例牌（66💰）&lt;br&gt;选了烧鹅➕叉烧 他家烧腊品质真的惊艳到我！据说是每日广州发货 到店现烧现卖的黑棕鹅 每口都是正宗的味道！肉质很嫩 皮超级超级酥脆！一口爆油！叉烧肉也一点都不柴 甜甜的很入味 搭配梅子酱很解腻 ！&lt;br&gt;·&lt;br&gt;✔️红烧脆皮乳鸽（18.8💰）&lt;br&gt;乳鸽很大只 这个价格也太划算了吧， 肉质很有嚼劲 脆皮很酥 越吃越香～&lt;br&gt;·&lt;br&gt;✔️大满足小吃拼盘（25💰）&lt;br&gt;翅尖➕咖喱鱼蛋➕蝴蝶虾➕盐酥鸡&lt;br&gt;zui喜欢里面的咖喱鱼！咖喱酱香甜浓郁！鱼蛋很q弹～&lt;br&gt;·&lt;br&gt;✔️港式熊仔丝袜奶茶（19💰）&lt;br&gt;小熊🐻造型的奶茶冰也太可爱了！颜值担当 很地道的丝袜奶茶 茶味特别浓郁～&lt;br&gt;·&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2021-12-28 20:57:49&#x27;</span>, <span class="string">&#x27;2022-03-10 09:21:39&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_blog` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="string">&#x27;杭州周末好去处｜💰50就可以骑马啦🐎&#x27;</span>, <span class="string">&#x27;/imgs/blogs/blog1.jpg&#x27;</span>, <span class="string">&#x27;杭州周末好去处｜💰50就可以骑马啦🐎&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2022-01-11 16:05:47&#x27;</span>, <span class="string">&#x27;2022-03-10 09:21:41&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="评论表"><a href="#评论表" class="headerlink" title="评论表"></a>评论表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_blog_comments`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_blog_comments`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `blog_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;探店id&#x27;</span>,</span><br><span class="line">  `parent_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;关联的1级评论id，如果是一级评论，则值为0&#x27;</span>,</span><br><span class="line">  `answer_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;回复的评论id&#x27;</span>,</span><br><span class="line">  `content` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;回复的内容&#x27;</span>,</span><br><span class="line">  `liked` <span class="type">int</span>(<span class="number">8</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;点赞数&#x27;</span>,</span><br><span class="line">  `status` tinyint(<span class="number">1</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态，0：正常，1：被举报，2：禁止查看&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br></pre></td></tr></table></figure><h2 id="关注表"><a href="#关注表" class="headerlink" title="关注表"></a>关注表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_follow`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_follow`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `follow_user_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;关联的用户id&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br></pre></td></tr></table></figure><h1 id="签到表"><a href="#签到表" class="headerlink" title="签到表"></a>签到表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_sign`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_sign`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `<span class="keyword">year</span>` <span class="keyword">year</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;签到的年&#x27;</span>,</span><br><span class="line">  `<span class="keyword">month</span>` tinyint(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;签到的月&#x27;</span>,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;签到的日期&#x27;</span>,</span><br><span class="line">  `is_backup` tinyint(<span class="number">1</span>) UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否补签&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程总结</title>
      <link href="/2022/11/30/Multithreading/"/>
      <url>/2022/11/30/Multithreading/</url>
      
        <content type="html"><![CDATA[<h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><ul><li>进程：一个内存中运行的应用程序，最常见的即为 <strong>.exe</strong> 为后缀的文件。</li><li>线程：进程中的执行单元。一个进程至少有一个线程，多个线程可以共享数据。<br>它们的主要区别如下：<br><strong>根本区别</strong> ：进程是操作系统资源分配的基本单位，线程是CPU任务调度和执行的基本单位。<br><strong>资源开销</strong> ：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，线程之间切换的开销小。<br><strong>包含关系</strong> ：如果一个进程有多个线程，则执行过程是多线程同步执行，执行的先后顺序取决于CPU的调度，线程也被称为<strong>轻量级进程</strong>。<br><strong>内存分配</strong> ：进程之间的地址空间和资源是相互独立的，而同一进程的线程共享本进程的地址空间和资源，且每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>。<br><strong>影响关系</strong> ：一个进程崩溃不会对其他进程产生影响，但一个线程崩溃则会影响整个进程。<br><strong>执行过程</strong> ：每个独立的进程有程序运行的入口、顺序执行序列和程序出口，而线程不能独立执行。</li></ul><h2 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h2><ol><li>线程编号(Id)</li></ol><ul><li>类型：<code>long</code></li><li>作用：用于标识不同的线程。不同的线程有不同的编号。</li><li>注意事项：线程编号只在当前的运行中是唯一的，下一次运行，该线程的编号可能会发生变化。因此不适合作为唯一标识符。</li><li>查看方式：<code>myThread().getId()</code>.</li></ul><ol start="2"><li>线程名称(Name)</li></ol><ul><li>类型：<code>String</code></li><li>作用：用于区别不同的线程。默认值与线程的编号有关，默认格式为：Thread-线程号。main函数的线程名叫main。可以使用<code>Thread</code>类中的构造方法自己设置名称。</li><li>注意事项：设置简明的线程名可以方便我们调试代码和定位。</li><li>查看方式:<code>myThread().getName()</code>.</li></ul><ol start="3"><li>线程类别(Daemon)</li></ol><ul><li>类型：Boolean</li><li>作用:默认为<code>false</code>(用户线程),可手动设置为<code>true</code>(守护线程).</li><li>注意事项：须在线程启动前设置,<code>false</code>:主线程结束后用户线程继续运行,<code>JVM</code>存活,反之全部消亡.</li><li>设置方式:<code>t1.setDaemon()</code>.</li></ul><ol start="4"><li>优先级(Priority)</li></ol><ul><li>类型：<code>int</code><br>作用：给线程调度器的提示<br>注意事项：优先级默认为5,设置优先级可能会导致出现线程饥饿问题.</li><li>设置方式:<code>t1.setPriority()</code>.</li></ul><h2 id="线程的创建方式"><a href="#线程的创建方式" class="headerlink" title="线程的创建方式"></a>线程的创建方式</h2><ol><li>继承<code>Thread</code>类:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">myThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">myThread</span>();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Create a thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现<code>Runable</code>接口:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">myThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">myThread</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(thread);</span><br><span class="line">        <span class="comment">//通过Thread类的对象调用start():① 启动线程 ②调用当前线程的run()--&gt;调用了Runnable类型的target的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Create a thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>匿名内部类:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;create a thead&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以使用lambda表达式创建</span></span><br></pre></td></tr></table></figure>通过阅读源码可知,执行<code>myThread.start()</code>时,其实是调用了<code>JAVA</code>的本地方法:<code>private native void start0();</code>,此时才真正实现了多线程运行,而直接调用<code>run()</code>方法,就相当于执行主线程下的一个普通方法而已。</li></ol><ul><li>假设两个线程使用<code>while(true)</code>循环执行同一任务,调用<code>start()</code>方法会随机交替执行,而<code>run()</code>方法只有此代码中的循环被执行。</li></ul><h2 id="线程的生命周期和状态"><a href="#线程的生命周期和状态" class="headerlink" title="线程的生命周期和状态"></a>线程的生命周期和状态</h2><ul><li>在操作系统中线程共有五个生命周期:创建,就绪,运行,阻塞,终止.而JAVA对其进一步细分为六个状态:</li><li>NEW: 初始状态，即<code>Thread t1 = new Thread()</code>。</li><li>RUNNABLE: 运行状态，线程被调用了<code>start()</code>等待运行的状态。</li><li>WAITING：等待状态，倘若其他线程的某些动作尚未完成,该线程就会一直等待。</li><li>TIME_WAITING：超时等待状态，可以在指定的时间后自行返回而不是像 WAITING 那样一直等待。</li><li>TERMINATED：终止状态，表示该线程已经运行完毕。<br><img src="https://www.zer02.fun/img/blogpng/Multithreading01.webp" alt="Java线程状态变迁图"></li></ul><h2 id="死锁-待补充"><a href="#死锁-待补充" class="headerlink" title="死锁(待补充)"></a>死锁(待补充)</h2><h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><ul><li>多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。</li></ul><h3 id="死锁产生的四个必要条件"><a href="#死锁产生的四个必要条件" class="headerlink" title="死锁产生的四个必要条件"></a>死锁产生的四个必要条件</h3><ol><li>互斥条件：该资源任意一个时刻只由一个线程占用。</li><li>不可抢占: 资源只能由占有者主动释放,请求者不可强制夺取资源。</li><li>请求和保持: 一个线程在请求其他资源时对已获得的资源保持不放。</li><li>循环等待: P1占有P2的资源,P2占有P3的资源,P3占有P1的资源,形成类似环形链表的等待回路。</li></ol><h2 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h2><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁总是假设最坏的情况，认为共享资源每次被访问时都会出现问题，因此在每次获取资源时都会上锁，此刻其他线程想再拿到这个资源就会阻塞直到锁被上一个资源持有者释放。<br><code>synchronized</code>和<code>ReentrantLock</code>就是悲观锁思想实现的。<br><strong>悲观锁通常多用于写多比较多的情况下，避免频繁失败和重试影响性能。</strong></p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁总是假设最好的情况，认为共享资源每次被访问的时候不会出现问题，线程可以不停地执行，无需加锁也无需等待，只是在提交修改的时候去验证对应的资源是否被其它线程修改了。<br><strong>乐观锁通常多于写比较少的情况下，避免频繁加锁影响性能，大大提升了系统的吞吐量。</strong></p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>修饰实例方法(锁当前对象)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//code here...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修饰静态方法(锁当前类)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//code here...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>如果线程A调用了静态<code>synchronized</code>方法，而线程B调用了非静态<code>synchronized</code>方法，两者并不互斥，静态<code>synchronized</code>方法锁的是类对象，而非静态<code>synchronized</code>方法锁的是当前对象实例。</strong></li><li>修饰代码块(锁指定对象&#x2F;类)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">    <span class="comment">//code here...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此外，构造方法不能使用<code>synchronized</code>修饰，因为即使多个线程同时构造同一个类的对象，它们<code>new</code>出来的对象是互不相干的，这意味着不会发生资源共享，不用考虑线程安全问题。</li></ol><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="什么是线程池"><a href="#什么是线程池" class="headerlink" title="什么是线程池"></a>什么是线程池</h3><p>线程池就是管理一系列线程的资源池。当有任务要处理时，直接从线程池中获取线程来处理，<strong>处理完之后线程并不会立即被销毁，而是等待下一个任务</strong>。</p><h3 id="使用线程池的优点"><a href="#使用线程池的优点" class="headerlink" title="使用线程池的优点"></a>使用线程池的优点</h3><ol><li>降低资源消耗。不会频繁的创建和销毁线程造成不必要的系统开销。</li><li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li>提高线程的可管理性。线程池可以统一管理，分配和调优池中的线程。</li></ol><h2 id="什么时候使用线程池"><a href="#什么时候使用线程池" class="headerlink" title="什么时候使用线程池"></a>什么时候使用线程池</h2><h3 id="如果创建线程池"><a href="#如果创建线程池" class="headerlink" title="如果创建线程池"></a>如果创建线程池</h3><p><strong>方式一：使用内置线程池</strong><br><img src="https://www.zer02.fun/img/blogpng/Multithreading02.webp" alt="线程池创建方式"></p><ul><li>如果发现线程池中有空闲线程，则直接执行该任务；</li><li>如果没有空闲线程，且当前运行的线程数少于<code>corePoolSize</code>，则创建新的线程执行该任务；</li><li>如果没有空闲线程，且当前的线程数等于<code>corePoolSize</code>，同时阻塞队列未满，则将任务入队列，而不添加新的线程；</li><li>如果没有空闲线程，且阻塞队列已满，同时池中的线程数小于<code>maximumPoolSize</code>，则创建新的线程执行任务；</li><li>如果没有空闲线程，且阻塞队列已满，同时池中的线程数等于<code>maximumPoolSize</code>，则根据构造函数中的<code>handler</code>指定的策略来拒绝新的任务。</li></ul><p><strong>方式二：自定义线程池</strong><br><code>ThreadPoolExecutor executor = new ThreadPoolExecutor(args...);</code></p><h3 id="线程池种的常见参数"><a href="#线程池种的常见参数" class="headerlink" title="线程池种的常见参数"></a>线程池种的常见参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,//线程池的核心线程数量</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,//线程池的最大线程数</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span></span><br><span class="line"><span class="params">                          TimeUnit unit,//时间单位</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,//任务队列，用来储存等待执行任务的队列</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span></span><br><span class="line"><span class="params">                           )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p><img src="https://www.zer02.fun/img/blogpng/Multithreading03.webp" alt="执行流程"></p><h3 id="饱和策略"><a href="#饱和策略" class="headerlink" title="饱和策略"></a>饱和策略</h3><p><code>ThreadPoolExecutor.AbortPolicy</code>: 抛出<code>RejectedExecutionException</code>直接拒绝新任务。<br><code>ThreadPoolExecutor.CallerRunsPolicy</code>: 返回给调用线程执行被拒绝的任务，如果执行程序已关闭，丢弃该任务。<br><code>ThreadPoolExecutor.DiscardPolicy</code>: 抛弃最新的任务。<br><code>ThreadPoolExecutor.DiscardOldestPolicy</code>: 抛弃最早未处理的任务。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap总结</title>
      <link href="/2022/11/22/Hash/"/>
      <url>/2022/11/22/Hash/</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="JDK-1-8-以前"><a href="#JDK-1-8-以前" class="headerlink" title="JDK 1.8 以前"></a>JDK 1.8 以前</h2><p>JDK1.8 之前HashMap底层通过 <strong>数组和链表</strong> 结合。HashMap通过Key的<code>hashcode</code>经过扰动函数处理得到hash值，然后通过<code>(n - 1) &amp; hash</code>判断当前元素的存放位置(n指数组长度)，如果当前位置存在元素，就判断该元素与要存入的元素的hash值与key是否相同，如果相同直接覆盖，如果不同就通过拉链法解决冲突。</p><p>扰动函数就是HashMap的<code>hash</code>方法，使用<code>hash</code>方法可以减少哈希冲突。<br>两个版本的<code>hash</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jdk 1.7</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(<span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line"></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jdk 1.8</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="comment">// key.hashCode()：返回散列值也就是hashcode</span></span><br><span class="line">    <span class="comment">// ^ ：按位异或</span></span><br><span class="line">    <span class="comment">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>jdk1.7的<code>hash</code>方法扰动了四次，所以性能不如jdk 1.8</p><h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><p>即创建一个链表数组，这就是1.7数组+链表的由来，数组中的每一格就是一个链表，如果遇到哈希冲突，则将冲突的值加入链表即可。<br><img src="https://www.zer02.fun/img/blogpng/hash_01.webp" alt="结构图"></p><h2 id="jdk-1-8-以后"><a href="#jdk-1-8-以后" class="headerlink" title="jdk 1.8 以后"></a>jdk 1.8 以后</h2><p>jdk 1.8 以后，HashMap的底层变为数组+链表+红黑树。</p><p><strong>为什么要改成“数组+链表+红黑树”？</strong><br>主要是为了提升在哈希冲突严重时(链表过长)的查找性能，使用链表的查找性能是O(n)，而使用红黑树是O(logn)。</p><h3 id="重要初始属性"><a href="#重要初始属性" class="headerlink" title="重要初始属性"></a>重要初始属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始容量大小，若不指定默认为16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"><span class="comment">//最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">//负载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">//treeifyBin阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">//untreeify阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"><span class="comment">//树化最小容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br></pre></td></tr></table></figure><h3 id="扩容原则"><a href="#扩容原则" class="headerlink" title="扩容原则"></a>扩容原则</h3><p>对于插入操作，默认情况下使用链表节点，当同一个索引位置的节点在**新增达到9个(阈值默认为8)**：</p><ul><li>如果此时数组长度大于等于64，则触发链表节点转为红黑树节点(treeifyBin)</li><li>如果数组长度小于64，则先对数组扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">// 判断当前数组的长度是否小于 64</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        <span class="comment">// 如果当前数组的长度小于 64，那么会选择先进行数组扩容</span></span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 否则才将列表转换为红黑树</span></span><br><span class="line"></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于移除操作，当用一个索引位置的节点在<strong>移除后达到6个</strong>，并且该索引位置的节点是红黑树节点，则触发红黑树节点转为链表节点(untreeify)</p><p><strong>为什么链表转红黑树的阈值是8？</strong><br>简单来说，阈值为8是在时间和空间上权衡的结果。<br>红黑树节点大小约为链表节点的2倍，在节点太少时，红黑树的查找性能优势并不明显，没必要付出2倍的空间。<br>理想情况下，使用随机的哈希码，节点分布在 hash 桶中的频率遵循泊松分布，当链表中节点个数为8时的概率为 0.00000006，这个概率足够低，并且到达8个节点时，红黑树的性能优势也会展现出来，因此8是一个合理的数字。</p><p><strong>为什么转回链表节点是用的6而不是复用8？</strong><br>如果我们设置节点多于8个转红黑树，少于8个就马上转链表，当节点个数在8徘徊时，就会频繁进行红黑树和链表的转换，造成性能的损耗。</p><h3 id="默认初始容量"><a href="#默认初始容量" class="headerlink" title="默认初始容量"></a>默认初始容量</h3><p>HashMap的默认初始容量为16，且HashMap的容量必须是2的N次方，HashMap 会根据我们传入的容量计算一个大于等于该容量的最小的2的N次方，例如传 9，容量为16。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容量计算方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HashMap 的长度为什么是 2 的幂次方？</strong><br>计算索引位置的公式为：<code>(n - 1) &amp; hash</code>，当 n 为 2 的 N 次方时，n - 1 为低位全是 1 的值，此时任何值跟 n - 1 进行 &amp; 运算的结果为该值的低 N 位，达到了和取模同样的效果，实现了均匀分布。</p><h2 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h2><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jdk 1.8</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="comment">//tab: 引用当前hashMap的散列表</span></span><br><span class="line"><span class="comment">//p: 表示当前散列表的元素</span></span><br><span class="line"><span class="comment">//n: 表示散列表数组的长度</span></span><br><span class="line"><span class="comment">//i: 表示路由寻址结果</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// table未初始化或者长度为0，进行扩容（采用了延时初始化，第一次put才会初始化散列表。）</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 寻址找到的桶位为null</span></span><br><span class="line">    <span class="comment">//(n - 1) &amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 寻址找到的桶位已经存在元素</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 比较桶中第一个元素(数组中的结点)的hash值相等，key相等，也就是判断是否是重复的值。</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">// 完全一致</span></span><br><span class="line">            <span class="comment">//e:找到的一个与当前要插入的元素一致的元素</span></span><br><span class="line">                e = p;</span><br><span class="line">        <span class="comment">// hash值不相等，即key不相等；且为红黑树结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 放入树中</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 为链表结点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在链表最末插入结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 到达链表的尾部</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 在尾部插入新结点</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 结点数量达到阈值，转化为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断链表中结点的key值与插入的元素的key值是否相等</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 相等，跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 表示在桶中找到key值、hash值与插入元素相等的结点</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; </span><br><span class="line">            <span class="comment">// 记录e的value</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent为false或者旧值为null</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                <span class="comment">//替换</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结构性修改</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 实际大小大于阈值则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 插入后回调</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>判断<code>table</code>数组是否为空，若为空就进行<code>resize()</code>扩容，不是就通过<code>(n - 1) &amp; hash</code>得到存储键值对的索引</li><li>判断索引处是否为空，为空就直接插入到对应数组</li><li>若不为空， 首先判断key是否已经存在，若存在就直接覆盖</li><li>否则，判断插入的是不是红黑树节点，如果是就放入树中</li><li>如果不是就遍历链表插入链表尾部，然后判断是否需要转为红黑树</li><li>若节点数量达到阈值，执行<code>treeifyBin</code>方法，如果数组长度大于等于64，才会转为红黑树，否则对数组扩容</li><li>判断数组的<code>size</code>是否大于阈值，若大于就执行<code>resize()</code>扩容</li></ol><p>再来对比一下jdk 1.7中的put方法<br>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">    inflateTable(threshold);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123; <span class="comment">// 先遍历</span></span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);  <span class="comment">// 再插入</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致分为两个步骤：</p><ol><li>如果当前数组位置没有元素就直接插入</li><li>否则，遍历以这个元素为头节点的链表，依次和插入的key比较，如果相同则直接覆盖，不同就采用头插法插入元素。</li></ol><h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><h2 id="和HashMap的区别"><a href="#和HashMap的区别" class="headerlink" title="和HashMap的区别"></a>和HashMap的区别</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络总结</title>
      <link href="/2022/11/22/network/"/>
      <url>/2022/11/22/network/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列</title>
      <link href="/2022/11/20/SortAndQueu/"/>
      <url>/2022/11/20/SortAndQueu/</url>
      
        <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="栈简介"><a href="#栈简介" class="headerlink" title="栈简介"></a>栈简介</h3><ul><li>栈是一种特殊的线性表，<strong>它只允许在固定的一端(栈顶top)进行插入和删除操作</strong>，栈中的元素遵循LIFO(Last In First Out)原则。</li></ul><h3 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h3><ul><li>在JDK中，栈的实现类是<code>Stack</code>,它的继承关系如下：<br><img src="https://www.zer02.fun/img/blogpng/StackQueue01.webp" alt="栈的继承关系"><br>从上图可以看到，<code>Stack</code>继承自<code>Vector</code>,<code>Vector</code>与<code>ArrayList</code>类似，都是动态的顺序表，不同的是<code>Vector</code>是线程安全的。</li></ul><p><code>Stack</code>中的常用方法如下：</p><table><thead><tr><th align="center">方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>Stack()</code></td><td align="center">构造一个空栈</td></tr><tr><td align="center"><code>E push(E e)</code></td><td align="center">将e入栈，并返回e</td></tr><tr><td align="center"><code>E pop()</code></td><td align="center">将栈顶元素出栈并返回</td></tr><tr><td align="center"><code>E peek()</code></td><td align="center">返回栈顶元素</td></tr><tr><td align="center"><code>int size()</code></td><td align="center">返回栈中有效元素个数</td></tr><tr><td align="center"><code>boolean empty()</code></td><td align="center">检查栈是否为空</td></tr></tbody></table><blockquote><p>常用方法时间复杂度：<br>访问：<em>O(n)</em><br>插入删除：<em>O(1)</em></p></blockquote><ul><li>栈的模拟实现<br>栈常用数组或链表来实现，用数组实现的叫<strong>顺序栈</strong>，链表实现的叫<strong>链栈</strong>。这里我采用数组实现一个简易的栈。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] elementData;<span class="comment">//存储数据的容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> elementCount;<span class="comment">//栈中有效元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个空栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">int</span>[DEFAULT_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> item)</span> &#123;</span><br><span class="line">        ensureCapacityHelper(elementCount);</span><br><span class="line">        elementData[elementCount++] = item;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EmptyStackException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elementData[--elementCount];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看栈顶元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EmptyStackException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elementData[elementCount - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确认容器大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityHelper</span><span class="params">(<span class="type">int</span> elementCount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (elementCount == elementData.length) &#123;</span><br><span class="line">            elementData = <span class="built_in">this</span>.grow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] grow() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, elementCount &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈有效元素个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> elementCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>验证<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">MyStack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyStack</span>();</span><br><span class="line">    stack.push(<span class="number">1</span>);</span><br><span class="line">    stack.push(<span class="number">2</span>);</span><br><span class="line">    stack.push(<span class="number">3</span>);</span><br><span class="line">    stack.push(<span class="number">5</span>);</span><br><span class="line">    stack.push(<span class="number">6</span>);</span><br><span class="line">    stack.push(<span class="number">7</span>);</span><br><span class="line">    stack.push(<span class="number">8</span>);</span><br><span class="line">    stack.pop();</span><br><span class="line">    System.out.println(stack.peek());<span class="comment">//7</span></span><br><span class="line">    System.out.println(stack.size());<span class="comment">//7</span></span><br><span class="line">    <span class="keyword">while</span> (!stack.empty())&#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(stack.empty());<span class="comment">//true</span></span><br><span class="line">    System.out.println(stack.pop());<span class="comment">//java.util.EmptyStackException</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="栈相关的题目"><a href="#栈相关的题目" class="headerlink" title="栈相关的题目"></a>栈相关的题目</h3><blockquote><p>LeetCode 20.有效的括号<br>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串<code>s</code> ，判断字符串是否有效。<br>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() &lt; <span class="number">2</span> || s.length() % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) stack.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;[&#x27;</span>) stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || c != stack.pop()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>剑指Offer 31.栈的压入、弹出操作<br>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列<br>是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateStackSequences</span><span class="params">(<span class="type">int</span>[] pushed, <span class="type">int</span>[] popped)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pushed.length == <span class="number">0</span> || popped.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    Stack&lt;Integer&gt; num = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pushed.length; i++) &#123;</span><br><span class="line">        num.push(pushed[i]);</span><br><span class="line">        <span class="keyword">while</span> (res &lt; popped.length &amp;&amp; !num.isEmpty() &amp;&amp; num.peek() == popped[res]) &#123;</span><br><span class="line">            num.pop();</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res == popped.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>LeetCode 155.设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。<br>实现 MinStack 类:<br><code>MinStack()</code> 初始化堆栈对象。<br><code>void push(int val)</code> 将元素val推入堆栈。<br><code>void pop()</code> 删除堆栈顶部的元素。<br><code>int top()</code> 获取堆栈顶部的元素。<br><code>int getMin()</code> 获取堆栈中的最小元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack;</span><br><span class="line">    Stack&lt;Integer&gt; miniStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        miniStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        stack.push(val);</span><br><span class="line">        <span class="keyword">if</span> (miniStack.isEmpty() || val &lt;= miniStack.peek()) &#123;</span><br><span class="line">            miniStack.push(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stack.pop().equals(miniStack.peek())) &#123;</span><br><span class="line">            miniStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> miniStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="队列简介"><a href="#队列简介" class="headerlink" title="队列简介"></a>队列简介</h3><ul><li><strong>队列只允许在后端(rear)入队，在前端(front)出队</strong>，队列中的元素遵循FIFO(First In First Out)原则。</li></ul><h3 id="队列的实现"><a href="#队列的实现" class="headerlink" title="队列的实现"></a>队列的实现</h3><ul><li><p>队列的访问与插入删除操作的时间复杂度和栈类似，唯一的区别在于队列只允许新元素在其尾端(rear)进行添加。<br><code>Queue</code>中的常用方法如下:</p><table><thead><tr><th align="center">方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>boolean offer(E e)</code></td><td align="center">入队列</td></tr><tr><td align="center"><code>E poll()</code></td><td align="center">出队列</td></tr><tr><td align="center"><code>E peek()</code></td><td align="center">返回队头元素</td></tr><tr><td align="center"><code>int size()</code></td><td align="center">返回队列中有效元素个数</td></tr><tr><td align="center"><code>boolean isEmpty()</code></td><td align="center">检查队列是否为空</td></tr></tbody></table><blockquote><p>部分方法的区别：<br><code>offer()</code>和<code>add()</code>:若在队列满的情况下添加元素,<code>add()</code>抛出异常，<code>offer()</code>返回<code>false()</code>。<br><code>poll()</code>和<code>remove()</code>:<code>poll()</code>在队列为空的情况下返回<code>null</code>。<br><code>peek()</code>和<code>element()</code>:与<code>remove()</code>类似，<code>peek()</code>在队列为空的情况下返回<code>null</code>。</p></blockquote></li><li><p>队列的模拟实现<br>在JDK中，<code>Queue</code><strong>是个接口，底层通过链表实现</strong>，我们可以采用<code>Queue&lt;E&gt; queue = new LinkedList&lt;&gt;()</code>来创建一个队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode prev;</span><br><span class="line">        ListNode next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode head;</span><br><span class="line">    <span class="keyword">public</span> ListNode tail;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)&#123;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            tail.next = node;</span><br><span class="line">            node.prev = tail;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> head.val;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            tail = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head.prev.next = <span class="literal">null</span>;<span class="comment">//处理前驱节点</span></span><br><span class="line">            head.prev = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看队头元素</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看队列长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">MyQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyQueue</span>();</span><br><span class="line">    queue.offer(<span class="number">1</span>);</span><br><span class="line">    queue.offer(<span class="number">2</span>);</span><br><span class="line">    queue.offer(<span class="number">3</span>);</span><br><span class="line">    queue.offer(<span class="number">4</span>);</span><br><span class="line">    queue.offer(<span class="number">5</span>);</span><br><span class="line">    System.out.println(queue.poll());<span class="comment">//5</span></span><br><span class="line">    System.out.println(queue.size());<span class="comment">//4</span></span><br><span class="line">    System.out.println(queue.peek());<span class="comment">//4</span></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">        queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(queue.poll());<span class="comment">//null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用链表实现的队列称为<strong>链式队列</strong>，<strong>链式队列</strong>的好处是除了用来存放指向下一个节点的<code>next</code>指针外，它不会浪费其它空间，且它可以一直入队，直到系统资源耗尽，不存在越界问题。</p></li><li><p>此外，还可以用数组来实现一个队列，称为<strong>顺序队列</strong>，顺序队列存在<strong>假溢出</strong>情况，即当我们进行入队、出队操作时，<code>front</code>和<code>rear</code>都会向后移动，当<code>rear</code>移动到最后，我们就不能再向数组内添加元素，但实际上经过出队操作，<code>front</code>之前存在可用空间。为了解决<strong>假溢出</strong>，我们引入了循环队列。</p></li></ul><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><ul><li>当我们把数组首尾相接的时候，无论入队还是出队，<code>front</code>和<code>rear</code>总是在一个闭环内活动，这样就解决了数组假溢出和越界的问题，当<code>front = rear</code>时，队列为空。但由于不断地入队和出队操作，<code>front</code>和<code>rear</code>的总是在变化，我们该如何确定其相对的关系呢？答案就是<strong>取余操作</strong>。</li><li>模拟实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCircularQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] element;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCircularQueue</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//用冗余空间处理，k + 1</span></span><br><span class="line">        element = <span class="keyword">new</span> <span class="title class_">int</span>[k + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">enQueue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        element[rear] = value;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % element.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        front = (front + <span class="number">1</span>) % element.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回队头元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Front</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> element[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回队尾元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Rear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当rear = 0,此时若直接取rear - 1将数组越界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (rear - <span class="number">1</span> + element.length) % element.length;</span><br><span class="line">        <span class="keyword">return</span> element[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否队空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否队满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;<span class="comment">//考虑出队front会变，不能(rear + 1) % element.length == 0</span></span><br><span class="line">        <span class="keyword">return</span> (rear + <span class="number">1</span>) % element.length == front;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同时它也是LeetCode 622.设计循环队列的解法。</p></blockquote></li></ul><h3 id="队列的拓展"><a href="#队列的拓展" class="headerlink" title="队列的拓展"></a>队列的拓展</h3><ul><li>阻塞队列(<code>BlockingQueue</code>)：当队列为空时，出队操作阻塞；当队列为满时，入队操作阻塞。主要用于多线程。</li><li>双端队列(<code>Deque</code>):具有栈和队列的性质，比起栈或队列，它更加灵活，插入和删除操作可在两端进行。</li></ul><h2 id="经典题目"><a href="#经典题目" class="headerlink" title="经典题目"></a>经典题目</h2><blockquote><p>以下题目均来自LeetCode。</p></blockquote><h3 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h3><blockquote><p>队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code>，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回 -1 )</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; A;</span><br><span class="line">    Stack&lt;Integer&gt; B;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        A = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        B = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendTail</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        A.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!B.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> B.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(A.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!A.isEmpty())&#123;</span><br><span class="line">            B.push(A.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> B.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两个栈实现队列"><a href="#两个栈实现队列" class="headerlink" title="两个栈实现队列"></a>两个栈实现队列</h3><p>实现 MyStack 类：</p><blockquote><p><code>void push(int x)</code> 将元素 x 压入栈顶。<br><code>int pop()</code> 移除并返回栈顶元素。<br><code>int top()</code> 返回栈顶元素。<br><code>boolean empty()</code> 如果栈是空的，返回 true ；否则，返回 false 。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt; enQueue;</span><br><span class="line">    Queue&lt;Integer&gt; deQueue;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        enQueue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        deQueue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        enQueue.offer(x);</span><br><span class="line">        <span class="keyword">while</span>(!deQueue.isEmpty())&#123;</span><br><span class="line">            enQueue.offer(deQueue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Integer&gt; tmp = enQueue;</span><br><span class="line">        enQueue = deQueue;</span><br><span class="line">        deQueue = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deQueue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deQueue.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> deQueue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>祝我生日快乐！</title>
      <link href="/2022/11/18/birthday/"/>
      <url>/2022/11/18/birthday/</url>
      
        <content type="html"><![CDATA[<ul><li>今天是我的21岁生日，回首以往的20年，我依稀记得两次生日，第一次是12岁那年父母给我带了一个很大的蛋糕，第二次便是高三那年学习太过投入从而忘记了自己的生日，但我的几个好兄弟半夜一点踹开我们宿舍门来给我庆生。</li><li>今年我想送自己一个特别的礼物，于是便有了这个网站，制作过程工程量巨大，我爆改了数千行源码，几度想要放弃，浪费了大量学习的时间完成了这个网站，但我认为这些花费的时间意义非凡，在今后的三年甚至更久，我会一直在这里分享我所学到的技术。</li><li>我一直认为，人生在世倘若什么想法都只埋在心中，什么话都只跟自己说，那人生未免太过无趣，所以我乐于分享，就像这个网站一样，从今天开始，它不再只属于我自己，而是面向所有能访问到<strong>zer02.fun</strong>这个域名的人。</li><li>这将是我20年人生经历中最珍贵的礼物，很荣幸它来自我自己的双手以及群里很多大佬的帮助，在此我由衷感谢愿意回答我愚问的小伙伴。</li><li>目前我只发布了关于<strong>十大排序算法</strong>的博客，写了500行，目前还剩下桶排序和基数排序没有写，以后有时间再写吧(后续会把CSDN上写的又臭又长又烂的博客逐渐优化并转移过来)。感兴趣的小伙伴可以去看看，如果可以的话，请在文末的评论区对我提出宝贵的意见。</li><li>我很庆幸自己找到了大一时那种学无止境的状态，虽然很累，但胜在充实，希望我能将这种状态一直保持下去，毕竟我是个不甘堕落的人。</li><li>如果你看到了这里，希望你能点击上方导航栏进入留言板给我留下生日祝福，能收到你的祝福，是我一生的荣幸。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法总结</title>
      <link href="/2022/11/13/Sort/"/>
      <url>/2022/11/13/Sort/</url>
      
        <content type="html"><![CDATA[<h2 id="各个排序算法的时间复杂度及稳定性"><a href="#各个排序算法的时间复杂度及稳定性" class="headerlink" title="各个排序算法的时间复杂度及稳定性"></a>各个排序算法的时间复杂度及稳定性</h2><table><thead><tr><th align="center">排序方法</th><th align="center">时间复杂度(最坏)</th><th align="center">时间复杂度(最好)</th><th align="center">时间复杂度(平均)</th><th align="center">空间复杂度</th><th align="center">排序方式</th><th align="center">稳定性</th></tr></thead><tbody><tr><td align="center">冒泡排序</td><td align="center"><em>O(n^2^)</em></td><td align="center"><em>O(n)</em></td><td align="center"><em>O(n^2^)</em></td><td align="center"><em>O(1)</em></td><td align="center"><em>in-place</em></td><td align="center">稳定</td></tr><tr><td align="center">选择排序</td><td align="center"><em>O(n^2^)</em></td><td align="center"><em>O(n^2^)</em></td><td align="center"><em>O(n^2^)</em></td><td align="center"><em>O(1)</em></td><td align="center"><em>in-place</em></td><td align="center">不稳定</td></tr><tr><td align="center">插入排序</td><td align="center"><em>O(n^2^)</em></td><td align="center"><em>O(n^2^)</em></td><td align="center"><em>O(n)</em></td><td align="center"><em>O(1)</em></td><td align="center"><em>in-place</em></td><td align="center">稳定</td></tr><tr><td align="center">希尔排序</td><td align="center"><em>O(n^2^)</em></td><td align="center"><em>O(n)</em></td><td align="center"><em>O(n^1.3^)</em></td><td align="center"><em>O(1)</em></td><td align="center"><em>in-place</em></td><td align="center">不稳定</td></tr><tr><td align="center">快速排序</td><td align="center"><em>O(n^2^)</em></td><td align="center"><em>O(nlog n)</em></td><td align="center"><em>O(nlog n)</em></td><td align="center"><em>O(log n)</em></td><td align="center"><em>in-place</em></td><td align="center">不稳定</td></tr><tr><td align="center">归并排序</td><td align="center"><em>O(nlog n)</em></td><td align="center"><em>O(nlog n)</em></td><td align="center"><em>O(nlog n)</em></td><td align="center"><em>O(n)</em></td><td align="center"><em>out-place</em></td><td align="center">稳定</td></tr><tr><td align="center">堆排序</td><td align="center"><em>O(nlog n)</em></td><td align="center"><em>O(nlog n)</em></td><td align="center"><em>O(nlog n)</em></td><td align="center"><em>O(1)</em></td><td align="center"><em>in-place</em></td><td align="center">不稳定</td></tr><tr><td align="center">计数排序</td><td align="center"><em>O(n + k)</em></td><td align="center"><em>O(n + k)</em></td><td align="center"><em>O(n + k)</em></td><td align="center"><em>O(k)</em></td><td align="center"><em>out-place</em></td><td align="center">稳定</td></tr><tr><td align="center">桶排序</td><td align="center"><em>O(n^2^)</em></td><td align="center"><em>O(n + k)</em></td><td align="center"><em>O(n + k)</em></td><td align="center"><em>O(n + k)</em></td><td align="center"><em>out-place</em></td><td align="center">稳定</td></tr><tr><td align="center">基数排序</td><td align="center"><em>O(n * k)</em></td><td align="center"><em>O(n * k)</em></td><td align="center"><em>O(n * k)</em></td><td align="center"><em>O(n + k)</em></td><td align="center"><em>out-place</em></td><td align="center">稳定</td></tr></tbody></table><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ul><li>冒泡排序作为最基础的排序，博主大学各项期末考试就被考过至少三次，在这里给出优化版写法。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//flag若为true,则此次循环没有交换元素，即待排序数组已经有序</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line">        arr[j] = arr[i] ^ arr[j];</span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>1.不断在未排序序列中找到最小的元素，与本轮循环起始元素比较。<br>2.若此元素较小，则更新最小元素下标。<br>3.交换本轮起始位置元素及最小位置元素。<br>4.重复上述步骤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;<span class="comment">//记录最小值下标</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                    minIndex = j;<span class="comment">//更新最小值下标</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i != minIndex) &#123;</span><br><span class="line">                swap(arr, i, minIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line">        arr[j] = arr[i] ^ arr[j];</span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>1.把第一个元素看作已有序。<br>2.从第二个元素开始依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; tmp) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><ul><li>希尔排序是对插入排序的优化，在元素无序且step &gt; 1时，分组并交换能让无序序列更快趋于有序，此时就可以发挥<strong>序列趋于有序时插入排序更快</strong>的优势。</li><li>但需要注意的是，如果数组本就有序或趋于有序，插入排序要优许希尔排序，因为它省去了分组的过程，直接对数组进行排序。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> arr.length / <span class="number">2</span>; step &gt; <span class="number">0</span>; step /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> step; i &lt; arr.length; i += step) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - step;</span><br><span class="line">                <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j] &gt; tmp) &#123;</span><br><span class="line">                    arr[j + step] = arr[j];</span><br><span class="line">                    j -= step;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j + step] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul><li>快排，顾名思义就是“快”，就连JDK自带的<code>Arrays.sort()</code>在传入整形参数时也会调用其自身的双轴快速排序,可见其重要性。</li><li>快排体现了“分治”的思想，它以基准值为根节点将一个数组转化为二叉树进行深度优先查找，并依次将符合条件的元素放入对应的位置。</li><li>要想找到基准，最关键的莫过于<code>partition()</code>方法，再构造这个方法前，我们先搭起快排的框架。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &gt;= R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> partition(arr, L, R);</span><br><span class="line">    quickSort(arr, L, pivot - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr, pivot + <span class="number">1</span>, R);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>如果遇上了数组量巨大且有序的情况，插入排序看了直接笑嘻，但这是快排的最坏情况，因为若不做处理，二叉树会退化为一条单链表，最后出现<code>StackOverFlowError()</code>，要解决栈溢出问题，我们要先引入<strong>三数取中法</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数组起始下标，中间下标与最后一个下标位置的元素作比较，返回中间值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">MiddleOfThree</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> L + ((R - L) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr[L] &lt; arr[R]) &#123;<span class="comment">//左小右大</span></span><br><span class="line">        <span class="keyword">if</span> (arr[M] &lt; arr[L]) &#123;</span><br><span class="line">            <span class="keyword">return</span> L;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[M] &gt; arr[R]) &#123;</span><br><span class="line">            <span class="keyword">return</span> R;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> M;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//左大右小</span></span><br><span class="line">        <span class="keyword">if</span> (arr[M] &gt; arr[L]) &#123;</span><br><span class="line">            <span class="keyword">return</span> L;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[M] &lt; arr[R]) &#123;</span><br><span class="line">            <span class="keyword">return</span> R;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> M;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>这样做的好处是：第一次返回的基准值<code>pivot</code>能保证是一个“不大不小”的元素，这样就算遇到了最差情况，它仍然会演化成一颗二叉树。</li><li>下面正式介绍<code>partition()</code>方法</li></ul><h3 id="分割方法"><a href="#分割方法" class="headerlink" title="分割方法"></a>分割方法</h3><h4 id="Hoare法"><a href="#Hoare法" class="headerlink" title="Hoare法"></a>Hoare法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.从右往左找比pivot小的值，找到后停下</span></span><br><span class="line"><span class="comment">    2.从左往右找比pivot大的值，找到后停下</span></span><br><span class="line"><span class="comment">    3.交换左右的值</span></span><br><span class="line"><span class="comment">    4.当L == R,退出循环并交换pivot和arr[L],使得pivot左边都小于它，右边都大于它</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivotVal</span> <span class="operator">=</span> arr[L];</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivotIdx</span> <span class="operator">=</span> L;</span><br><span class="line">    <span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line">        <span class="keyword">while</span> (L &lt; R &amp;&amp; arr[R] &gt;= pivotVal) &#123;<span class="comment">//直到找到小于pivotVal的下标</span></span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (L &lt; R &amp;&amp; arr[L] &lt;= pivotVal) &#123;<span class="comment">//直到找到大于pivotVal的下标</span></span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, L, pivotIdx);</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>初始基准值为arr[L],就要从右边开始找，否则可能出现最后基准值交换后又换回来的情况。</strong></li><li><strong>&gt;&#x3D;和&lt;&#x3D;不可改为&gt;和&lt;，若左右元素相等，就进入了死循环。</strong></li></ul><h4 id="挖坑法"><a href="#挖坑法" class="headerlink" title="挖坑法"></a>挖坑法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.将arr[L]保存在临时变量pivotVal中</span></span><br><span class="line"><span class="comment">    2.从右往左找比pivotVal小的值，找到后停下并把它赋给L</span></span><br><span class="line"><span class="comment">    3.从左往右找比pivotVal大的值，找到后停下并把它赋给R</span></span><br><span class="line"><span class="comment">    4.直到L和R相遇，退出循环并把pivotVal和arr[L]交换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">    <span class="comment">//此时的arr[L]已经通过三数取中法交换得到中间值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pivotVal</span> <span class="operator">=</span> arr[L];</span><br><span class="line">    <span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line">        <span class="keyword">while</span> (L &lt; R &amp;&amp; arr[R] &gt;= pivotVal) &#123;</span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[L] = arr[R];<span class="comment">//此时已经找到比pivotVal小的值，把它赋给arr[L]</span></span><br><span class="line">        <span class="keyword">while</span> (L &lt; R &amp;&amp; arr[L] &lt;= pivotVal) &#123;</span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[R] = arr[L];<span class="comment">//此时已经找到比pivotVal大的值，把它赋给arr[R]</span></span><br><span class="line">    &#125;</span><br><span class="line">    arr[L] = pivotVal;<span class="comment">//此时L和R已相遇，把pivotVal赋给任意一个即可</span></span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快慢指针法"><a href="#快慢指针法" class="headerlink" title="快慢指针法"></a>快慢指针法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.定义cur起始在prev后一个位置</span></span><br><span class="line"><span class="comment">    2.如果arr[cur] &lt; arr[L], 即快指针找到了小于基准值的位置，此时让慢指针向前走一步</span></span><br><span class="line"><span class="comment">    3.如果快慢指针的值不相等，交换</span></span><br><span class="line"><span class="comment">    4.退出循环，交换慢指针与原来的基准值arr[L]并返回</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partitionPoint</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> L;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> L + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur &lt; R) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[cur] &lt; arr[L] &amp;&amp; arr[++prev] != arr[cur]) &#123;</span><br><span class="line">            swap(arr, prev, cur);</span><br><span class="line">        &#125;</span><br><span class="line">        cur++;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, prev, L);</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代版"><a href="#迭代版" class="headerlink" title="迭代版"></a>迭代版</h3><ul><li>下面我们借助<strong>栈</strong>来实现快排的迭代版本。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSortItr</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> MiddleOfThree(arr, L, R);<span class="comment">//三数取中</span></span><br><span class="line">        swap(arr, L, M);</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> partition(arr, L, R);<span class="comment">//得到基准值下标</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            把基准值两边的左、右边界下标入栈</span></span><br><span class="line"><span class="comment">            此处判断L + 1和R - 1的原因：</span></span><br><span class="line"><span class="comment">            当数组长度较小，例如数组长度小于4时，仅靠MiddleOfThree()就可完成排序,</span></span><br><span class="line"><span class="comment">            不需要入栈，若改为仅判断L和R，可能会导致重复的下标入栈。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (L + <span class="number">1</span> &lt; pivot) &#123;</span><br><span class="line">            stack.push(L);</span><br><span class="line">            stack.push(pivot - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (R - <span class="number">1</span> &gt; pivot) &#123;</span><br><span class="line">            stack.push(pivot + <span class="number">1</span>);</span><br><span class="line">            stack.push(R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重复上述过程</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            R = stack.pop();</span><br><span class="line">            L = stack.pop();</span><br><span class="line">            M = MiddleOfThree(arr, L, R);</span><br><span class="line">            swap(arr, L, M);</span><br><span class="line">            pivot = partition(arr, L, R);</span><br><span class="line">            <span class="keyword">if</span> (L + <span class="number">1</span> &lt; pivot) &#123;</span><br><span class="line">                stack.push(L);</span><br><span class="line">                stack.push(pivot - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (R - <span class="number">1</span> &gt; pivot) &#123;</span><br><span class="line">                stack.push(pivot + <span class="number">1</span>);</span><br><span class="line">                stack.push(R);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="升级版"><a href="#升级版" class="headerlink" title="升级版"></a>升级版</h3><ul><li>我们不难发现，上述的方法都是以单个下标作为基准值，下面我借用<strong>荷兰国旗</strong>问题给出快排的优化版本。它引入两个基准值下标，将数组分为小于区、等于区、大于区三个区域，这样我们就能一次排好一批数。<blockquote><p>此算法理论上的最差时间复杂度也为*O(nlog n)*，每次递归它都随机从数组长度内取出一个值与小于区的边界值做交换，这样就使得人为无法造出最差情况，具体的数学推导不在这里展开分析。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSortPlus</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (L &lt; R) &#123;</span><br><span class="line">            <span class="comment">//从数组长度中随机获取一个下标作为基准值，将每种情况概率化</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">randomFlag</span> <span class="operator">=</span> L + (<span class="type">int</span>) (Math.random() * (R - L + <span class="number">1</span>));</span><br><span class="line">            swap(arr, L, randomFlag);</span><br><span class="line">            <span class="comment">//返回等于区的左右边界，若等于区只有一个数，则返回两个相同的值</span></span><br><span class="line">            <span class="type">int</span>[] pivot = partitionPlus(arr, L, R);</span><br><span class="line">            quickSortPlus(arr, L, pivot[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">            quickSortPlus(arr, pivot[<span class="number">1</span>] + <span class="number">1</span>, R);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] partitionPlus(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">less</span> <span class="operator">=</span> L;<span class="comment">//小于区左边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">more</span> <span class="operator">=</span> R;<span class="comment">//大于区有边界</span></span><br><span class="line">        <span class="keyword">while</span> (L &lt; more + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//如果小于区的值 &lt; 大于区的值,把小于区的值放入小于区左边界内</span></span><br><span class="line">            <span class="keyword">if</span> (arr[L] &lt; arr[R]) &#123;</span><br><span class="line">                swap(arr, less++, L++);</span><br><span class="line">                <span class="comment">//如果小于区的值大于 &gt; 大于区的值,交换并把换过来的值纳入大于区</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[L] &gt; arr[R]) &#123;</span><br><span class="line">                swap(arr, L, more--);</span><br><span class="line">                <span class="comment">//等于则不做处理</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                L++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回的less和more则为等于区的左右下标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;less, more&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[l];</span><br><span class="line">        arr[l] = arr[r];</span><br><span class="line">        arr[r] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ul><li>归并排序是一种典型的空间换时间的排序算法，它开辟了一个与原数组等大小的辅助数组用来存储每次分治的结果，这就使得它的空间复杂度来到了<em>O(n)</em>,它也是本文<strong>比较排序算法</strong>中唯一一个需要计算机额外开辟内存(<em>out-place</em>)的排序算法。</li><li><code>mergeSort()</code>体现了<strong>分</strong>的过程，而<code>merge()</code>则体现了<strong>治</strong>的过程。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (L &gt;= R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> L + ((R - L) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        mergeSort(arr, L, M);</span><br><span class="line">        mergeSort(arr, M + <span class="number">1</span>, R);</span><br><span class="line">        merge(arr, L, M, R);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> M, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[R - L + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//help数组下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> L, p2 = M + <span class="number">1</span>;<span class="comment">//M将数组分割为左右区域,p1,p2分别为两区域起始下标</span></span><br><span class="line">        <span class="keyword">while</span> (p1 &lt;= M &amp;&amp; p2 &lt;= R) &#123;</span><br><span class="line">            help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若两数组不等长,则把长的数组剩余元素移到help数组中</span></span><br><span class="line">        <span class="keyword">while</span> (p1 &lt;= M) &#123;</span><br><span class="line">            help[i++] = arr[p1++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p2 &lt;= R) &#123;</span><br><span class="line">            help[i++] = arr[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            arr[L + i] = help[i];<span class="comment">//L的值可能因递归发生变动,L + i防止后面的值把前面的值覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="迭代版-1"><a href="#迭代版-1" class="headerlink" title="迭代版"></a>迭代版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergeSortItr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (step &lt; arr.length) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i += step * <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> i + step - <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> M + step;</span><br><span class="line">                <span class="comment">//step二倍扩容可能导致M和R越界，故修正下标</span></span><br><span class="line">                <span class="keyword">if</span> (M &gt;= arr.length) &#123;</span><br><span class="line">                    M = arr.length - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (R &gt;= arr.length) &#123;</span><br><span class="line">                    R = arr.length - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                merge(arr, L, M, R); <span class="comment">//沿用递归版本的merge()</span></span><br><span class="line">            &#125;</span><br><span class="line">            step *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ul><li>堆排序本质上也是利用二叉树构建了<strong>大顶堆</strong>或<strong>小顶堆</strong>，通过不断的<code>heapify()</code>过程实现。</li><li>JDK中自带的小顶堆名为<code>PriorityQueue</code>,可以使用它解决<em>topK</em>问题，我们可以实现其内置的<code>Comparator()</code>接口来使用自定义排序。</li><li>下面我们使用手动构建<strong>大顶堆</strong>的方式实现数组从小到大的排序。</li></ul><h3 id="构建大顶堆"><a href="#构建大顶堆" class="headerlink" title="构建大顶堆"></a>构建大顶堆</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">buildMaxHeap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, i, len);<span class="comment">//将父节点i传入heapify()方法进行向下调整</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> p, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> p * <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//左子节点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> p * <span class="number">2</span> + <span class="number">2</span>;<span class="comment">//假设有右子节点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> p;<span class="comment">//记录最大值下标</span></span><br><span class="line">    <span class="comment">//在L和中找到最大值下标</span></span><br><span class="line">    <span class="keyword">if</span> (L &lt; len &amp;&amp; arr[L] &gt; arr[maxIndex]) &#123;</span><br><span class="line">        maxIndex = L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (R &lt; len &amp;&amp; arr[R] &gt; arr[maxIndex]) &#123;</span><br><span class="line">        maxIndex = R;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把最大值换到父节点位置，构建局部大顶堆</span></span><br><span class="line">    <span class="keyword">if</span> (maxIndex != p) &#123;</span><br><span class="line">        swap(arr, maxIndex, p);</span><br><span class="line">        <span class="comment">//递归，直至从p往下的所有节点均为大顶堆</span></span><br><span class="line">        heapify(arr, maxIndex, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">    arr[L] = arr[L] ^ arr[R];</span><br><span class="line">    arr[R] = arr[L] ^ arr[R];</span><br><span class="line">    arr[L] = arr[L] ^ arr[R];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现堆排序"><a href="#实现堆排序" class="headerlink" title="实现堆排序"></a>实现堆排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        buildMaxHeap(arr, len);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1.利用大根堆堆顶元素恒为最大值的性质，将堆顶元素与最后一个元素交换</span></span><br><span class="line"><span class="comment">            2.将换下去的最大元素移出检测范围</span></span><br><span class="line"><span class="comment">            3.heapify()将数组修正为大顶堆</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            swap(arr, i, <span class="number">0</span>);</span><br><span class="line">            len--;</span><br><span class="line">            heapify(arr, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><ul><li>从这里开始的三种排序算法，都<strong>不是基于比较</strong>的排序算法，计数排序在输入的元素在n个0到k之间的整数时，其效率优于任何比较排序算法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countingSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] maximum = getMaximum(arr);</span><br><span class="line">        <span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[maximum[<span class="number">1</span>] - maximum[<span class="number">0</span>] + <span class="number">1</span>];<span class="comment">//建立一个大小为最值之差的计数数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            help[arr[i] - maximum[<span class="number">0</span>]]++;<span class="comment">//记录数组中每个值与最小值的差值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            <span class="comment">//把计数数组中的值加上差值放入原数组</span></span><br><span class="line">            <span class="keyword">while</span> (help[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> i + maximum[<span class="number">0</span>];</span><br><span class="line">                arr[index++] = val;</span><br><span class="line">                help[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组最值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] getMaximum(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;min, max&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟笔试做题总结(第一周)</title>
      <link href="/2022/11/13/Written-1/"/>
      <url>/2022/11/13/Written-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day-1"></a>Day-1</h2><h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h3><ul><li><p>1.下列选项中属于面向对象编程主要特征的是（C）<br>A 继承<br>B 自顶向下<br>C 模块化<br>D 逐步求精</p><blockquote><p>正确答案：A<br>四大特征：抽象，封装，继承，多态</p></blockquote></li><li><p>2.在基本 JAVA 类型中，如果不明确指定，整数型的默认是 __ 类型，浮点数的默认是 __ 类型（A）<br>A int float<br>B int double<br>C long float<br>D long double</p><blockquote><p>正确答案：B<br>boolean的默认值为<code>false</code></p></blockquote></li><li><p>3.Math.round(11.5) 等于多少 (). Math.round(-11.5) 等于多少 (B).<br>A 11 ,-11<br>B 11 ,-12<br>C 12 ,-11<br>D 12 ,-12</p><blockquote><p>正确答案：C<br><code>Math.round()</code>为“四舍五入”方法，对传入的数字+0.5后向下取整，传入的参数为<code>float</code>返回<code>int</code>,传入的参数为<code>double</code>返回<code>long</code></p></blockquote></li></ul><h3 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h3><p>【组队竞赛】牛牛举办了一次编程比赛,参加比赛的有3*n个选手,每个选手都有一个水平值a_i.现在要将这些选手进行组队,一共组成n个队伍,即每个队伍3人.牛牛发现<br>队伍的水平值等于该队伍队员中第二高水平值。<br>例如:<br>一个队伍三个队员的水平值分别是3,3,3.那么队伍的水平值是3<br>一个队伍三个队员的水平值分别是3,2,3.那么队伍的水平值是3<br>一个队伍三个队员的水平值分别是1,5,2.那么队伍的水平值是2<br>为了让比赛更有看点,牛牛想安排队伍使所有队伍的水平值总和最大。<br>如样例所示:<br>如果牛牛把6个队员划分到两个队伍<br>team1:{1,2,5}, team2:{5,5,8}, 这时候水平值总和为7.<br>而如果方案为:<br>team1:{2,5,8}, team2:{1,5,5}, 这时候水平值总和为10.<br>没有比总和为10更大的方案,所以输出10<br>输入 ：<br>2<br>5 2 8 5 1 5<br>输出：<br>10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：中间值要尽可能大，所以从倒数第二个数开始，隔数相加，直到n = 0</span></span><br><span class="line"><span class="comment">    注意:本题若使用int的res，结果会越界，故要使用long </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span> * n];</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                nums[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums.length - <span class="number">2</span>; n &gt; <span class="number">0</span>; i -= <span class="number">2</span>) &#123;</span><br><span class="line">            res += nums[i];</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day-2"></a>Day-2</h2><h3 id="选择题-1"><a href="#选择题-1" class="headerlink" title="选择题"></a>选择题</h3><ul><li><p>1.A 派生出子类 B ， B 派生出子类 C ，并且在 java 源代码有如下声明：<br> <code>A a0=new A();</code><br> <code>A a1=new B();</code><br> <code>A a2=new C();</code><br>问以下哪个说法是正确的（B）<br>A 只有第一行能通过编译<br>B 第1、2行能通过编译，但第3行编译出错<br>C 第1、2、3行能通过编译，但第2、3行运行时出错<br>D 第1行，第2行和第3行的声明都是正确的</p><blockquote><p>正确答案：D<br>多态有三种表现形式：继承重写、重载、向上转型，<code>A a1 = new B();</code>属于向上转型，即父类的引用指向子类的对象，<br>而<code>A a2=new C();</code>体现了继承具有传递性，也可以称为间接继承。比如所有的类都见间接继承自<code>Object</code>类。</p></blockquote></li><li><p>4.在使用<code>super</code>和<code>this</code>关键字时，以下描述正确的是（A）<br>A 在子类构造方法中使用 <code>super()</code> 显示调用父类的构造方法，<code>super()</code> 必须写在子类构造方法的第一行，否则编译不通过<br>B <code>super()</code> 和 <code>this()</code> 不一定要放在构造方法内第一行<br>C <code>this()</code> 和 <code>super()</code> 可以同时出现在一个构造函数中<br>D <code>this()</code> 和 <code>super()</code> 可以在<code>static</code>环境中使用，包括<code>static</code>方法和<code>static</code>语句块</p><blockquote><p>B:<code>super()</code> 和 <code>this()</code> 均需放在构造方法内第一行。<br>C:<code>this</code>必然会调用其他的构造函数，而其他构造函数必然有<code>super</code>语句存在，这样会使得同一个构造函数中有相同的语句，编译不通过。<br>D:<code>this()</code>和<code>super()</code>都指的是对象，不能在<code>static</code>环境中使用。</p></blockquote></li><li><p>5.如下代码的结果是什么？（C）<br>A Base<br>B BaseBase<br>C 编译失败<br>D 代码运行但没有输出<br>E 运行时抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    Base() &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Base&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Alpha</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Alpha</span>();</span><br><span class="line"><span class="comment">//调用父类无参的构造方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正确答案:B<br>创建子类对象时，会先执行父类中的构造方法，若子类的直接父类美没有无参构造器，必须在自己构造器的第一行显式指明是调用父类”<code>super()</code>“还是自己”<code>this()</code>“的哪一个构造器。<br>Day-3选择题第2题考点。</p></blockquote></li><li><p>6.如下代码的输出结果是什么？(D)<br>A 0<br>B 1<br>C 2<br>D 编译失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">aMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        i++; </span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(); </span><br><span class="line">    test.aMethod(); </span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> test.aMethod();</span><br><span class="line">    System.out.println(j);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态变量只能在类主体中定义，不能在方法中定义。<code>static</code>直属于类，在静态方法中可以使用静态变量，但不能定义。</p></blockquote></li></ul><h3 id="编程题-1"><a href="#编程题-1" class="headerlink" title="编程题"></a>编程题</h3><p>【排序子序列】牛牛定义排序子序列为一个数组中一段连续的子序列,并且这段子序列是非递增或者非递减排序的。牛牛有一个长度为n的整数数组A,他现在有一个任<br>务是把数组A分为若干段排序子序列,牛牛想知道他最少可以把这个数组分为几段排序子序列.<br>如样例所示,牛牛可以把数组A划分为[1,2,3]和[2,2,1]两个排序子序列,至少需要划分为2个排序子序列,所以输出2<br>输入:<br>6<br>1 2 3 2 2 1<br>输出：<br>2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   数组中会有3种状态，arr[i] &gt; arr[i + 1], arr[i] = arr[i + 1], arr[i] &lt; arr[i + 1]</span></span><br><span class="line"><span class="comment">   每当循环结束就代表划分了一个子序列，i++,count++</span></span><br><span class="line"><span class="comment">   因为执行i+1操作可能发生数组越界，故创建一个n+1大小的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextInt()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                arr[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; n &amp;&amp; arr[i] &lt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;<span class="comment">//退出循环表示划分了一个子序列</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] == arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; n &amp;&amp; arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day-3"></a>Day-3</h2><h3 id="选择题-2"><a href="#选择题-2" class="headerlink" title="选择题"></a>选择题</h3><ul><li><p>1.以下代码运行输出的是（C）<br>A 输出：Person<br>B 没有输出<br>C 编译出错<br>D 运行出错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Person&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">        System.out.println(p.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1.一个JAVA文件中不能有两个<code>pubilc</code>类。<br>2.<code>private</code>修饰的变量只能在内内部才能访问，其子类也不能访问。<br>3.若改为<code>Person p = new Person();</code>也不无法访问<code>name</code>,因为此时仍处于子类的作用域。</p></blockquote></li><li><p>2.以下程序的输出结果为(D)<br>A BD<br>B DB<br>C C<br>D 编译错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Derived</span><span class="params">(String s)</span> &#123;</span><br><span class="line"><span class="comment">//        super(s);</span></span><br><span class="line">        System.out.print(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Derived</span>(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建子类对象会默认先调用父类的空参构造方法，此时父类已经创建有参构造器，则不会自动创建空参构造器，<code>super()</code>就会编译出错，正确做法如代码中注释。</p></blockquote></li><li><p>10.在创建派生类对象，构造函数的执行顺序（C）<br>A 基类构造函数，派生类对象成员构造函数，派生类本身的构造函数<br>B 派生类本身的构造函数，基类构造函数，对象成员构造函数<br>C 基类构造函数，派生类本身的构造函数，派生类对象成员构造函数<br>D 对象成员构造函数，基类构造函数，派生类本身的构造函数</p><blockquote><p>正确答案：A<br>1.初始化父类中的静态成员变量和静态代码块，按照在程序中出现的顺序初始化。<br>2.初始化子类中的静态成员变量和静态代码块，按照在程序中出现的顺序初始化。<br>3.初始化父类的普通成员变量和代码块，再执行父类的构造方法。<br>4.初始化子类的普通成员变量和代码块，在执行子类的构造方法。</p></blockquote></li></ul><h3 id="编程题-2"><a href="#编程题-2" class="headerlink" title="编程题"></a>编程题</h3><ul><li><p>1.字符串中找出连续最长的数字串<br>输入：<br>abcd12345ed125ss123456789<br>输出：<br>123456789</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用split方法将字符串按字符分割开即可,&quot;[a-z]&quot;为正则表达式.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        String[] sp = s.split(<span class="string">&quot;[a-z]&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (String str : sp) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res.length() &lt; str.length()) &#123;</span><br><span class="line">                res = str;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>-<code>String.split(String regex, int limit)</code>用法：<code>limit</code>不显式指明时默认为0。<br><code>limit = 0</code>:尽可能的多匹配, 且长度无限制, 但结尾空字符串将被丢弃。<br><code>limit &lt; 0</code>:尽可能的多匹配, 且长度无限制。<br><code>limit &lt; 0</code>:最多匹配<code>limit-1</code>次,得到一个长度为<code>limit</code>的数组. <code>String[limit-1]</code>为余下未匹配的字符串。</p></blockquote></li><li><p>2.【数组中出现次数超过一半的数字】<br>给一个长度为 n 的数组，数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。<br>例如输入一个长度为9的数组[1,2,3,2,2,2,5,4,2]。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。<br><strong>要求：空间复杂度：O(1),时间复杂度O(N)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    摩尔投票法：不同的两者一旦相遇就彼此抵消，最后剩下来的值都是相同的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                res = nums[i];</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res == nums[i]) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day-4"></a>Day-4</h2><h3 id="选择题-3"><a href="#选择题-3" class="headerlink" title="选择题"></a>选择题</h3><ul><li>4.java语言的下面几种数组复制方法中，哪个效率最高？（C）<br>A <code>for</code> 循环逐一复制<br>B <code>System.arraycopy</code><br>C <code>Array.copyOf</code><br>D 使用<code>clone</code>方法<blockquote><p>正确答案：B<br><code>System.arraycopy</code>是一个静态本地方法，由虚拟机实现，效率最高。<br>浅拷贝：只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，换言之，修改修对象会影响到原对象。<br>深拷贝：会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象，是“值”而不是“引用”。</p></blockquote></li><li>9.下面哪些类实现或继承了 <code>Collection</code> 接口？(BCD)<br>A <code>HashMap</code><br>B <code>ArrayList</code><br>C <code>Vector</code><br>D <code>Iterator</code><blockquote><p>正确答案：BC<br><code>HashMap</code>继承自<code>Map</code>接口，而<code>Iterator</code>接口是<code>Collection</code>的父类。</p></blockquote></li></ul><h3 id="编程题-3"><a href="#编程题-3" class="headerlink" title="编程题"></a>编程题</h3><p>进制转换：给定一个十进制数M，以及需要转换的进制数N。将十进制数M转化为N进制数。<br>输入：<br>7 2<br>输出：<br>111</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需要考虑负数情况！刚开始没考虑卡了我好久。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (in.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">table</span> <span class="operator">=</span> <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//用flag标记负数</span></span><br><span class="line">            <span class="keyword">if</span> (m &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                m = -m;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">                s.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (m != <span class="number">0</span>) &#123;</span><br><span class="line">                s.append(table.charAt(m % n));</span><br><span class="line">                m /= n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                s.append(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            s.reverse();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day-5"><a href="#Day-5" class="headerlink" title="Day-5"></a>Day-5</h2><h3 id="选择题-4"><a href="#选择题-4" class="headerlink" title="选择题"></a>选择题</h3><ul><li><p>2.以下代码结果是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">foo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String sgf[])</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        operate(a, b);</span><br><span class="line">        System.out.println(a + <span class="string">&quot;.&quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">operate</span><span class="params">(StringBuffer x, StringBuffer y)</span> &#123;</span><br><span class="line">        x.append(y);</span><br><span class="line">        y = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>值传递：在调用函数时将实际参数复制一份传递到方法中，在方法中修改vans胡不会影响到实际参数。<br>引用传递：将实际参数的地址值传入方法，此题中<code>y = x</code>这一步是让y指向了x，而实际的B还是指向它自己。<br><img src="https://www.zer02.fun/img/blogpng/test01.webp" alt="图示"></p></blockquote></li><li><p>3.在JAVA中，假设A有构造方法A(int a)，则在类A的其他构造方法中调用该构造方法和语句格式应该为（A）<br>A <code>this.A(x)</code><br>B <code>this(x)</code><br>C <code>super(x)</code><br>D <code>A(x)</code></p><blockquote><p>正确答案：B<br>A.这是调用普通方法的写法<br>C.这时显示调用父类构造方法<br>D.调用静态方法</p></blockquote></li><li><p>7.下列哪个说法是正确的（A）<br>A <code>ConcurrentHashMap</code>使用<code>synchronized</code>关键字保证线程安全<br>B <code>HashMap</code>实现了<code>Collction</code>接口<br>C <code>Array.asList</code>方法返回<code>java.util.ArrayList</code>对象<br>D <code>SimpleDateFormat</code>是线程不安全的</p><blockquote><p>正确答案：D<br>A.<code>JDK1.7</code> 中采用segment的分段锁机制实现线程安全，而<code>JDK1.8</code>采用CAS+Synchronized保证线程安全。<br>B.<code>HashMap</code>实现了<code>Map</code>接口。<br>C.<code>Arrays.asList()</code>方法返回的是<code>Arrays.ArrayList</code>类型。</p></blockquote></li></ul><h3 id="编程题-4"><a href="#编程题-4" class="headerlink" title="编程题"></a>编程题</h3><p>【连续最大和】一个数组有 N 个元素，求连续子数组的最大和。 例如：[-1,2,1]，和最大的连续子数组为[2,1]，其和为 3.<br>输入：<br>3 -1 2 1<br>输出：<br>3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    动态规划直接秒杀</span></span><br><span class="line"><span class="comment">    因为这里只需要最后的结果，所以dp可以不用定义成数组，空间复杂度优化为：O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] agrs)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextInt()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                arr[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dp</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            dp = Math.max(arr[i], dp + arr[i]);</span><br><span class="line">            max = Math.max(max, dp);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Day-6"><a href="#Day-6" class="headerlink" title="Day-6"></a>Day-6</h2><h3 id="选择题-5"><a href="#选择题-5" class="headerlink" title="选择题"></a>选择题</h3><ul><li><p>1.下面哪段程序能够正确的实现了GBK编码字节流到UTF-8编码字节流的转换：(D)<br><code>byte[] src,dst;</code><br>A.<code>dst=String.fromBytes(src，&quot;GBK&quot;).getBytes(&quot;UTF-8&quot;)</code><br>B.<code>dst=new String(src，&quot;GBK&quot;).getBytes(&quot;UTF-8&quot;)</code><br>C.<code>dst=new String(&quot;GBK&quot;，src).getBytes()</code><br>D.<code>dst=String.encode(String.decode(src，&quot;GBK&quot;))，&quot;UTF-8&quot; )</code></p><blockquote><p>正确答案：B<br>思路为解码-&gt;还原-&gt;编码，然而<code>String</code>并没有<code>fromBytes</code>和<code>encode</code>这两个静态方法。</p></blockquote></li><li><p>3.下列哪个对访问修饰符作用范围由大到小排列是正确的？(B)<br>A <code>private</code>&gt;<code>default</code>&gt;<code>protected</code>&gt;<code>public</code><br>B <code>public</code>&gt;<code>default</code>&gt;<code>protected</code>&gt;<code>private</code><br>C <code>private</code>&gt;<code>protected</code>&gt;<code>default</code>&gt;<code>public</code><br>D <code>public</code>&gt;<code>protected</code>&gt;<code>default</code>&gt;<code>private</code></p><blockquote><p>正确答案：D<br><code>public</code>：当前类，子类，包，其他包<br><code>protected</code>:当前类，子类，包<br><code>default</code>:当前类，包内<br><code>private</code>:当前类</p></blockquote></li><li><p>5.阅读下列程序，选择哪一个是正确的输出结果（C）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I’m A class &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloB</span> <span class="keyword">extends</span> <span class="title class_">HelloA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I’m B class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HelloB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A <code>static A I’m A class static B I’m B class</code><br>B <code>I’m A class I’m B class static A static B</code><br>C <code>static A static B I’m A class I’m B class</code><br>D <code>I’m A class static A I’m B class static B</code></p><blockquote><p>对应<strong>Day-3选择题第二题</strong></p></blockquote></li><li><p>8.在Java中下面Class的声明哪些是错误的？（BCD）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">A:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line">B:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line">C:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">D:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正确答案：ABC<br>A.<code>final</code>修饰的类为终态类，不能被继承，而抽象类必须被继承才有意义。<br>B.<code>final</code>修饰的方法不能被重写，而继承抽象类必须重写其抽象方法。<br>C.抽象方法仅声明，并不做实现的方法。</p></blockquote></li><li><p>10.下面哪些赋值语句是正确的（ABDE）<br>A <code>long test=012</code><br>B <code>float f=-412</code><br>C <code>int other =(int)true</code><br>D <code>double d=0x12345678</code><br>E <code>byte b=128</code></p><blockquote><p>正确答案：ABD<br><code>byte</code>的取值范围为-128~127,因此会抛出异常：<code>java: 不兼容的类型: 从int转换到byte可能会有损失</code>。<br>也可写为<code>byte b = (byte) 128;</code> 此时b &#x3D; -128。</p></blockquote></li></ul><h3 id="编程题-5"><a href="#编程题-5" class="headerlink" title="编程题"></a>编程题</h3><p>【把字符串转换成整数】<br>将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为 0 或者字符串不是一个合法的数值则返回 0.<br>注意：<br>①字符串中可能出现任意符号，出现除 +&#x2F;- 以外符号时直接输出 0<br>②字符串中可能出现 +&#x2F;- 且仅可能出现在字符串首位。<br>输入：<br>+2147483647<br>1a33<br>输出：<br>2147483647<br>0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    本题存在漏洞:当str = &quot;-2147483649&quot;时，按理应该返回0，但返回2147483649仍然可以AC</span></span><br><span class="line"><span class="comment">    希望官方有朝一日能修复</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">StrToInt</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] c = str.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//用flag标记是否为负数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (c[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span> || c[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            str = str.substring(<span class="number">1</span>);<span class="comment">//如果首位出现+或者-，剪掉首位</span></span><br><span class="line">            c = str.toCharArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> getNum(c.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i] &lt; <span class="string">&#x27;0&#x27;</span> || c[i] &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += ((c[i] - <span class="string">&#x27;0&#x27;</span>) * num);</span><br><span class="line">                num /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> - res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">(<span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            num *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL总结</title>
      <link href="/2022/11/13/mysql/"/>
      <url>/2022/11/13/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="1-1-通用语法及分类"><a href="#1-1-通用语法及分类" class="headerlink" title="1.1 通用语法及分类"></a>1.1 通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL(数据定义语言)"></a>DDL(数据定义语言)</h3><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UTF8 字符集长度为 3 字节，有些符号占 4 字节，所以推荐用 utf8mb4 字符集</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code><br>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 最后一个字段后面没有逗号</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 [COMMENT 字段<span class="number">1</span>注释],</span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>类型 [COMMENT 字段<span class="number">2</span>注释],</span><br><span class="line">字段<span class="number">3</span> 字段<span class="number">3</span>类型 [COMMENT 字段<span class="number">3</span>注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code></p><p>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code></p><p>例：将 emp 表的 nickname 字段修改为 username，类型为 varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML(数据操作语言)"></a>DML(数据操作语言)</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code></p><p>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL(数据查询语言)"></a>DQL(数据查询语言)</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名字段</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后的条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>&#x2F; 之后的_不作为通配符</p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code><br>条件：</p><table><thead><tr><th align="center">比较运算符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td></tr><tr><td align="center">&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt; 或 !&#x3D;</td><td align="center">不等于</td></tr><tr><td align="center">BETWEEN … AND …</td><td align="center">在某个范围内（含最小、最大值）</td></tr><tr><td align="center">IN(…)</td><td align="center">在 in 之后的列表中的值，多选一</td></tr><tr><td align="center">LIKE 占位符</td><td align="center">模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td align="center">IS NULL</td><td align="center">是NULL</td></tr></tbody></table><table><thead><tr><th align="center">逻辑运算符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">AND 或 &amp;&amp;</td><td align="center">并且（多个条件同时成立）</td></tr><tr><td align="center">OR</td><td align="center">或者（多个条件任意一个成立）</td></tr><tr><td align="center">NOT 或 !</td><td align="center">非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 年龄等于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 小于等于</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 没有身份证</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> idcard <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">-- 有身份证</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 不等于</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄在20到30之间</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 下面语句不报错，但查不到任何信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">30</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 性别为女且年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">30</span> <span class="keyword">and</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="comment">-- 年龄等于25或30或35</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">25</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">35</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>);</span><br><span class="line"><span class="comment">-- 姓名为两个字</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"><span class="comment">-- 身份证最后为X</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;%X&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h4><p>常见聚合函数(null 值不参与聚合函数运算)：</p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计数量</td></tr><tr><td align="center">max</td><td align="center">最大值</td></tr><tr><td align="center">min</td><td align="center">最小值</td></tr><tr><td align="center">avg</td><td align="center">平均值</td></tr><tr><td align="center">sum</td><td align="center">求和</td></tr></tbody></table><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;陕西省&quot;;</code></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where 是分组之前进行过滤，不满足 where 条件不参与分组；having 是分组后对结果进行过滤。</li><li>判断条件不同：where 不能对聚合函数进行判断，而 having 可以。</li></ul><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性数量</span></span><br><span class="line"><span class="keyword">select</span> gender, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性的平均年龄</span></span><br><span class="line"><span class="keyword">select</span> gender, <span class="built_in">avg</span>(age) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 年龄小于45，并根据工作地址分组</span></span><br><span class="line"><span class="keyword">select</span> workaddress, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress;</span><br><span class="line"><span class="comment">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span></span><br><span class="line"><span class="keyword">select</span> workaddress, <span class="built_in">count</span>(<span class="operator">*</span>) address_count <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress <span class="keyword">having</span> address_count <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据年龄升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br><span class="line"><span class="comment">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>, entrydate <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</li></ul><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询第一页数据，展示10条</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee LIMIT <span class="number">0</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 查询第二页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee LIMIT <span class="number">10</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>起始索引从 0 开始，起始索引 &#x3D; （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL 是 LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>1.FROM(从哪张表查询) -&gt; 2.WHERE(对数据进行筛选) -&gt; 3.GROUP BY(对筛选的数据进行分组) -&gt; 4.HAVING(分组后的条件列表)-&gt; 5.SELECT(选择对应数据) -&gt; 6.ORDER BY(对结果排序) -&gt; 7.LIMIT(对结果分页)</p><h3 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL(数据控制语言)"></a>DCL(数据控制语言)</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p><p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户test，只能在当前主机localhost访问</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 创建用户test，能在任意主机访问</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 修改密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>主机名可以使用 % 通配符</li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p><table><thead><tr><th align="center">权限</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ALL, ALL PRIVILEGES</td><td align="center">所有权限</td></tr><tr><td align="center">SELECT</td><td align="center">查询数据</td></tr><tr><td align="center">INSERT</td><td align="center">插入数据</td></tr><tr><td align="center">UPDATE</td><td align="center">修改数据</td></tr><tr><td align="center">DELETE</td><td align="center">删除数据</td></tr><tr><td align="center">ALTER</td><td align="center">修改表</td></tr><tr><td align="center">DROP</td><td align="center">删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td align="center">CREATE</td><td align="center">创建数据库&#x2F;表</td></tr></tbody></table><p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="1-2-函数"><a href="#1-2-函数" class="headerlink" title="1.2 函数"></a>1.2 函数</h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CONCAT(s1, s2, …, sn)</td><td align="center">字符串拼接，将 s1, s2, …, sn 拼接成一个字符串</td></tr><tr><td align="center">LOWER(str)</td><td align="center">将字符串全部转为小写</td></tr><tr><td align="center">UPPER(str)</td><td align="center">将字符串全部转为大写</td></tr><tr><td align="center">LPAD(str, n, pad)</td><td align="center">左填充，用字符串 pad 对 str 的左边进行填充，达到 n 个字符串长度</td></tr><tr><td align="center">RPAD(str, n, pad)</td><td align="center">右填充，用字符串 pad 对 str 的右边进行填充，达到 n 个字符串长度</td></tr><tr><td align="center">TRIM(str)</td><td align="center">去掉字符串头部和尾部的空格</td></tr><tr><td align="center">SUBSTRING(str, start, len)</td><td align="center">返回从字符串 str 从 start 位置起的 len 个长度的字符串（注意索引从 1 开始）</td></tr></tbody></table><p>使用示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 拼接</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>);</span><br><span class="line"><span class="comment">-- 小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="comment">-- 大写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="comment">-- 左填充</span></span><br><span class="line"><span class="keyword">SELECT</span> LPAD(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="comment">-- 右填充</span></span><br><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="comment">-- 去除空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27; Hello World &#x27;</span>);</span><br><span class="line"><span class="comment">-- 切片（起始索引为1）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;Hello World&#x27;</span>, <span class="number">1</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CEIL(x)</td><td align="center">向上取整</td></tr><tr><td align="center">FLOOR(x)</td><td align="center">向下取整</td></tr><tr><td align="center">MOD(x, y)</td><td align="center">返回 x&#x2F;y 的模</td></tr><tr><td align="center">RAND()</td><td align="center">返回 0~1 内的随机数</td></tr><tr><td align="center">ROUND(x, y)</td><td align="center">求参数 x 的四舍五入值，保留 y 位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CURDATE()</td><td align="center">返回当前日期</td></tr><tr><td align="center">CURTIME()</td><td align="center">返回当前时间</td></tr><tr><td align="center">NOW()</td><td align="center">返回当前日期和时间</td></tr><tr><td align="center">YEAR(date)</td><td align="center">获取指定 date 的年份</td></tr><tr><td align="center">MONTH(date)</td><td align="center">获取指定 date 的月份</td></tr><tr><td align="center">DAY(date)</td><td align="center">获取指定 date 的日期</td></tr><tr><td align="center">DATE_ADD(date, INTERVAL expr type)</td><td align="center">返回一个日期&#x2F;时间值加上一个时间间隔 expr 后的时间值</td></tr><tr><td align="center">DATEDIFF(date1, date2)</td><td align="center">返回起始时间 date1 和结束时间 date2 之间的天数</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DATE_ADD</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="number">70</span> <span class="keyword">YEAR</span>);</span><br></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：<br>|函数|功能|<br>|IF(value, t, f)|如果 value 为 true，则返回 t，否则返回 f|<br>|IFNULL(value1, value2)|如果 value1 不为空，返回 value1，否则返回 value2|<br>|CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END|如果 val1 为 true，返回 res1，… 否则返回 default 默认值|<br>|CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END|如果 expr 的值等于 val1，返回 res1，… 否则返回 default 默认值|</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">name,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">then</span> <span class="string">&#x27;中年&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;青年&#x27;</span> <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">from</span> employee;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">name,</span><br><span class="line">(<span class="keyword">case</span> workaddress <span class="keyword">when</span> <span class="string">&#x27;北京市&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">when</span> <span class="string">&#x27;上海市&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;二线城市&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">&#x27;工作地址&#x27;</span></span><br><span class="line"><span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><h2 id="1-3-约束"><a href="#1-3-约束" class="headerlink" title="1.3 约束"></a>1.3 约束</h2><p>分类：</p><table><thead><tr><th align="center">约束</th><th align="center">描述</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">非空约束</td><td align="center">限制该字段的数据不能为 null</td><td align="center">NOT NULL</td></tr><tr><td align="center">唯一约束</td><td align="center">保证该字段的所有数据都是唯一、不重复的</td><td align="center">UNIQUE</td></tr><tr><td align="center">主键约束</td><td align="center">主键是一行数据的唯一标识，要求非空且唯一</td><td align="center">PRIMARY KEY</td></tr><tr><td align="center">默认约束</td><td align="center">保存数据时，如果未指定该字段的值，则采用默认值</td><td align="center">DEFAULT</td></tr><tr><td align="center">检查约束（8.0.1 版本后）</td><td align="center">保证字段值满足某一个条件</td><td align="center">CHECK</td></tr><tr><td align="center">外键约束</td><td align="center">用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td align="center">FOREIGN KEY</td></tr></tbody></table><p><strong>约束是作用于表中字段上的，可以再创建表&#x2F;修改表的时候添加约束。</strong></p><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table><thead><tr><th align="center">约束条件</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">主键</td><td align="center">PRIMARY KEY</td></tr><tr><td align="center">自动增长</td><td align="center">AUTO_INCREMENT</td></tr><tr><td align="center">不为空</td><td align="center">NOT NULL</td></tr><tr><td align="center">唯一</td><td align="center">UNIQUE</td></tr><tr><td align="center">逻辑条件</td><td align="center">CHECK</td></tr><tr><td align="center">默认值</td><td align="center">DEFAULT</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">age <span class="type">int</span> <span class="keyword">check</span>(age <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">and</span> age <span class="operator">&lt;</span> <span class="number">120</span>),</span><br><span class="line">status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>作用：保证数据一致性与完整性</p><p>添加外键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">...</span><br><span class="line">[<span class="keyword">CONSTRAINT</span>] [外键名称] <span class="keyword">FOREIGN</span> KEY(外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例子</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key(dept_id) <span class="keyword">references</span> dept(id);</span><br></pre></td></tr></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-x2F-更新行为"><a href="#删除-x2F-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h4><table><thead><tr><th align="center">行为</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">NO ACTION</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与 RESTRICT 一致）</td></tr><tr><td align="center">RESTRICT</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与 NO ACTION 一致）</td></tr><tr><td align="center">CASCADE</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除&#x2F;更新外键在子表中的记录</td></tr><tr><td align="center">SET NULL</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为 null（要求该外键允许为 null）</td></tr><tr><td align="center">SET DEFAULT</td><td align="center">父表有变更时，子表将外键设为一个默认值（Innodb 不支持）</td></tr></tbody></table><p>更改删除&#x2F;更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="1-4-多表查询"><a href="#1-4-多表查询" class="headerlink" title="1.4 多表查询"></a>1.4 多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合 A 集合和 B 集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p><h4 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h4><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工姓名，及关联的部门的名称</span></span><br><span class="line"><span class="comment">-- 隐式</span></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> employee <span class="keyword">as</span> e, dept <span class="keyword">as</span> d <span class="keyword">where</span> e.dept <span class="operator">=</span> d.id;</span><br><span class="line"><span class="comment">-- 显式</span></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> employee <span class="keyword">as</span> e <span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><h4 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h4><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表 1 的所有数据，包含表 1 和表 2 交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 左</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.name <span class="keyword">from</span> employee <span class="keyword">as</span> e <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br><span class="line"><span class="keyword">select</span> d.name, e.<span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;  <span class="comment">-- 这条语句与下面的语句效果一样</span></span><br><span class="line"><span class="comment">-- 右</span></span><br><span class="line"><span class="keyword">select</span> d.name, e.<span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">as</span> e <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><p>左连接可以查询到没有 dept 的 employee，右连接可以查询到没有 employee 的 dept</p><h4 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h4><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工及其所属领导的名字</span></span><br><span class="line"><span class="keyword">select</span> a.name, b.name <span class="keyword">from</span> employee a, employee b <span class="keyword">where</span> a.manager <span class="operator">=</span> b.id;</span><br><span class="line"><span class="comment">-- 没有领导的也查询出来</span></span><br><span class="line"><span class="keyword">select</span> a.name, b.name <span class="keyword">from</span> employee a <span class="keyword">left</span> <span class="keyword">join</span> employee b <span class="keyword">on</span> a.manager <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure><h4 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h4><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表A ...</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表B ...</span><br></pre></td></tr></table></figure><h5 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用 or 效率高，不会使索引失效</li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL 语句中嵌套 SELECT 语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br>子查询外部的语句可以是 INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个</p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询销售部所有员工</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>;</span><br><span class="line"><span class="comment">-- 根据销售部部门ID，查询员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 合并（子查询）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询xxx入职之后的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> (<span class="keyword">select</span> entrydate <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th align="center">操作符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IN</td><td align="center">在指定的集合范围内，多选一</td></tr><tr><td align="center">NOT IN</td><td align="center">不在指定的集合范围内</td></tr><tr><td align="center">ANY</td><td align="center">子查询返回列表中，有任意一个满足即可</td></tr><tr><td align="center">SOME</td><td align="center">与 ANY 等同，使用 SOME 的地方都可以使用 ANY</td></tr><tr><td align="center">ALL</td><td align="center">子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询销售部和市场部的所有员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询比财务部所有人工资都高的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">all</span>(<span class="keyword">select</span> salary <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span>));</span><br><span class="line"><span class="comment">-- 查询比研发部任意一人工资高的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">any</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：&#x3D;, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询与xxx的薪资及直属领导相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> (salary, manager) <span class="operator">=</span> (<span class="number">12500</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> (salary, manager) <span class="operator">=</span> (<span class="keyword">select</span> salary, manager <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> (job, salary) <span class="keyword">in</span> (<span class="keyword">select</span> job, salary <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xxx1&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;xxx2&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.<span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>) <span class="keyword">as</span> e <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><h2 id="1-5-事务"><a href="#1-5-事务" class="headerlink" title="1.5 事务"></a>1.5 事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询张三账户余额</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 2. 将张三账户余额-1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 此语句出错后张三钱减少但是李四钱没有增加</span></span><br><span class="line">模拟<span class="keyword">sql</span>语句错误</span><br><span class="line"><span class="comment">-- 3. 将李四账户余额+1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看事务提交方式</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;</span><br><span class="line"><span class="comment">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@AUTOCOMMIT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置手动提交后上面代码改为：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>操作方式：<br>开启事务：<code>START TRANSACTION 或 BEGIN TRANSACTION;</code></p><p>提交事务：<code>COMMIT;</code></p><p>回滚事务：<code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h3 id="四大特性-ACID"><a href="#四大特性-ACID" class="headerlink" title="四大特性 ACID"></a>四大特性 ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th align="center">问题</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">脏读</td><td align="center">一个事务读到另一个事务还没提交的数据</td></tr><tr><td align="center">不可重复读</td><td align="center">一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td align="center">幻读</td><td align="center">一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><p>并发事务隔离级别：</p><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">Read uncommitted</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">Read commited</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">Repeatable Read(默认)</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">Serializable</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><ul><li>√ 表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1 id="2-进阶篇"><a href="#2-进阶篇" class="headerlink" title="2.进阶篇"></a>2.进阶篇</h1><h2 id="2-1-存储引擎"><a href="#2-1-存储引擎" class="headerlink" title="2.1 存储引擎"></a>2.1 存储引擎</h2><p><img src="https://www.zer02.fun/img/blogpng/mysql_01.webp" alt="结构图"></p><p><img src="https://www.zer02.fun/img/blogpng/mysql_02.webp" alt="结构图"></p><p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是 InnoDB。</p><p>相关操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询建表语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> account;</span><br><span class="line"><span class="comment">-- 建表时指定存储引擎</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB;</span><br><span class="line"><span class="comment">-- 查看当前数据库支持的存储引擎</span></span><br><span class="line"><span class="keyword">show</span> engines;</span><br></pre></td></tr></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键约束</strong>，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx 代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：<br>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从 idb 文件提取表结构数据：<br>（在 cmd 运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://www.zer02.fun/img/blogpng/mysql_03.webp" alt="结构图"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash 索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table><thead><tr><th align="center">特点</th><th align="center">InnoDB</th><th align="center">MyISAM</th><th align="center">Memory</th></tr></thead><tbody><tr><td align="center">存储限制</td><td align="center">64TB</td><td align="center">有</td><td align="center">有</td></tr><tr><td align="center">事务安全</td><td align="center">支持</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">锁机制</td><td align="center">行锁</td><td align="center">表锁</td><td align="center">表锁</td></tr><tr><td align="center">B+tree 索引</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">Hash 索引</td><td align="center">-</td><td align="center">-</td><td align="center">支持</td></tr><tr><td align="center">全文索引</td><td align="center">支持(5.6版本之后)</td><td align="center">支持</td><td align="center">-</td></tr><tr><td align="center">空间使用</td><td align="center">高</td><td align="center">低</td><td align="center">N&#x2F;A</td></tr><tr><td align="center">内存使用</td><td align="center">高</td><td align="center">低</td><td align="center">中等</td></tr><tr><td align="center">批量插入速度</td><td align="center">低</td><td align="center">高</td><td align="center">高</td></tr><tr><td align="center">支持外键</td><td align="center">支持</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="2-2-性能分析"><a href="#2-2-性能分析" class="headerlink" title="2.2 性能分析"></a>2.2 性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;; 或者 SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认 10 秒）的所有 SQL 语句的日志。<br>MySQL 的慢查询日志默认没有开启，需要在 MySQL 的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息： # 开启慢查询日志开关<br>slow_query_log&#x3D;1 # 设置慢查询日志的时间为 2 秒，SQL 语句执行时间超过 2 秒，就会视为慢查询，记录慢查询日志<br>long_query_time&#x3D;2<br>更改后记得重启 MySQL 服务，日志文件位置：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做 SQL 优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code></p><p>profiling 默认关闭，可以通过 set 语句在 session&#x2F;global 级别开启 profiling：<br><code>SET profiling = 1;</code></p><p>查看所有语句的耗时：<br><code>show profiles;</code></p><p>查看指定 query_id 的 SQL 语句各个阶段的耗时：<br><code>show profile for query query_id;</code></p><p>查看指定 query_id 的 SQL 语句 CPU 的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法： # 直接在 select 语句之前加上关键字 explain &#x2F; desc<br>EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id 相同，执行顺序从上到下；id 不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（SELECT&#x2F;WHERE 之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL 认为必须要执行的行数，在 InnoDB 引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered 的值越大越好</li></ul><h2 id="2-3-索引"><a href="#2-3-索引" class="headerlink" title="2.3 索引"></a>2.3 索引</h2><p>索引是帮助 MySQL <strong>高效获取数据的数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：<br>优点：</p><ul><li>提高数据检索效率，降低数据库的 IO 成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低 CPU 的消耗<br>缺点：</li><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table><thead><tr><th align="center">索引结构</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">B+Tree</td><td align="center">最常见的索引类型，大部分引擎都支持 B+树索引</td></tr><tr><td align="center">Hash</td><td align="center">底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td align="center">R-Tree(空间索引)</td><td align="center">空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td align="center">Full-Text(全文索引)</td><td align="center">是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th align="center">索引</th><th align="center">InnoDB</th><th align="center">MyISAM</th><th align="center">Memory</th></tr></thead><tbody><tr><td align="center">B+Tree 索引支持</td><td align="center">支持</td><td align="center">支持</td><td align="center"></td></tr><tr><td align="center">Hash 索引</td><td align="center">不支持</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">R-Tree 索引</td><td align="center">不支持</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">Full-text</td><td align="center">5.6 版本后支持</td><td align="center">支持</td><td align="center">不支持</td></tr></tbody></table><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://www.zer02.fun/img/blogpng/mysql_04.webp" alt="二叉树"></p><p>二叉树的缺点可以用红黑树来解决：<br><img src="https://www.zer02.fun/img/blogpng/mysql_05.webp" alt="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为 5（5 阶）的 b-tree 为例（每个节点最多存储 4 个 key，5 个指针）<br><img src="https://www.zer02.fun/img/blogpng/mysql_06.webp" alt="BTree"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：<br><img src="https://www.zer02.fun/img/blogpng/mysql_07.webp" alt="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。<br><img src="https://www.zer02.fun/img/blogpng/mysql_08.webp" alt="B+Tree结构图"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的 hash 算法，将键值换算成新的 hash 值，映射到对应的槽位上，然后存储在 hash 表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了 hash 冲突（也称为 hash 碰撞），可以通过链表来解决。<br><img src="https://www.zer02.fun/img/blogpng/mysql_09.webp" alt="Hash索引原理图"></p><p>特点：</p><ul><li>Hash 索引只能用于对等比较（&#x3D;、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应 hash 功能，hash 索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</p><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><table><thead><tr><th align="left">分类</th><th align="left">含义</th><th align="left">特点</th><th align="left">关键字</th></tr></thead><tbody><tr><td align="left">主键索引</td><td align="left">针对于表中主键创建的索引</td><td align="left">默认自动创建，只能有一个</td><td align="left">PRIMARY</td></tr><tr><td align="left">唯一索引</td><td align="left">避免同一个表中某数据列中的值重复</td><td align="left">可以有多个</td><td align="left">UNIQUE</td></tr><tr><td align="left">常规索引</td><td align="left">快速定位特定数据</td><td align="left">可以有多个</td><td align="left"></td></tr><tr><td align="left">全文索引</td><td align="left">全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td align="left">可以有多个</td><td align="left">FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th align="left">分类</th><th align="left">含义</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left">聚集索引(Clustered Index)</td><td align="left">将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td align="left">必须有，而且只有一个</td></tr><tr><td align="left">二级索引(Secondary Index)</td><td align="left">将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td align="left">可以存在多个</td></tr></tbody></table><p>演示图：<br><img src="https://www.zer02.fun/img/blogpng/mysql_10.webp" alt="大致原理"><br><img src="https://www.zer02.fun/img/blogpng/mysql_11.webp" alt="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><ol><li><p>以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;Arm&#x27;</span>;</span><br><span class="line"><span class="comment">-- 备注：id为主键，name字段创建的有索引</span></span><br></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p></li><li><p>InnoDB 主键索引的 B+Tree 高度为多少？<br>答：假设一行数据大小为 1k，一页中可以存储 16 行这样的数据。InnoDB 的指针占用 6 个字节的空间，主键假设为 bigint，占用字节数为 8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的 key 的数量，(n + 1) 表示指针数量（比 key 多一个）。算出 n 约为 1170。</p></li></ol><p>如果树的高度为 2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为 3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_name <span class="keyword">on</span> tb_user(name);</span><br><span class="line"><span class="comment">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_user_phone <span class="keyword">on</span> tb_user (phone);</span><br><span class="line"><span class="comment">-- 为profession, age, status创建联合索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_pro_age_stat <span class="keyword">on</span> tb_user(profession, age, status);</span><br><span class="line"><span class="comment">-- 为email建立合适的索引来提升查询效率</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_email <span class="keyword">on</span> tb_user(email);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">drop</span> index idx_user_email <span class="keyword">on</span> tb_user;</span><br></pre></td></tr></table></figure><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;&#x3D;或者&lt;&#x3D;来规避索引失效问题。</p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处 phone 的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在 SQL 语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force 就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是 select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的 id，返回 name 和 name 索引对应的 id 即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下 SQL 语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p>解：给 username 和 password 字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text 等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘 IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是 1，这是最好的索引选择性，性能也是最好的。</p><p>求选择性公式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> email) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="built_in">substring</span>(email, <span class="number">1</span>, <span class="number">5</span>)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure><p>show index 里面的 sub_part 可以看到接取的长度</p><h4 id="单列索引-amp-联合索引"><a href="#单列索引-amp-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;芜湖大司马&#39;;</code><br>这句只会用到 phone 索引字段</p><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多条件联合查询时，MySQL 优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储 NULL 值，请在创建表时使用 NOT NULL 约束它。当优化器知道每列是否包含 NULL 值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="2-4-SQL优化"><a href="#2-4-SQL优化" class="headerlink" title="2.4 SQL优化"></a>2.4 SQL优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过 1000 条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用 insert 语句插入性能较低，此时可以使用 MySQL 数据库提供的 load 指令插入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 <span class="comment">--local-infile（这一行在bash/cmd界面输入）</span></span><br><span class="line">mysql <span class="comment">--local-infile -u root -p</span></span><br><span class="line"># 设置全局参数local_infile为<span class="number">1</span>，开启从本地加载文件导入数据的开关</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@local</span>_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;/root/sql1.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">&#x27;tb_user&#x27;</span> fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在 InnoDB 存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一半，也可以填充 100%，每个页包含了 2-N 行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的 50%），InnoDB 会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><p>主键设计原则：</p><ol><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ol><h3 id="order-by-优化"><a href="#order-by-优化" class="headerlink" title="order by 优化"></a>order by 优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果 order by 字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain 的 extra 信息显示的是<code>Using index, Using filesort</code>，如果要优化掉 Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）</li><li>如果不可避免出现 filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认 256k）</li></ul><h3 id="group-by-优化"><a href="#group-by-优化" class="headerlink" title="group by 优化"></a>group by 优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit-优化"><a href="#limit-优化" class="headerlink" title="limit 优化"></a>limit 优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前 2000000 条记录，但仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 此语句耗时很长</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku limit <span class="number">9000000</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> tb_sku <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">9000000</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span></span><br><span class="line"><span class="comment">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span></span><br><span class="line"><span class="comment">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku <span class="keyword">as</span> s, (<span class="keyword">select</span> id <span class="keyword">from</span> tb_sku <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">9000000</span>, <span class="number">10</span>) <span class="keyword">as</span> a <span class="keyword">where</span> s.id <span class="operator">=</span> a.id;</span><br></pre></td></tr></table></figure><h3 id="count-优化"><a href="#count-优化" class="headerlink" title="count 优化"></a>count 优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(<em>) 的时候会直接返回这个数，效率很高（前提是不适用 where）；<br>InnoDB 在执行 count(</em>) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建 key-value 表存储在内存或硬盘，或者是用 redis</p><p>count 的几种用法：</p><ul><li>如果 count 函数的参数（count 里面写的那个字段）不是 NULL（字段值不为 NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟 count(<em>)一样，因为主键不能为空；count(字段)只计算字段值不为 NULL 的行；count(1)引擎会为每行添加一个 1，然后就 count 这个 1，返回结果也跟 count(</em>)一样；count(null)返回 0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB 引擎会遍历整张表，把每行的主键 id 值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有 not null 约束的话，InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为 null，不为 null，计数累加；有 not null 约束的话，InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(<em>)，所以尽量使用 count(</em>)</p><h3 id="update-优化-避免行锁升级为表锁"><a href="#update-优化-避免行锁升级为表锁" class="headerlink" title="update 优化(避免行锁升级为表锁)"></a>update 优化(避免行锁升级为表锁)</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于 id 有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于 name 没有索引，所以会把整张表都锁住进行数据更新，解决方法是给 name 字段添加索引</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/Bing/Bing.js"/>
      <url>/Bing/Bing.js</url>
      
        <content type="html"><![CDATA[var fs = require('fs');var readline = require('readline');var path = require('path') function readFileToArr(fReadName, callback) {    var arr = [];    var readObj = readline.createInterface({        input: fs.createReadStream(fReadName)    });     readObj.on('line', function (line) {        arr.push(line);    });    readObj.on('close', function () {        console.log('readLine close....');        callback(arr);    });} // var urlsFile = path.resolve(__dirname, 'links.txt').replace(/\\/g, '/');  // For Windowsvar urlsFile = path.resolve(__dirname, '..', 'Bing', 'links.txt'); /* 兼容 Windows/Linux, 这里nodejs为上级文件夹名 */ readFileToArr(urlsFile, function (arr) {    var request = require('request');    var myJson = {        "siteUrl": "http://www.zer02.fun",        "urlList": arr    };        request({        url: 'https://ssl.bing.com/webmaster/api.svc/json/SubmitUrlbatch?apikey=' + 'afd15a5727aa4c4f98ab1caa4ec8d715',        method: "POST",        json: true,   // <--Very important!!!        body: myJson    }, function (error, response, body) {        console.log(body);    });});var fs = require('fs');var request = require('request');const cheerio = require('cheerio'); request('https://www.zer02.fun/Bing/sitemap.xml', function (error, response, html) {    if (!error && response.statusCode == 200) {        var $ = cheerio.load(html, {            xmlMode: true        });         textFile = 'myLink.txt';        fs.open(textFile, 'wx', (err, fd) => {            if (err) {                if (err.code === 'EEXIST') {                    console.error('myfile already exists');                                        fs.unlinkSync(textFile);  // Remove file                }            }         });         const nodes = $('loc');        var arr = [];                for (i = 0; i < nodes.length; i++) {            arr[i] = nodes[i].firstChild.data;             fs.appendFile(textFile, arr[i] + '\r\n', function (err) {                if (err) {                    console.error('One line converted failed.'); // append failed                } else {                    // console.error('One line converted done!');                }                            })        }         console.error('Converted done!');    }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><div id="gitZone"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>番剧</title>
      <link href="/bangumis/index.html"/>
      <url>/bangumis/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/cat.css"/>
      <url>/css/cat.css</url>
      
        <content type="html"><![CDATA[/* 侧边栏猫咪 */body::-webkit-scrollbar {    width: 0;}.neko {    width: 64px;    height: 64px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812db74be9.png");    position: absolute;    right: 32px;    background-repeat: no-repeat;    background-size: contain;    transform: translateX(50%);    cursor: pointer;    font-family: tzy;    font-weight: 600;    font-size: 16px;    color: #6f42c1;    display: none;}.neko::after {    display: none;    width: 100px;    height: 100px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812d95e6f5.png");    background-size: contain;    z-index: 9999;    position: absolute;    right: 50%;    text-align: center;    line-height: 100px;    top: -115%;}.neko.showMsg::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko:hover::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko.fontColor::after {    color: #333;}/** * @description: 滚动条样式  跟猫二选一 */@media screen and (max-width:992px) {    ::-webkit-scrollbar {        width: 8px !important;        height: 8px !important    }    ::-webkit-scrollbar-track {        border-radius: 2em;    }    ::-webkit-scrollbar-thumb {        background-color: rgb(255 255 255 / .3);        background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);        border-radius: 2em    }    ::-webkit-scrollbar-corner {        background-color: transparent    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  /* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 导航栏魔改 *//* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(5) .menus_item_child {  left: -38px;}/* 自定义霓虹灯 *//* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px rgb(255, 204, 229) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px rgb(255, 204, 229) !important;}/* 自定义字体 */@font-face {  /* 为载入的字体取名字(随意) */  font-family: 'YSHST';  /* 字体文件地址(相对或者绝对路径都可以) */  src: url(/font/优设好身体.woff2);  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: block;}/* 图片模糊渐变清晰 *//*4s为加载动画的时间，1为加载动画的次数，ease-in-out为动画效果*/#page-header,#web_bg {  -webkit-animation: imgblur 4s 1 ease-in-out;  animation: imgblur 4s 1 ease-in-out;}@keyframes imgblur {  0% {    filter: blur(5px);  }  100% {    filter: blur(0px);  }}/*适配使用-webkit内核的浏览器 */@-webkit-keyframes imgblur {  0% {    -webkit-filter: blur(5px);  }  100% {    -webkit-filter: blur(0px);  }}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 4px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 7rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden}.pace-inactive .pace-progress {    opacity: 0;    transition: .3s ease-in}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    /* linear-gradient(to right, #3494e6, #ec6ead) */    background: linear-gradient(to right, #43cea2, #3866ca);    animation: gradient 2s ease infinite;    background-size: 200%}.pace.pace-inactive {    opacity: 0;    transition: .3s;    top: -8px}/* 顶部加载条 */.pace {  -webkit-pointer-events: none;  pointer-events: none;  -webkit-user-select: none;  -moz-user-select: none;  user-select: none;  z-index: 2000;  position: fixed;  margin: auto;  top: 4px;  left: 0;  right: 0;  height: 8px;  border-radius: 8px;  width: 7rem;  background: #eaecf2;  border: 1px #e3e8f7;  overflow: hidden}.pace-inactive .pace-progress {  opacity: 0;  transition: .3s ease-in}.pace .pace-progress {  -webkit-box-sizing: border-box;  -moz-box-sizing: border-box;  -ms-box-sizing: border-box;  -o-box-sizing: border-box;  box-sizing: border-box;  -webkit-transform: translate3d(0, 0, 0);  -moz-transform: translate3d(0, 0, 0);  -ms-transform: translate3d(0, 0, 0);  -o-transform: translate3d(0, 0, 0);  transform: translate3d(0, 0, 0);  max-width: 200px;  position: absolute;  z-index: 2000;  display: block;  top: 0;  right: 100%;  height: 100%;  width: 100%;  /* linear-gradient(to right, #3494e6, #ec6ead) */  background: linear-gradient(to right, #43cea2, #3866ca);  animation: gradient 2s ease infinite;  background-size: 200%}.pace.pace-inactive {  opacity: 0;  transition: .3s;  top: -8px}/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}/* Twikoo 评论样式 */.tk-input .el-textarea__inner {  min-height: 120px !important;}#twikoo .OwO-body {  max-width: 100% !important;}#twikoo .OwO .OwO-body .OwO-items:nth-child(1),#twikoo .OwO .OwO-body .OwO-items:nth-child(4) {  max-height: 360px !important;}#twikoo .OwO-items li[title|=menhera] img {  width: 100% !important;  margin: 5px 10px;}.tk-comment .tk-owo-emotion[alt*=menhera] {  width: 300px !important;}.tk-comment .vemoji[alt|=menhera],.tk-comment .tk-owo-emotion[alt*=menhera] {  max-width: 300px !important;  max-height: 300px !important;  margin: 8px 1px;  display: block !important;}@media screen and (max-width: 768px) {  .tk-comment .vemoji[alt|=menhera], .tk-comment .tk-owo-emotion[alt*=menhera] {      max-width: calc(100% - 30px) !important;      max-height: calc(100% - 30px) !important;  }  .OwO .OwO-body .OwO-items-image .OwO-item[title*=menhera] {      max-width: calc(50% - 10px);      box-sizing: border-box;  }  }/* Aplayer自动缩进 */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}/* 顶部图标大小 */svg.icon {  width: 1.28em;  height: 1.28em;  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}/* 社交栏图标大小 */svg.social_icon {  width: 1.20em;  height: 1.20em;  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}/* 头像状态 */.card-info-avatar .author-status-box {  position: absolute;  bottom: 0;  left: calc(100% - 28px);  width: 28px;  height: 28px;  border: 1px solid #d0d7de;  border-radius: 2em;  background-color: #f8f8f8f8;  transition: 0.4s;  overflow: hidden;}[data-theme="dark"] .card-info-avatar .author-status-box {  background-color: #222222f2;  border: 1px solid #5c6060;}.card-info-avatar .author-status-box .author-status {  display: flex;  align-items: center;  justify-content: center;  height: 28px;  padding: 0 5px;}.card-info-avatar .author-status-box:hover {  width: 105px;}.card-info-avatar .author-status-box:hover .author-status span {  width: 105px;  margin-left: 4px;}.card-info-avatar .author-status-box .author-status span {  width: 0;  font-size: 12px;  height: 100%;  overflow: hidden;  text-overflow: ellipsis;  white-space: nowrap;  transition: 0.4s;}.card-widget .card-info-avatar {  display: inline-block;  position: relative;}/* 头像呼吸灯 */[data-theme="light"] .avatar-img {  animation: huxi_light 4s ease-in-out infinite;}[data-theme="dark"] .avatar-img {  animation: huxi_dark 4s ease-in-out infinite;}@keyframes huxi_light {  0% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }  50% {    box-shadow: 0px 0px 5px 5px #e9f5fa;  }  100% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }}@keyframes huxi_dark {  0% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }  50% {    box-shadow: 0px 0px 5px 5px #39c5bb;  }  100% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }}/* 帧率检测 */#fps {  position: fixed;  /* 指定位置 */  left: 10px;  bottom: 10px;  z-index: 1919810;}[data-theme="light"] #fps {  background-color: rgba(255, 255, 255, 0.85);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}[data-theme="dark"] #fps {  background-color: rgba(0, 0, 0, 0.72);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}/* 滚动条样式 */::-webkit-scrollbar {  width: 8px;  height: 8px;}::-webkit-scrollbar-track {  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;}::-webkit-scrollbar-thumb {  background-color: rgba(28, 204, 157, 0.692);  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: rgba(28, 204, 157, 0.692);}/* 欢迎信息 */#welcome-info {  background: linear-gradient(45deg, #b9f4f3, #e3fbf9);  border-radius: 18px;  padding: 8px;}[data-theme="dark"] #welcome-info {  background: #212121;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/readPercent.css"/>
      <url>/css/readPercent.css</url>
      
        <content type="html"><![CDATA[/* 返回顶部 */button#go-up #percent {    display: none;    font-weight: bold;    font-size: 15px !important;}button#go-up span {    font-size: 12px!important;    margin-right: -1px;}/* 鼠标滑动到按钮上时显示返回顶部图标 */button#go-up:hover i {    display: block !important;}button#go-up:hover #percent {    display: none !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/mouse.css"/>
      <url>/css/mouse.css</url>
      
        <content type="html"><![CDATA[#cursor {    position: fixed;    width: 16px;    height: 16px;    background: rgb(0, 255, 255);    border-radius: 8px;    opacity: 0.25;    z-index: 10086;    pointer-events: none;    transition: 0.2s ease-in-out;    transition-property: background, opacity, transform;}#cursor.hidden {    opacity: 0;}#cursor.hover {    opacity: 0.1;    transform: scale(2.5);}#cursor.active {    opacity: 0.5;    transform: scale(0.5);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/rightMenu.css"/>
      <url>/css/rightMenu.css</url>
      
        <content type="html"><![CDATA[#rightMenu {    display: none;    position: fixed;    padding: 0 .25rem;    width: 9rem;    height: fit-content;    top: 10%;    left: 10%;    background-color: rgba(238, 255, 255, .85);    -webkit-backdrop-filter: blur(20px);    backdrop-filter: blur(20px);    color: #363636;    border-radius: 12px;    z-index: 99994;    border: #e3e8f7;    user-select: none;    box-shadow: rgba(0, 0, 0, .05);}#rightMenu a {    color: #363636;}#rightMenu .rightMenu-group {    padding: .35rem .3rem;    transition: .3s}#rightMenu .rightMenu-line {    border-top: 1px dashed #4259ef23}#rightMenu .rightMenu-group.rightMenu-small {    display: flex;    justify-content: space-between}#rightMenu .rightMenu-group .rightMenu-item {    border-radius: 8px;    transition: .3s;    cursor: pointer}#rightMenu .rightMenu-line .rightMenu-item {    margin: .25rem 0;    padding: .25rem 0}#rightMenu .rightMenu-group.rightMenu-line .rightMenu-item {    display: flex}#rightMenu .rightMenu-group .rightMenu-item:hover {    background-color: #6f42c1;    color: #fff;}#rightMenu .rightMenu-group .rightMenu-item:active {    transform: scale(.97)}#rightMenu .rightMenu-group .rightMenu-item i {    display: inline-block;    text-align: center;    line-height: 1.5rem;    width: 1.5rem;    padding: 0 .25rem}#rightMenu .rightMenu-line .rightMenu-item i {    margin: 0 .25rem}#rightMenu .rightMenu-group .rightMenu-item span {    line-height: 1.5rem}.rightMenu-small .rightMenu-item {    width: 30px;    height: 30px;    line-height: 30px}#rightmenu-mask {    position: fixed;    width: 100vw;    height: 100vh;    background: 0 0;    top: 0;    left: 0;    display: none;    z-index: 101;    margin: 0 !important;    z-index: 99993}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cat.js"/>
      <url>/js/cat.js</url>
      
        <content type="html"><![CDATA[if (document.body.clientWidth > 992) {    function getBasicInfo() {        /* 窗口高度 */        var ViewH = $(window).height();        /* document高度 */        var DocH = $("body")[0].scrollHeight;        /* 滚动的高度 */        var ScrollTop = $(window).scrollTop();        /* 可滚动的高度 */        var S_V = DocH - ViewH;        var Band_H = ScrollTop / (DocH - ViewH) * 100;        return {            ViewH: ViewH,            DocH: DocH,            ScrollTop: ScrollTop,            Band_H: Band_H,            S_V: S_V        }    };    function show(basicInfo) {        if (basicInfo.ScrollTop > 0.001) {            $(".neko").css('display', 'block');        } else {            $(".neko").css('display', 'none');        }    }    (function ($) {        $.fn.nekoScroll = function (option) {            var defaultSetting = {                top: '0',                scroWidth: 6 + 'px',                z_index: 9999,                zoom: 0.9,                borderRadius: 5 + 'px',                right: 60 + 'px',                nekoImg: "https://bu.dusays.com/2022/07/20/62d812db74be9.png",                hoverMsg: "喵喵喵~",                color: "#6f42c1",                during: 500,                blog_body: "body",            };            var setting = $.extend(defaultSetting, option);            var getThis = this.prop("className") !== "" ? "." + this.prop("className") : this.prop("id") !== "" ? "#" +                this.prop("id") : this.prop("nodeName");            if ($(".neko").length == 0) {                this.after("<div class=\"neko\" id=" + setting.nekoname + " data-msg=\"" + setting.hoverMsg + "\"></div>");            }            let basicInfo = getBasicInfo();            $(getThis)                .css({                    'position': 'fixed',                    'width': setting.scroWidth,                    'top': setting.top,                    'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                    'z-index': setting.z_index,                    'background-color': setting.bgcolor,                    "border-radius": setting.borderRadius,                    'right': setting.right,                    'background-image': 'url(' + setting.scImg + ')',                    'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                    'background-size': 'contain'                });            $("#" + setting.nekoname)                .css({                    'position': 'fixed',                    'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                    'z-index': setting.z_index * 10,                    'right': setting.right,                    'background-image': 'url(' + setting.nekoImg + ')',                });            show(getBasicInfo());            $(window)                .scroll(function () {                    let basicInfo = getBasicInfo();                    show(basicInfo);                    $(getThis)                        .css({                            'position': 'fixed',                            'width': setting.scroWidth,                            'top': setting.top,                            'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                            'z-index': setting.z_index,                            'background-color': setting.bgcolor,                            "border-radius": setting.borderRadius,                            'right': setting.right,                            'background-image': 'url(' + setting.scImg + ')',                            'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                            'background-size': 'contain'                        });                    $("#" + setting.nekoname)                        .css({                            'position': 'fixed',                            'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                            'z-index': setting.z_index * 10,                            'right': setting.right,                            'background-image': 'url(' + setting.nekoImg + ')',                        });                    if (basicInfo.ScrollTop == basicInfo.S_V) {                        $("#" + setting.nekoname)                            .addClass("showMsg")                    } else {                        $("#" + setting.nekoname)                            .removeClass("showMsg");                        $("#" + setting.nekoname)                            .attr("data-msg", setting.hoverMsg);                    }                });            this.click(function (e) {                btf.scrollToDest(0, 500)            });            $("#" + setting.nekoname)                .click(function () {                    btf.scrollToDest(0, 500)                });            return this;        }    })(jQuery);    $(document).ready(function () {        //部分自定义        $("#myscoll").nekoScroll({            bgcolor: 'rgb(0 0 0 / .5)', //背景颜色，没有绳子背景图片时有效            borderRadius: '2em',            zoom: 0.9        }        );        //自定义（去掉以下注释，并注释掉其他的查看效果）                // $("#myscoll").nekoScroll({        //     nekoname:'neko1', //nekoname，相当于id        //     nekoImg:'img/猫咪.png', //neko的背景图片        //     scImg:"img/绳1.png", //绳子的背景图片        //     bgcolor:'#1e90ff', //背景颜色，没有绳子背景图片时有效        //     zoom:0.9, //绳子长度的缩放值        //     hoverMsg:'你好~喵', //鼠标浮动到neko上方的对话框信息        //     right:'100px', //距离页面右边的距离        //     fontFamily:'楷体', //对话框字体        //     fontSize:'14px', //对话框字体的大小        //     color:'#1e90ff', //对话框字体颜色        //     scroWidth:'8px', //绳子的宽度        //     z_index:100, //不用解释了吧        //     during:1200, //从顶部到底部滑动的时长        // });            })}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/mouse.js"/>
      <url>/js/mouse.js</url>
      
        <content type="html"><![CDATA[// 防抖全局计时器let TT = null;    //time用来控制事件的触发// 防抖函数:fn->逻辑 time->防抖时间function debounce(fn, time) {    if (TT !== null) clearTimeout(TT);    TT = setTimeout(fn, time);}// 魔改鼠标var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='.5' fill='rgb(0,255,255)'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();if (document.addEventListener("copy", (function() {    debounce((function() {        new Vue({            data: function() {                this.$notify({                    title: "哎嘿！复制成功🍬",                    message: "若要转载最好保留原文链接哦，给你一个大大的赞！",                    position: "top-left",                    offset: 50,                    showClose: !0,                    type: "success",                    duration: 5e3                })            }        })    }    ), 300)  }  )),  document.onkeydown = function(e) {    (123 == e.keyCode || e.ctrlKey && e.shiftKey && (74 === e.keyCode || 73 === e.keyCode || 67 === e.keyCode) || e.ctrlKey && 85 === e.keyCode) && debounce((function() {        new Vue({            data: function() {                this.$notify({                    title: "你已被发现😜",                    message: "小伙子，扒源记住要遵循GPL协议！",                    position: "top-left",                    offset: 50,                    showClose: !0,                    type: "warning",                    duration: 5e3                })            }        })    }    ), 300)  }  ,  navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i) || window && (()=>{    let e = 50      , t = 150      , o = "255, 255, 255"      , n = 1.5      , a = .5      , s = .7      , r = .5;    const l = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function(e) {        window.setTimeout(e, 1e3 / 60)    }    ;    window.requestAnimationFrame = l;    const c = document.getElementById("snow")      , i = c.getContext("2d")      , d = e;    let b = -100      , m = -100      , u = [];    c.width = window.innerWidth,    c.height = window.innerHeight;    const g = ()=>{        i.clearRect(0, 0, c.width, c.height);        const e = t;        for (let t = 0; t < d; t++) {            let n = u[t];            const a = b              , s = m              , r = n.x              , l = n.y              , d = Math.sqrt((a - r) * (a - r) + (s - l) * (s - l));            if (d < e) {                const t = (a - r) / d                  , o = (s - l) / d                  , c = e / (d * d) / 2;                n.velX -= c * t,                n.velY -= c * o            } else                n.velX *= .98,                n.velY < n.speed && n.speed - n.velY > .01 && (n.velY += .01 * (n.speed - n.velY)),                n.velX += Math.cos(n.step += .05) * n.stepSize;            i.fillStyle = "rgba(" + o + ", " + n.opacity + ")",            n.y += n.velY,            n.x += n.velX,            (n.y >= c.height || n.y <= 0) && f(n),            (n.x >= c.width || n.x <= 0) && f(n),            i.beginPath(),            i.arc(n.x, n.y, n.size, 0, 2 * Math.PI),            i.fill()        }        l(g)    }      , f = e=>{        e.x = Math.floor(Math.random() * c.width),        e.y = 0,        e.size = 3 * Math.random() + 2,        e.speed = 1 * Math.random() + .5,        e.velY = e.speed,        e.velX = 0,        e.opacity = .5 * Math.random() + .3    }    ;    document.addEventListener("mousemove", (e=>{        b = e.clientX,        m = e.clientY    }    )),    window.addEventListener("resize", (()=>{        c.width = window.innerWidth,        c.height = window.innerHeight    }    )),    (()=>{        for (let e = 0; e < d; e++) {            const e = Math.floor(Math.random() * c.width)              , t = Math.floor(Math.random() * c.height)              , o = 3 * Math.random() + n              , l = 1 * Math.random() + a              , i = .5 * Math.random() + s;            u.push({                speed: l,                velX: 0,                velY: l,                x: e,                y: t,                size: o,                stepSize: Math.random() / 30 * r,                step: 0,                angle: 180,                opacity: i            })        }        g()    }    )()  }  )(),  dark(),  document.addEventListener("pjax:complete", (function() {    document.getElementById("post-comment") && owoBig()  }  )),  document.addEventListener("DOMContentLoaded", (function() {    document.getElementById("post-comment") && owoBig()  }  )),  document.body.clientWidth > 992) {    function getBasicInfo() {        var e = $(window).height()          , t = $("body")[0].scrollHeight          , o = $(window).scrollTop();        return {            ViewH: e,            DocH: t,            ScrollTop: o,            Band_H: o / (t - e) * 100,            S_V: t - e        }    }    function show(e) {        e.ScrollTop > .001 ? $(".neko").css("display", "block") : $(".neko").css("display", "none")    }    !function(e) {        e.fn.nekoScroll = function(t) {            var o = e.extend({                top: "0",                scroWidth: "6px",                z_index: 9999,                zoom: .9,                borderRadius: "5px",                right: "55.6px",                nekoImg: "https://bu.dusays.com/2022/07/20/62d812db74be9.png",                hoverMsg: "春天啦~",                color: "var(--theme-color)",                during: 500,                blog_body: "body"            }, t)              , n = "" !== this.prop("className") ? "." + this.prop("className") : "" !== this.prop("id") ? "#" + this.prop("id") : this.prop("nodeName");            0 == e(".neko").length && this.after('<div class="neko" id=' + o.nekoname + ' data-msg="' + o.hoverMsg + '"></div>');            let a = getBasicInfo();            return e(n).css({                position: "fixed",                width: o.scroWidth,                top: o.top,                height: a.Band_H * o.zoom * a.ViewH * .01 + "px",                "z-index": o.z_index,                "background-color": o.bgcolor,                "border-radius": o.borderRadius,                right: o.right,                "background-image": "url(" + o.scImg + ")",                "background-image": "-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)",                "border-radius": "2em",                "background-size": "contain"            }),            e("#" + o.nekoname).css({                position: "fixed",                top: a.Band_H * o.zoom * a.ViewH * .01 - 50 + "px",                "z-index": 10 * o.z_index,                right: o.right,                "background-image": "url(" + o.nekoImg + ")"            }),            show(getBasicInfo()),            e(window).scroll((function() {                let t = getBasicInfo();                show(t),                e(n).css({                    position: "fixed",                    width: o.scroWidth,                    top: o.top,                    height: t.Band_H * o.zoom * t.ViewH * .01 + "px",                    "z-index": o.z_index,                    "background-color": o.bgcolor,                    "border-radius": o.borderRadius,                    right: o.right,                    "background-image": "url(" + o.scImg + ")",                    "background-image": "-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)",                    "border-radius": "2em",                    "background-size": "contain"                }),                e("#" + o.nekoname).css({                    position: "fixed",                    top: t.Band_H * o.zoom * t.ViewH * .01 - 50 + "px",                    "z-index": 10 * o.z_index,                    right: o.right,                    "background-image": "url(" + o.nekoImg + ")"                }),                t.ScrollTop == t.S_V ? e("#" + o.nekoname).addClass("showMsg") : (e("#" + o.nekoname).removeClass("showMsg"),                e("#" + o.nekoname).attr("data-msg", o.hoverMsg))            }            )),            this.click((function(e) {                btf.scrollToDest(0, 500)            }            )),            e("#" + o.nekoname).click((function() {                btf.scrollToDest(0, 500)            }            )),            this        }    }(jQuery),    $(document).ready((function() {        $("#myscoll").nekoScroll({            bgcolor: "rgb(0 0 0 / .5)",            borderRadius: "2em",            zoom: .9        })    }    ))  }  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {                    }        idx++;        if (idx == 8) {            idx = 0;        }    } else {        // 白天模式恢复默认        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";        } catch {                    }    }}// 开启计时器window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/fps.js"/>
      <url>/js/fps.js</url>
      
        <content type="html"><![CDATA[if (window.localStorage.getItem("fpson") == undefined || window.localStorage.getItem("fpson") == "1") {    var rAF = function () {        return (            window.requestAnimationFrame ||            window.webkitRequestAnimationFrame ||            function (callback) {                window.setTimeout(callback, 1000 / 60);            }        );    }();    var frame = 0;    var allFrameCount = 0;    var lastTime = Date.now();    var lastFameTime = Date.now();    var loop = function () {        var now = Date.now();        var fs = (now - lastFameTime);        var fps = Math.round(1000 / fs);        lastFameTime = now;        // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS        allFrameCount++;        frame++;        if (now > 1000 + lastTime) {            var fps = Math.round((frame * 1000) / (now - lastTime));            if (fps <= 5) {                var kd = `<span style="color:#bd0000">卡成ppt🤢</span>`            } else if (fps <= 15) {                var kd = `<span style="color:red">电竞级帧率😖</span>`            } else if (fps <= 25) {                var kd = `<span style="color:orange">有点难受😨</span>`            } else if (fps < 35) {                var kd = `<span style="color:#9338e6">不太流畅🙄</span>`            } else if (fps <= 45) {                var kd = `<span style="color:#08b7e4">还不错哦😁</span>`            } else {                var kd = `<span style="color:#39c5bb">十分流畅🤣</span>`            }            document.getElementById("fps").innerHTML = `FPS:${fps} ${kd}`;            frame = 0;            lastTime = now;        };        rAF(loop);    }    loop();} else {    document.getElementById("fps").style = "display:none!important"}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/readPercent.js"/>
      <url>/js/readPercent.js</url>
      
        <content type="html"><![CDATA[window.onscroll = percent;// 执行函数// 页面百分比function percent() {    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度        result = Math.round(a / b * 100), // 计算百分比        up = document.querySelector("#go-up") // 获取按钮    if (result <= 95) {        up.childNodes[0].style.display = 'none'        up.childNodes[1].style.display = 'block'        up.childNodes[1].innerHTML = result;    } else {        up.childNodes[1].style.display = 'none'        up.childNodes[0].style.display = 'block'    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/rightMenu.js"/>
      <url>/js/rightMenu.js</url>
      
        <content type="html"><![CDATA[var rm = {};rm.showRightMenu = function (isTrue, x = 0, y = 0) {    let $rightMenu = $('#rightMenu');    $rightMenu.css('top', x + 'px').css('left', y + 'px');    if (isTrue) {        stopMaskScroll()        $rightMenu.show();    } else {        $rightMenu.hide();    }};let rmWidth = $('#rightMenu').width();let rmHeight = $('#rightMenu').height();rm.reloadrmSize = function () {    rmWidth = $("#rightMenu").width();    rmHeight = $("#rightMenu").height()};window.oncontextmenu = function (event) {    if (document.body.clientWidth > 768) {        let pageX = event.clientX + 10;        let pageY = event.clientY;        let $rightMenuNormal = $(".rightMenuNormal");        let $rightMenuOther = $(".rightMenuOther");        let $rightMenuReadmode = $("#menu-readmode");        $rightMenuNormal.show();        $rightMenuOther.show();        rm.reloadrmSize();        if (pageX + rmWidth > window.innerWidth) {            pageX -= rmWidth;        }        if (pageY + rmHeight > window.innerHeight) {            pageY -= rmHeight;        }        rm.showRightMenu(true, pageY, pageX);        $('#rightmenu-mask').attr('style', 'display: flex');        return false;    }};function removeRightMenu() {    rm.showRightMenu(false);    $('#rightmenu-mask').attr('style', 'display: none');}function stopMaskScroll() {    if (document.getElementById("rightmenu-mask")) {        let xscroll = document.getElementById("rightmenu-mask");        xscroll.addEventListener("mousewheel", function (e) {            removeRightMenu();        }, false);    };    if (document.getElementById("rightMenu")) {        let xscroll = document.getElementById("rightMenu");        xscroll.addEventListener("mousewheel", function (e) {            removeRightMenu();        }, false);    }}/** * @name:  切換模式 */function switchDarkMode() {    removeRightMenu();    const nowMode = document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light'    if (nowMode === 'light') {        activateDarkMode();        saveToLocal.set('theme', 'dark', 2);        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night);    } else {        activateLightMode();        saveToLocal.set('theme', 'light', 2);        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.night_to_day);    }    typeof utterancesTheme === 'function' && utterancesTheme();    typeof FB === 'object' && window.loadFBComment();    window.DISQUS && document.getElementById('disqus_thread').children.length && setTimeout(() => window.disqusReset(), 200);};// function switchNightMode() {//     document.querySelector("body").insertAdjacentHTML("beforeend", '<div class="Cuteen_DarkSky"><div class="Cuteen_DarkPlanet"><div id="sun"></div><div id="moon"></div></div></div>'),//     setTimeout((function() {//         document.querySelector("body").classList.contains("DarkMode") ? (document.querySelector("body").classList.remove("DarkMode"),//         localStorage.setItem("isDark", "0"),//         document.getElementById("modeicon").setAttribute("xlink:href", "#icon-moon")) : (document.querySelector("body").classList.add("DarkMode"),//         localStorage.setItem("isDark", "1"),//         document.getElementById("modeicon").setAttribute("xlink:href", "#icon-sun")),//         setTimeout((function() {//             document.getElementsByClassName("Cuteen_DarkSky")[0].style.transition = "opacity 3s",//             document.getElementsByClassName("Cuteen_DarkSky")[0].style.opacity = "0",//             setTimeout((function() {//                 document.getElementsByClassName("Cuteen_DarkSky")[0].remove()//             }//             ), 1e3)//         }//         ), 2e3)//     }//     ));//     "light" === ("dark" === document.documentElement.getAttribute("data-theme") ? "dark" : "light") ? (document.getElementById("sun").style.opacity = "1",//     document.getElementById("moon").style.opacity = "0",//     setTimeout((function() {//         document.getElementById("sun").style.opacity = "0",//         document.getElementById("moon").style.opacity = "1"//     }//     ), 1e3),//     activateDarkMode(),//     saveToLocal.set("theme", "dark", 2),//     document.getElementById("modeicon").setAttribute("xlink:href", "#icon-sun"),//     setTimeout((()=>{//         new Vue({//             data: function() {//                 this.$notify({//                     title: "关灯啦🌙",//                     message: "当前已成功切换至夜间模式！",//                     position: "top-left",//                     offset: 50,//                     showClose: !0,//                     type: "success",//                     duration: 5e3//                 })//             }//         })//     }//     ), 2e3)) : (document.getElementById("sun").style.opacity = "0",//     document.getElementById("moon").style.opacity = "1",//     setTimeout((function() {//         document.getElementById("sun").style.opacity = "1",//         document.getElementById("moon").style.opacity = "0"//     }//     ), 1e3),//     activateLightMode(),//     saveToLocal.set("theme", "light", 2),//     document.querySelector("body").classList.add("DarkMode"),//     document.getElementById("modeicon").setAttribute("xlink:href", "#icon-moon"),//     setTimeout((()=>{//         new Vue({//             data: function() {//                 this.$notify({//                     title: "开灯啦🌞",//                     message: "当前已成功切换至白天模式！",//                     position: "top-left",//                     offset: 50,//                     showClose: !0,//                     type: "success",//                     duration: 5e3//                 })//             }//         })//     }//     ), 2e3)),//     "function" == typeof utterancesTheme && utterancesTheme(),//     "object" == typeof FB && window.loadFBComment(),//     window.DISQUS && document.getElementById("disqus_thread").children.length && setTimeout((()=>window.disqusReset()), 200)// }/* eslint-disable no-undef */document.addEventListener('DOMContentLoaded', function () {    translateInitialization();    document.addEventListener('pjax:complete', translateInitialization);});const translate = GLOBAL_CONFIG.translate;const snackbarData = GLOBAL_CONFIG.Snackbar;const defaultEncoding = translate.defaultEncoding; /* 網站默認語言，1: 繁體中文, 2: 簡體中文 */const translateDelay = translate.translateDelay; /* 延遲時間,若不在前, 要設定延遲翻譯時間, 如100表示100ms,默認為0 */const msgToTraditionalChinese = translate.msgToTraditionalChinese; /* 此處可以更改為你想要顯示的文字 */const msgToSimplifiedChinese = translate.msgToSimplifiedChinese; /* 同上，但兩處均不建議更改 */let currentEncoding = defaultEncoding;const targetEncodingCookie = 'translate-chn-cht';let targetEncoding =    saveToLocal.get(targetEncodingCookie) === undefined        ? defaultEncoding        : Number(saveToLocal.get('translate-chn-cht'));let translateButtonObjectconst isSnackbar = GLOBAL_CONFIG.Snackbar !== undefined;function translateText(txt) {    if (txt === '' || txt == null) return '';    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt);    else if (currentEncoding === 2 && targetEncoding === 1) { return Traditionalized(txt) } else return txt;}function translateBody(fobj) {    let objs;    if (typeof fobj === 'object') objs = fobj.childNodes;    else objs = document.body.childNodes;    for (let i = 0; i < objs.length; i++) {        const obj = objs.item(i);        if (            '||BR|HR|'.indexOf('|' + obj.tagName + '|') > 0 ||            obj === translateButtonObject        ) { continue }        if (obj.title !== '' && obj.title != null) { obj.title = translateText(obj.title) };        if (obj.alt !== '' && obj.alt != null) obj.alt = translateText(obj.alt);        if (obj.placeholder !== '' && obj.placeholder != null) obj.placeholder = translateText(obj.placeholder);        if (            obj.tagName === 'INPUT' &&            obj.value !== '' &&            obj.type !== 'text' &&            obj.type !== 'hidden'        ) { obj.value = translateText(obj.value) }        if (obj.nodeType === 3) obj.data = translateText(obj.data);        else translateBody(obj);    }}function translatePage() {    if (targetEncoding === 1) {        currentEncoding = 1;        targetEncoding = 2;        saveToLocal.set(targetEncodingCookie, targetEncoding, 2);        translateBody();        if (isSnackbar) btf.snackbarShow(snackbarData.cht_to_chs);    } else if (targetEncoding === 2) {        currentEncoding = 2;        targetEncoding = 1;        saveToLocal.set(targetEncodingCookie, targetEncoding, 2);        translateBody();        if (isSnackbar) btf.snackbarShow(snackbarData.chs_to_cht);    }}function JTPYStr() {    return '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾'}function FTPYStr() {    return '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽'}function Traditionalized(cc) {    let str = '';    const ss = JTPYStr();    const tt = FTPYStr();    for (let i = 0; i < cc.length; i++) {        if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) { str += tt.charAt(ss.indexOf(cc.charAt(i))) } else str += cc.charAt(i)    };    return str;}function Simplized(cc) {    let str = '';    const ss = JTPYStr();    const tt = FTPYStr();    for (let i = 0; i < cc.length; i++) {        if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) { str += ss.charAt(tt.indexOf(cc.charAt(i))) } else str += cc.charAt(i)    }    return str;}function translateInitialization() {    translateButtonObject = document.getElementById('menu-translate');    if (translateButtonObject) {        if (currentEncoding !== targetEncoding) {            setTimeout(translateBody, translateDelay);        }        translateButtonObject.addEventListener('click', translatePage, false);    }}$('#menu-backward').on('click', function () { window.history.back(); });$('#menu-forward').on('click', function () { window.history.forward(); });$('#menu-refresh').on('click', function () { window.location.reload(); });$('#menu-darkmode').on('click', function () { switchDarkMode() });$('#menu-home').on('click', function () { window.location.href = window.location.origin; });/* 简体繁体切换 */$('#menu-translate').on('click', function () {    removeRightMenu();    translateInitialization();});$(".menu-link").on("click", function () {    removeRightMenu()});$("#rightmenu-mask").on("click", function () { removeRightMenu() });$("#rightmenu-mask").contextmenu(function () {    removeRightMenu();    return false;});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/sun_moon.js"/>
      <url>/js/sun_moon.js</url>
      
        <content type="html"><![CDATA[function switchNightMode() {    document.querySelector('body').insertAdjacentHTML('beforeend', '<div class="Cuteen_DarkSky"><div class="Cuteen_DarkPlanet"><div id="sun"></div><div id="moon"></div></div></div>'),        setTimeout(function () {            document.querySelector('body').classList.contains('DarkMode') ? (document.querySelector('body').classList.remove('DarkMode'), localStorage.setItem('isDark', '0'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-moon')) : (document.querySelector('body').classList.add('DarkMode'), localStorage.setItem('isDark', '1'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-sun')),                setTimeout(function () {                    document.getElementsByClassName('Cuteen_DarkSky')[0].style.transition = 'opacity 3s';                    document.getElementsByClassName('Cuteen_DarkSky')[0].style.opacity = '0';                    setTimeout(function () {                        document.getElementsByClassName('Cuteen_DarkSky')[0].remove();                    }, 1e3);                }, 2e3)        })    const nowMode = document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light'    if (nowMode === 'light') {        // 先设置太阳月亮透明度        document.getElementById("sun").style.opacity = "1";        document.getElementById("moon").style.opacity = "0";        setTimeout(function () {            document.getElementById("sun").style.opacity = "0";            document.getElementById("moon").style.opacity = "1";        }, 1000);        activateDarkMode()        saveToLocal.set('theme', 'dark', 2)        // GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)        document.getElementById('modeicon').setAttribute('xlink:href', '#icon-sun')        // 延时弹窗提醒        setTimeout(() => {            new Vue({                data: function () {                    this.$notify({                        title: "关灯啦🌙",                        message: "当前已成功切换至夜间模式！",                        position: 'top-left',                        offset: 50,                        showClose: true,                        type: "success",                        duration: 5000                    });                }            })        }, 2000)    } else {        // 先设置太阳月亮透明度        document.getElementById("sun").style.opacity = "0";        document.getElementById("moon").style.opacity = "1";        setTimeout(function () {            document.getElementById("sun").style.opacity = "1";            document.getElementById("moon").style.opacity = "0";        }, 1000);                activateLightMode()        saveToLocal.set('theme', 'light', 2)        document.querySelector('body').classList.add('DarkMode'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-moon')        setTimeout(() => {            new Vue({                data: function () {                    this.$notify({                        title: "开灯啦🌞",                        message: "当前已成功切换至白天模式！",                        position: 'top-left',                        offset: 50,                        showClose: true,                        type: "success",                        duration: 5000                    });                }            })        }, 2000)    }    // handle some cases    typeof utterancesTheme === 'function' && utterancesTheme()    typeof FB === 'object' && window.loadFBComment()    window.DISQUS && document.getElementById('disqus_thread').children.length && setTimeout(() => window.disqusReset(), 200)}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){now.setTime(now.getTime()+1e3);var e=new Date("11/13/2022 12:00:00"),t=Math.trunc(234e8+(now-e)/1e3*17),a=(t/1496e5).toFixed(6),n=new Date("11/13/2022 12:00:00"),s=(now-n)/1e3/60/60/24,o=Math.floor(s),r=(now-n)/1e3/60/60-24*o,i=Math.floor(r);1==String(i).length&&(i="0"+i);var l=(now-n)/1e3/60-1440*o-60*i,b=Math.floor(l);1==String(b).length&&(b="0"+b);var d=(now-n)/1e3-86400*o-3600*i-60*b,c=Math.round(d);1==String(c).length&&(c="0"+c);let g="";g=i<18&&i>=9?`<img class='boardsign' src='https://img.shields.io/badge/F小屋-上班摸鱼中-6adea8?style=social&logo=cakephp' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> <b>本站居然运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id="heartbeat" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>再看看那个光点，它就在这里，这是家园，这是我们 ——— 你所爱的每一个人，你认识的一个人，你听说过的每一个人，曾经有过的每一个人，都在它上面度过他们的一生✨</font></b> `:`<img class='boardsign' src='https://img.shields.io/badge/F小屋-打烊休息啦-6adea8?style=social&logo=coffeescript' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> <b>本站居然运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id="heartbeat" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>再看看那个光点，它就在这里，这是家园，这是我们 ——— 你所爱的每一个人，你认识的一个人，你听说过的每一个人，曾经有过的每一个人，都在它上面度过他们的一生✨</font></b> `,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval((()=>{createtime()}),1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener("visibilitychange", function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = "👀跑哪儿去了~";    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = "♪(^∇^*)欢迎肥来！" + OriginTitile;    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/txmap.js"/>
      <url>/js/txmap.js</url>
      
        <content type="html"><![CDATA[//get请求$.ajax({    type: 'get',    url: 'https://apis.map.qq.com/ws/location/v1/ip',    data: {        key: 'YADBZ-N3PH3-HES3I-RVM2M-KWYWO-L6BDS',        output: 'jsonp',    },    dataType: 'jsonp',    success: function (res) {        ipLoacation = res;    }})function getDistance(e1, n1, e2, n2) {    const R = 6371    const { sin, cos, asin, PI, hypot } = Math    let getPoint = (e, n) => {        e *= PI / 180        n *= PI / 180        return { x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) }    }    let a = getPoint(e1, n1)    let b = getPoint(e2, n2)    let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z)    let r = asin(c / 2) * 2 * R    return Math.round(r);}function showWelcome() {    let dist = getDistance(109.22, 34.37, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里换成自己的经纬度    let pos = ipLoacation.result.ad_info.nation;    let ip;    let posdesc;    //根据国家、省份、城市信息自定义欢迎语    switch (ipLoacation.result.ad_info.nation) {        case "日本":            posdesc = "よろしく，一起去看樱花吗";            break;        case "美国":            posdesc = "Let us live in peace!";            break;        case "英国":            posdesc = "想同你一起夜乘伦敦眼";            break;        case "俄罗斯":            posdesc = "干了这瓶伏特加！";            break;        case "法国":            posdesc = "C'est La Vie";            break;        case "德国":            posdesc = "Die Zeit verging im Fluge.";            break;        case "澳大利亚":            posdesc = "一起去大堡礁吧！";            break;        case "加拿大":            posdesc = "拾起一片枫叶赠予你";            break;        case "中国":            pos = ipLoacation.result.ad_info.province + " " + ipLoacation.result.ad_info.city + " " + ipLoacation.result.ad_info.district;            ip = ipLoacation.result.ip;            switch (ipLoacation.result.ad_info.province) {                case "北京市":                    posdesc = "北——京——欢迎你~~~";                    break;                case "天津市":                    posdesc = "讲段相声吧。";                    break;                case "河北省":                    posdesc = "山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。";                    break;                case "山西省":                    posdesc = "展开坐具长三尺，已占山河五百余。";                    break;                case "内蒙古自治区":                    posdesc = "天苍苍，野茫茫，风吹草低见牛羊。";                    break;                case "辽宁省":                    posdesc = "我想吃烤鸡架！";                    break;                case "吉林省":                    posdesc = "状元阁就是东北烧烤之王。";                    break;                case "黑龙江省":                    posdesc = "很喜欢哈尔滨大剧院。";                    break;                case "上海市":                    posdesc = "众所周知，中国只有两个城市。";                    break;                case "江苏省":                    switch (ipLoacation.result.ad_info.city) {                        case "南京市":                            posdesc = "这是我挺想去的城市啦。";                            break;                        case "苏州市":                            posdesc = "上有天堂，下有苏杭。";                            break;                        default:                            posdesc = "散装是必须要散装的。";                            break;                    }                    break;                case "浙江省":                    posdesc = "东风渐绿西湖柳，雁已还人未南归。";                    break;                case "河南省":                    switch (ipLoacation.result.ad_info.city) {                        case "郑州市":                            posdesc = "豫州之域，天地之中。";                            break;                        case "南阳市":                            posdesc = "臣本布衣，躬耕于南阳。此南阳非彼南阳！";                            break;                        case "驻马店市":                            posdesc = "峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！";                            break;                        case "开封市":                            posdesc = "刚正不阿包青天。";                            break;                        case "洛阳市":                            posdesc = "洛阳牡丹甲天下。";                            break;                        default:                            posdesc = "可否带我品尝河南烩面啦？";                            break;                    }                    break;                case "安徽省":                    posdesc = "蚌埠住了，芜湖起飞。";                    break;                case "福建省":                    posdesc = "井邑白云间，岩城远带山。";                    break;                case "江西省":                    posdesc = "落霞与孤鹜齐飞，秋水共长天一色。";                    break;                case "山东省":                    posdesc = "遥望齐州九点烟，一泓海水杯中泻。";                    break;                case "湖北省":                    posdesc = "来碗热干面！";                    break;                case "湖南省":                    posdesc = "74751，长沙斯塔克。";                    break;                case "广东省":                    posdesc = "老板来两斤福建人。";                    break;                case "广西壮族自治区":                    posdesc = "桂林山水甲天下。";                    break;                case "海南省":                    posdesc = "朝观日出逐白浪，夕看云起收霞光。";                    break;                case "四川省":                    posdesc = "康康川妹子。";                    break;                case "贵州省":                    posdesc = "茅台，学生，再塞200。";                    break;                case "云南省":                    posdesc = "玉龙飞舞云缠绕，万仞冰川直耸天。";                    break;                case "西藏自治区":                    posdesc = "躺在茫茫草原上，仰望蓝天。";                    break;                case "陕西省":                    posdesc = "来份臊子面加馍。";                    break;                case "甘肃省":                    posdesc = "羌笛何须怨杨柳，春风不度玉门关。";                    break;                case "青海省":                    posdesc = "牛肉干和老酸奶都好好吃。";                    break;                case "宁夏回族自治区":                    posdesc = "大漠孤烟直，长河落日圆。";                    break;                case "新疆维吾尔自治区":                    posdesc = "驼铃古道丝绸路，胡马犹闻唐汉风。";                    break;                case "台湾省":                    posdesc = "我在这头，大陆在那头。";                    break;                case "香港特别行政区":                    posdesc = "永定贼有残留地鬼嚎，迎击光非岁玉。";                    break;                case "澳门特别行政区":                    posdesc = "性感荷官，在线发牌。";                    break;                default:                    posdesc = "带我去你的城市逛逛吧！";                    break;            }            break;        default:            posdesc = "带我去你的国家逛逛吧。";            break;    }    //根据本地时间切换欢迎语    let timeChange;    let date = new Date();    if (date.getHours() >= 5 && date.getHours() < 11) timeChange = "<span>上午好</span>，一日之计在于晨！";    else if (date.getHours() >= 11 && date.getHours() < 13) timeChange = "<span>中午好</span>，该摸鱼吃午饭了。";    else if (date.getHours() >= 13 && date.getHours() < 15) timeChange = "<span>下午好</span>，懒懒地睡个午觉吧！";    else if (date.getHours() >= 15 && date.getHours() < 16) timeChange = "<span>三点几啦</span>，一起饮茶呀！";    else if (date.getHours() >= 16 && date.getHours() < 19) timeChange = "<span>夕阳无限好！</span>";    else if (date.getHours() >= 19 && date.getHours() < 24) timeChange = "<span>晚上好</span>，夜生活嗨起来！";    else timeChange = "夜深了，早点休息，少熬夜。";    try {        //自定义文本和需要放的位置        document.getElementById("welcome-info").innerHTML =            `<b><center>🎉 欢迎信息 🎉</center>&emsp;&emsp;欢迎来自 <span style="color:var(--theme-color)">${pos}</span> 的小伙伴，${timeChange}您现在距离站长约 <span style="color:var(--theme-color)">${dist}</span> 公里，当前的IP地址为： <span style="color:var(--theme-color)">${ip}</span>， ${posdesc}</b>`;    } catch (err) {        // console.log("Pjax无法获取#welcome-info元素🙄🙄🙄")    }}window.onload = showWelcome;// 如果使用了pjax在加上下面这行代码document.addEventListener('pjax:complete', showWelcome);]]></content>
      
    </entry>
    
    
  
</search>
